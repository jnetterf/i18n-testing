# 
msgid ""
msgstr ""
"Project-Id-Version: 1.0\n"
"Report-Msgid-Bugs-To: translation-team@khanacademy.org\n"
"POT-Creation-Date: 2017-12-01 14:42+0000\n"
"PO-Revision-Date: 2017-12-01 14:42+0000\n"
"Language-Team: English <english-translators@khanacademy.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/algorithms-more-learning/a/where-to-go-from-here">http://translate.khanacademy.org/computing/computer-science/algorithms/algorithms-more-learning/a/where-to-go-from-here</a>
# Title of tutorial article (xaf5affb9) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Where to go from here"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/algorithms-more-learning/a/where-to-go-from-here">http://translate.khanacademy.org/computing/computer-science/algorithms/algorithms-more-learning/a/where-to-go-from-here</a>.
# Article is at (xaf5affb9) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   [Algorithms, I & II](https://www.coursera.org/course/algs4partI): An introductory course covering \"basic iterable data types, sorting, and searching algorithms in Java\".\n"
"*   [Algorithms: Design and Analysis Part I & II](https://www.coursera.org/course/algo): An introductory course that covers the \"fundamental principles of algorithm design: divide-and-conquer methods, graph algorithms, practical data structures, randomized algorithms, and more\" while being language agnostic."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/algorithms-more-learning/a/where-to-go-from-here">http://translate.khanacademy.org/computing/computer-science/algorithms/algorithms-more-learning/a/where-to-go-from-here</a>.
# Article is at (xaf5affb9) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   [Introduction to Algorithms](http://www.amazon.com/Introduction-Algorithms-Edition-Thomas-Cormen/dp/0262033844/): This is the most popular college textbook for algorithms. It is both rigorous—proving that algorithms are correct and have the claimed running times—and comprehensive—covering dozens of algorithms in over 1300 pages.\n"
"*   [Algorithms Unlocked](http://www.amazon.com/Algorithms-Unlocked-Thomas-H-Cormen/dp/0262518805/): This is targeted more at readers who want to get a taste of algorithms and how to analyze them. It's less mathematical than Introduction to Algorithms, and it includes a little more in the way of intuition and applications."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/algorithms-more-learning/a/where-to-go-from-here">http://translate.khanacademy.org/computing/computer-science/algorithms/algorithms-more-learning/a/where-to-go-from-here</a>.
# Article is at (xaf5affb9) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Did you get through all of that content? Congratulations! You've learnt the fundamentals of algorithms, plus a lot of example algorithms."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/algorithms-more-learning/a/where-to-go-from-here">http://translate.khanacademy.org/computing/computer-science/algorithms/algorithms-more-learning/a/where-to-go-from-here</a>.
# Article is at (xaf5affb9) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Other recommended books are [The Algorithm Design Manual](http://www.amazon.com/Algorithm-Design-Manual-Steven-Skiena/dp/1848000693) and [Algorithm Design](http://www.amazon.com/Algorithm-Design-Jon-Kleinberg/dp/0321295358/)."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/algorithms-more-learning/a/where-to-go-from-here">http://translate.khanacademy.org/computing/computer-science/algorithms/algorithms-more-learning/a/where-to-go-from-here</a>.
# Article is at (xaf5affb9) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "There are also several free 2-part courses offered online on Coursera:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/algorithms-more-learning/a/where-to-go-from-here">http://translate.khanacademy.org/computing/computer-science/algorithms/algorithms-more-learning/a/where-to-go-from-here</a>.
# Article is at (xaf5affb9) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "There is much more to learn, if you want to dig deeper. Just look at Wikipedia's [list of algorithms](http://en.wikipedia.org/wiki/List_of_algorithms) - there are thousands of them out there, plus there are the ones in your head that haven't made it into programs yet."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/algorithms-more-learning/a/where-to-go-from-here">http://translate.khanacademy.org/computing/computer-science/algorithms/algorithms-more-learning/a/where-to-go-from-here</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-omega-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-omega-notation</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/analysis-of-breadth-first-search">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/analysis-of-breadth-first-search</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort-pseudocode">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort-pseudocode</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/a-guessing-game">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/a-guessing-game</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/computing-powers-of-a-number">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/computing-powers-of-a-number</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/properties-of-recursive-algorithms">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/properties-of-recursive-algorithms</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursive-factorial">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursive-factorial</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-factorial-function">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-factorial-function</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/using-recursion-to-determine-whether-a-word-is-a-palindrome">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/using-recursion-to-determine-whether-a-word-is-a-palindrome</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/sorting">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/sorting</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued</a>.
# Article is at (x0788117a) on the pl stage.
# Article is at (x0ef73e9a) on the pl stage.
# Article is at (x0f99c1d1) on the pl stage.
# Article is at (x1bfeb631) on the pl stage.
# Article is at (x20911059) on the pl stage.
# Article is at (x21570e30) on the pl stage.
# Article is at (x22219192) on the pl stage.
# Article is at (x26f9fc30) on the pl stage.
# Article is at (x2950734a) on the pl stage.
# Article is at (x329fd477) on the pl stage.
# Article is at (x3396735b) on the pl stage.
# Article is at (x5eac9d0d) on the pl stage.
# Article is at (x689441a1) on the pl stage.
# Article is at (x6a6b514f) on the pl stage.
# Article is at (x73d59d90) on the pl stage.
# Article is at (x7491c5e8) on the pl stage.
# Article is at (x77830370) on the pl stage.
# Article is at (x829af65b) on the pl stage.
# Article is at (x98076426) on the pl stage.
# Article is at (xac576850) on the pl stage.
# Article is at (xaf5affb9) on the pl stage.
# Article is at (xb06e1e31) on the pl stage.
# Article is at (xb7600ff3) on the pl stage.
# Article is at (xb9349260) on the pl stage.
# Article is at (xb95f0f74) on the pl stage.
# Article is at (xbdc49207) on the pl stage.
# Article is at (xcb8fd18d) on the pl stage.
# Article is at (xdf626fb3) on the pl stage.
# Article is at (xe10180d4) on the pl stage.
# Article is at (xe207b3f1) on the pl stage.
# Article is at (xed3ada49) on the pl stage.
# Article is at (xf2ebb181) on the pl stage.
# Article is at (xf482935a) on the pl stage.
# Article is at (xf5eda013) on the pl stage.
# Article is at (xf62c68b9) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "This content is a collaboration of [Dartmouth Computer Science](http://www.cs.dartmouth.edu/) professors [Thomas Cormen](http://www.cs.dartmouth.edu/~thc/) and [Devin Balkcom](http://www.cs.dartmouth.edu/~devin/), plus the Khan Academy computing curriculum team. The content is licensed [CC-BY-NC-SA](http://creativecommons.org/licenses/by-nc-sa/4.0/)."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/algorithms-more-learning/a/where-to-go-from-here">http://translate.khanacademy.org/computing/computer-science/algorithms/algorithms-more-learning/a/where-to-go-from-here</a>.
# Article is at (xaf5affb9) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Thomas Cormen, co-author of this content, has also co-authored two books on algorithms:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/algorithms-more-learning/a/where-to-go-from-here">http://translate.khanacademy.org/computing/computer-science/algorithms/algorithms-more-learning/a/where-to-go-from-here</a>.
# Article is at (xaf5affb9) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We do plan to keep adding to this content here on Khan Academy, so check back here every few months for updates."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-omega-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-omega-notation</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation</a>.
# Article is at (x689441a1) on the pl stage.
# Article is at (x956cf7fd) on the pl stage.
# Article is at (xdf626fb3) on the pl stage.
# Article is at (xe10180d4) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "6n^2 vs 100n+300"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation</a>.
# Article is at (x956cf7fd) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "By dropping the less significant terms and the constant coefficients, we can focus on the important part of an algorithm's running time—its rate of growth—without getting mired in details that complicate our understanding. When we drop the constant coefficients and the less significant terms, we use **asymptotic notation**. We'll see three forms of it: big-$ \\Theta $ notation, big-O notation, and big-$ \\Omega $ notation."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation</a>.
# Article is at (x956cf7fd) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let's think about the running time of an algorithm more carefully. We can use a combination of two ideas. First, we need to determine how long the algorithm takes, in terms of the size of its input. This idea makes intuitive sense, doesn't it? We've already seen that the maximum number of guesses in linear search and binary search increases as the length of the array increases. Or think about a GPS. If it knew about only the interstate highway system, and not about every little road, it should be able to find routes more quickly, right? So we think about the running time of the algorithm as a _function of the size of its input_."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation</a>.
# Article is at (x956cf7fd) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "So far, we analyzed linear search and binary search by counting the maximum number of guesses we need to make. But what we really want to know is _how long_ these algorithms take. We're interested in _time_, not just guesses. The running times of linear search and binary search include the time needed to make and check guesses, but there's more to these algorithms."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation</a>.
# Article is at (x956cf7fd) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The running time of an algorithm depends on how long it takes a computer to run the lines of code of the algorithm—and that depends on the speed of the computer, the programming language, and the compiler that translates the program from the programming language into code that runs directly on the computer, among other factors."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation</a>.
# Article is at (x956cf7fd) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The second idea is that we must focus on how fast a function grows with the input size. We call this the **rate of growth** of the running time. To keep things manageable, we need to simplify the function to distill the most important part and cast aside the less important parts. For example, suppose that an algorithm, running on an input of size $ n $, takes $ 6n^2 + 100n + 300 $ machine instructions. The $ 6n^2 $ term becomes larger than the remaining terms, $ 100 n + 300 $, once $ n $ becomes large enough, 20 in this case. Here's a chart showing values of $ 6n^2 $ and $ 100n + 300 $ for values of $ n $ from 0 to 100:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation</a>.
# Article is at (x956cf7fd) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The value of $ n $ at which $ 0.6n^2 $ becomes greater than $ 1000n + 3000 $ has increased, but there will always be such a crossover point, no matter what the constants."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# Article is at (x956cf7fd) on the pl stage.
# Article is at (xdaa637b0) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "This content is a collaboration of [Dartmouth Computer Science](http://www.cs.dartmouth.edu/) professors [Thomas Cormen](http://www.cs.dartmouth.edu/~thc/) and [Devin Balkcom](http://www.cs.dartmouth.edu/~devin/) plus the Khan Academy computing curriculum team. The content is licensed [CC-BY-NC-SA](http://creativecommons.org/licenses/by-nc-sa/4.0/)."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation</a>.
# Article is at (x956cf7fd) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We would say that the running time of this algorithm grows as $ n^2 $, dropping the coefficient 6 and the remaining terms $ 100n + 300 $. It doesn't really matter what coefficients we use; as long as the running time is $ an^2 + bn + c $, for some numbers $ a > 0 $, $ b $, and $ c $, there will always be a value of $ n $ for which $ an^2 $ is greater than $ bn + c $, and this difference increases as $ n $ increases. For example, here's a chart showing values of $ 0.6n^2 $ and $ 1000n + 3000 $ so that we've reduced the coefficient of $ n^2 $ by a factor of 10 and increased the other two constants by a factor of 10:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation</a>.
# Article is at (x956cf7fd) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/0.6n2_vs_1000n%2B3000.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation</a>.
# Article is at (x956cf7fd) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/6n2_vs_100n%2B300.png"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-omega-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-omega-notation</a>
# Title of tutorial article (xdf626fb3) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Big-Ω (Big-Omega) notation"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-omega-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-omega-notation</a>.
# Article is at (xdf626fb3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "If a running time is $ \\Omega(f(n)) $, then for large enough $ n $, the running time is at least $ k \\cdot f(n) $ for some constant $ k $. Here's how to think of a running time that is $ \\Omega(f(n)) $:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-omega-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-omega-notation</a>.
# Article is at (xdf626fb3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Just as $ \\Theta(f(n)) $ automatically implies $ O(f(n)) $, it also automatically implies $ \\Omega(f(n)) $. So we can say that the worst-case running time of binary search is $ \\Omega(\\lg n) $. We can also make correct, but imprecise, statements using big-Ω notation. For example, just as if you really do have a million dollars in your pocket, you can truthfully say \"I have an amount of money in my pocket, and it's at least 10 dollars,\" you can also say that the worst-case running time of binary search is $ \\Omega(1) $, because it takes at least constant time."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-omega-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-omega-notation</a>.
# Article is at (xdf626fb3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Sometimes, we want to say that an algorithm takes _at least_ a certain amount of time, without providing an upper bound. We use big-Ω notation; that's the Greek letter \"omega.\""
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-omega-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-omega-notation</a>.
# Article is at (xdf626fb3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We say that the running time is \"big-Ω of $ f(n) $.\" We use big-Ω notation for **asymptotic lower bounds**, since it bounds the growth of the running time from below for large enough input sizes."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-omega-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-omega-notation</a>.
# Article is at (xdf626fb3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/Omega_fn.png"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation</a>
# Title of tutorial article (x689441a1) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Big-θ (Big-Theta) notation "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation</a>.
# Article is at (x689441a1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "As we've argued, the constant factor $ c_1 $ and the low-order term $ c_2 $ don't tell us about the rate of growth of the running time. What's significant is that the worst-case running time of linear search grows like the array size $ n $. The notation we use for this running time is $ \\Theta(n) $. That's the Greek letter \"theta,\" and we say \"big-Theta of $ n $\" or just \"Theta of $ n $.\""
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation</a>.
# Article is at (x689441a1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "For small values of $ n $, we don't care how the running time compares with $ k_1 \\cdot n $ or $ k_2 \\cdot n $. But once $ n $ gets large enough—on or to the right of the dashed line—the running time must be sandwiched between $ k_1 \\cdot n $ and $ k_2 \\cdot n $. As long as these constants $ k_1 $ and $ k_2 $ exist, we say that the running time is $ \\Theta(n) $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation</a>.
# Article is at (x689441a1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "In practice, we just drop constant factors and low-order terms. Another advantage of using big-Θ notation is that we don't have to worry about which time units we're using. For example, suppose that you calculate that a running time is $ 6n^2 + 100n + 300 $ microseconds. Or maybe it's milliseconds. When you use big-Θ notation, you don't say. You also drop the factor 6 and the low-order terms $ 100n + 300 $, and you just say that the running time is $ \\Theta(n^2) $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation</a>.
# Article is at (x689441a1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let's denote the size of the array (`array.length`) by $ n $. The maximum number of times that the for-loop can run is $ n $, and this worst case occurs when the value being searched for is not present in the array. Each time the for-loop iterates, it has to do several things: compare `guess` with `array.length`; compare `array[guess]` with `targetValue`; possibly return the value of `guess`; and increment `guess`. Each of these little computations takes a constant amount of time each time it executes. If the for-loop iterates $ n $ times, then the time for all $ n $ iterations is $ c_1 \\cdot n $, where $ c_1 $ is the sum of the times for the computations in one loop iteration. Now, we cannot say here what the value of $ c_1 $ is, because it depends on the speed of the computer, the programming language used, the compiler or interpreter that translates the source program into runnable code, and other factors. This code has a little bit of extra overhead, for setting up the for-loop (including initializing `guess` to 0) and possibly returning `-1` at the end. Let's call the time for this overhead $ c_2 $, which is also a constant. Therefore, the total time for linear search in the worst case is $ c_1 \\cdot n + c_2 $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation</a>.
# Article is at (x689441a1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let's look at a simple implementation of linear search:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation</a>.
# Article is at (x689441a1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Once $ n $ gets large enough, the running time is between $ k_1 \\cdot f(n) $ and $ k_2 \\cdot f(n) $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation</a>.
# Article is at (x689441a1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We are not restricted to just $ n $ in big-Θ notation. We can use any function, such as $ n^2 $, $ n \\lg n $, or any other function of $ n $. Here's how to think of a running time that is $ \\Theta(f(n)) $ for some function $ f(n) $:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation</a>.
# Article is at (x689441a1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "When we say that a particular running time is $ \\Theta(n) $, we're saying that once $ n $ gets large enough, the running time is at least $ k_1 \\cdot n $ and at most $ k_2 \\cdot n $ for some constants $ k_1 $ and $ k_2 $. Here's how to think of $ \\Theta(n) $:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation</a>.
# Article is at (x689441a1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "When we use big-Θ notation, we're saying that we have an **asymptotically tight bound** on the running time. \"Asymptotically\" because it matters for only large values of $ n $. \"Tight bound\" because we've nailed the running time to within a constant factor above and below."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation</a>.
# Article is at (x689441a1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"```\n"
"var doLinearSearch = function(array) {\n"
"  for (var guess = 0; guess < array.length; guess++) {\n"
"    if (array[guess] === targetValue) { \n"
"        return guess;  // found it!\n"
"    }\n"
"  }\n"
"  return -1;  // didn't find it\n"
"};\n"
"```"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation</a>.
# Article is at (x689441a1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/theta_fn.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-big-theta-notation</a>.
# Article is at (x689441a1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/theta_n.png"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation</a>
# Title of tutorial article (xe10180d4) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Big-O notation"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation</a>.
# Article is at (xe10180d4) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Because big-O notation gives only an asymptotic upper bound, and not an asymptotically tight bound, we can make statements that at first glance seem incorrect, but are technically correct. For example, it is absolutely correct to say that binary search runs in $ O(n) $ time. That's because the running time grows no faster than a constant times $ n $. In fact, it grows slower. Think of it this way. Suppose you have 10 dollars in your pocket. You go up to your friend and say, \"I have an amount of money in my pocket, and I guarantee that it's no more than one million dollars.\" Your statement is absolutely true, though not terribly precise. One million dollars is an upper bound on 10 dollars, just as $ O(n) $ is an upper bound on the running time of binary search. Other, imprecise, upper bounds on binary search would be $ O(n^2) $, $ O(n^3) $, and $ O(2^n) $. But none of $ \\Theta(n) $, $ \\Theta(n^2) $, $ \\Theta(n^3) $, and $ \\Theta(2^n) $ would be correct to describe the running time of binary search in any case."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation</a>.
# Article is at (xe10180d4) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "If a running time is $ O(f(n)) $, then for large enough $ n $, the running time is at most $ k \\cdot f(n) $ for some constant $ k $. Here's how to think of a running time that is $ O(f(n)) $:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation</a>.
# Article is at (xe10180d4) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "If you go back to the definition of big-Θ notation, you'll notice that it looks a lot like big-O notation, except that big-Θ notation bounds the running time from both above and below, rather than just from above. If we say that a running time is $ \\Theta(f(n)) $ in a particular situation, then it's also $ O(f(n)) $. For example, we can say that because the worst-case running time of binary search is $ \\Theta(\\lg n) $, it's also $ O(\\lg n) $. The converse is not necessarily true: as we've seen, we can say that binary search always runs in $ O(\\lg n) $ time but _not_ that it always runs in $ \\Theta(\\lg n) $ time."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation</a>.
# Article is at (xe10180d4) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Now we have a way to characterize the running time of binary search in all cases. We can say that the running time of binary search is _always_ $ O(\\lg n) $. We can make a stronger statement about the worst-case running time: it's $ \\Theta(\\lg n) $. But for a blanket statement that covers all cases, the strongest statement we can make is that binary search runs in $ O(\\lg n) $ time."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation</a>.
# Article is at (xe10180d4) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We say that the running time is \"big-O of $ f(n) $\" or just \"O of $ f(n) $.\" We use big-O notation for **asymptotic upper bounds**, since it bounds the growth of the running time from above for large enough input sizes."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation</a>.
# Article is at (xe10180d4) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We use big-Θ notation to asymptotically bound the growth of a running time to within constant factors above and below. Sometimes we want to bound from only above. For example, although the worst-case running time of binary search is $ \\Theta(\\lg n) $, it would be incorrect to say that binary search runs in $ \\Theta(\\lg n) $ time in _all_ cases. What if we find the target value upon the first guess? Then it runs in $ \\Theta(1) $ time. The running time of binary search is never worse than $ \\Theta(\\lg n) $, but it's sometimes better. It would be convenient to have a form of asymptotic notation that means \"the running time grows at most this much, but it could grow more slowly.\" We use \"big-O\" notation for just such occasions."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation</a>.
# Article is at (xe10180d4) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/501211c02f4c6765f60f23842450e1151cfd9c89.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "Because big-O notation gives only an asymptotic upper bound, and not an asymptotically tight bound, we can make statements that at first blush seem incorrect, but are technically correct. For example, it is absolutely correct to say that binary search runs in $ O(n) $ time. That's because the running time grows no faster than a constant times $ n $. In fact, it grows slower. Think of it this way. Suppose you have 10 dollars in your pocket. You go up to your friend and say, \"I have an amount of money in my pocket, and I guarantee that it's no more than one million dollars.\" Your statement is absolutely true, though not terribly precise. One million dollars is an upper bound on 10 dollars, just as $ O(n) $ is an upper bound on the running time of binary search. Other, imprecise, upper bounds on binary search would be $ O(n^2) $, $ O(n^3) $, and $ O(2^n) $. But none of $ \\Theta(n) $, $ \\Theta(n^2) $, $ \\Theta(n^3) $, and $ \\Theta(2^n) $ would be correct to describe the running time of binary search in any case."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "If you go back to the definition of big-Θ notation, you'll notice that it looks a lot like big-O notation, except that big-Θ notation bounds the running from both above and below, rather than just from above. If we say that a running time is $ \\Theta(f(n)) $ in a particular situation, then it's also $ O(f(n)) $. For example, we can say that because the worst-case running time of binary search is $ \\Theta(\\lg n) $, it's also $ O(\\lg n) $. The converse is not necessarily true: as we've seen, we can say that binary search always runs in $ O(\\lg n) $ time but _not_ that it always runs in $ \\Theta(\\lg n) $ time."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/big-o-notation</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/O_fn.png"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation</a>
# Title of tutorial article (x7491c5e8) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Functions in asymptotic notation"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (x7491c5e8) on the pl stage.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "$ \\displaystyle \\log_a n = \\frac{\\log_b n}{\\log_b a} $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation</a>.
# Article is at (x7491c5e8) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"1.  $ \\Theta(1) $\n"
"2.  $ \\Theta(\\lg n) $\n"
"3.  $ \\Theta(n) $\n"
"4.  $ \\Theta(n \\lg n) $\n"
"5.  $ \\Theta(n^2) $\n"
"6.  $ \\Theta(n^2 \\lg n) $\n"
"7.  $ \\Theta(n^3) $\n"
"8.  $ \\Theta(2^n) $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation</a>.
# Article is at (x7491c5e8) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Here's a list of functions in asymptotic notation that we often encounter when analyzing algorithms, listed from slowest to fastest growing. This list is not exhaustive; there are many algorithms whose running times do not appear here:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation</a>.
# Article is at (x7491c5e8) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let's start with something easy. Suppose that an algorithm took a constant amount of time, regardless of the input size. For example, if you were given an array that is already sorted into increasing order and you had to find the minimum element, it would take constant time, since the minimum element must be at index 0\\. Since we like to use a function of $ n $ in asymptotic notation, you could say that this algorithm runs in $ \\Theta(n^0) $ time. Why? Because $ n^0 = 1 $, and the algorithm's running time is within some constant factor of 1\\. In practice, we don't write $ \\Theta(n^0) $, however; we write $ \\Theta(1) $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation</a>.
# Article is at (x7491c5e8) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Logarithms grow more slowly than polynomials. That is, $ \\Theta(\\lg n) $ grows more slowly than $ \\Theta(n^a) $ for _any_ positive constant $ a $. But since the value of $ \\lg n $ increases as $ n $ increases, $ \\Theta(\\lg n) $ grows faster than $ \\Theta(1) $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation</a>.
# Article is at (x7491c5e8) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Note that an exponential function $ a^n $, where $ a > 1 $, grows faster than any polynomial function $ n^b $, where $ b $ is any constant."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation</a>.
# Article is at (x7491c5e8) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Now suppose an algorithm took $ \\Theta(\\log_{10} n) $ time. You could also say that it took $ \\Theta(\\lg n) $ time (that is, $ \\Theta(\\log_2 n) $ time). Whenever the base of the logarithm is a constant, it doesn't matter what base we use in asymptotic notation. Why not? Because there's a mathematical formula that says"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation</a>.
# Article is at (x7491c5e8) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "There is an order to the functions that we often see when we analyze algorithms using asymptotic notation. If $ a $ and $ b $ are constants and $ a < b $, then a running time of $ \\Theta(n^a) $ grows more slowly than a running time of $ \\Theta(n^b) $. For example, a running time of $ \\Theta(n) $, which is $ \\Theta(n^1) $, grows more slowly than a running time of $ \\Theta(n^2) $. The exponents don't have to be integers, either. For example, a running time of $ \\Theta(n^2) $ grows more slowly than a running time of $ \\Theta(n^2 \\sqrt{n}) $, which is $ \\Theta(n^{2.5}) $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation</a>.
# Article is at (x7491c5e8) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Therefore, we can say that the worst-case running time of binary search is $ \\Theta(\\log_a n) $ for any positive constant $ a $. Why? The number of guesses is at most $ \\lg n + 1 $, generating and testing each guess takes constant time, and setting up and returning take constant time. As a matter of practice, we write that binary search takes $ \\Theta(\\lg n) $ time because computer scientists like to think in powers of 2 (and there are fewer characters to write than if we wrote $ \\Theta(\\log_2 n) $.)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation</a>.
# Article is at (x7491c5e8) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "When we use asymptotic notation to express the rate of growth of an algorithm's running time in terms of the input size $ n $, it's good to bear a few things in mind."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation">http://translate.khanacademy.org/computing/computer-science/algorithms/asymptotic-notation/a/functions-in-asymptotic-notation</a>.
# Article is at (x7491c5e8) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "for all positive numbers $ a $, $ b $, and $ n $. Therefore, if $ a $ and $ b $ are constants, then $ \\log_a n $ and $ \\log_b n $ differ only by a factor of $ \\log_b a $, and that's a constant factor which we can ignore in asymptotic notation."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search</a>.
# Article is at (xdaa637b0) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Pseudocode for binary search"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search</a>.
# Article is at (xdaa637b0) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"1.  Let $min = 1 $ and $ max = n$.\n"
"2.  Guess the average of $max$ and $min$, rounded down so that it is an integer.\n"
"3.  If you guessed the number, stop. You found it!\n"
"4.  If the guess was too low, set $min$ to be one larger than the guess.\n"
"5.  If the guess was too high, set $max$ to be one smaller than the guess.\n"
"6.  Go back to step two."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search</a>.
# Article is at (xdaa637b0) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Binary search is an efficient algorithm for finding an item from an ordered list of items. It works by repeatedly dividing in half the portion of the list that could contain the item, until you've narrowed down the possible locations to just one. We used binary search in the [guessing game](/computing/computer-science/algorithms/intro-to-algorithms/a/a-guessing-game) in the introductory tutorial."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Binary search number line 26 to 52"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search</a>.
# Article is at (xdaa637b0) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "For the guessing game, we can keep track of the set of reasonable guesses using a few variables. Let the variable $ min $ be the current minimum reasonable guess for this round, and let the variable $ max $ be the current maximum reasonable guess. The _input_ to the problem is the number $ n $, the highest possible number that your opponent is thinking of. We assume that the lowest possible number is one, but it would be easy to modify the algorithm to take the lowest possible number as a second input."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search</a>.
# Article is at (xdaa637b0) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Here's a pseudocode description of binary search:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search</a>.
# Article is at (xdaa637b0) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "In each turn, you choose a guess that divides the set of reasonable guesses into two ranges of roughly the same size. If your guess is not correct, then I tell you whether it's too high or too low, and you can eliminate about half of the reasonable guesses. For example, if the current range of reasonable guesses is 26 to 80, you would guess the halfway point, $ (26 + 80) / 2 $, or 53\\. If I then tell you that 53 is too high, you can eliminate all numbers from 53 to 80, leaving 26 to 52 as the new range of reasonable guesses, halving the size of the range."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search</a>.
# Article is at (xdaa637b0) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "In order to implement an algorithm in a programming language, you will need to understand an algorithm down to the details. What are the inputs to the problem? The outputs? What variables should be created, and what initial values should they have? What intermediate steps should be taken to compute other values and to ultimately compute the output? Do these steps repeat instructions that can be written in simplified form using a loop?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search</a>.
# Article is at (xdaa637b0) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let's look at how to describe binary search carefully. The main idea of binary search is to keep track of the current range of reasonable guesses. Let's say that I'm thinking of a number between one and 100, just like [the guessing game](/computing/computer-science/algorithms/intro-to-algorithms/a/a-guessing-game). If you've already guessed 25 and I told you my number was higher, and you've already guessed 81 and I told you my number was lower, then the numbers in the range from 26 to 80 are the only reasonable guesses. Here, the red section of the number line contains the reasonable guesses, and the black section shows the guesses that we've ruled out:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search</a>.
# Article is at (xdaa637b0) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "One of the most common ways to use binary search is to find an item in an array. For example, the Tycho-2 star catalog contains information about the brightest 2,539,913 stars in our galaxy. Suppose that you want to search the catalog for a particular star, based on the star's name. If the program examined every star in the star catalog in order starting with the first, an algorithm called **linear search**, the computer might have to examine all 2,539,913 stars to find the star you were looking for, in the worst case. If the catalog were sorted alphabetically by star names, binary search would not have to examine more than 22 stars, even in the worst case."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search</a>.
# Article is at (xdaa637b0) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The next few articles discuss how to describe the algorithm carefully, how to implement the algorithm in JavaScript, and how to analyze efficiency."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search</a>.
# Article is at (xdaa637b0) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We could make this pseudocode even more precise by clearly describing the inputs and the outputs for the algorithm and by clarifying what we mean by instructions like \"guess a number\" and \"stop.\" But this will do for now."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search</a>.
# Article is at (xdaa637b0) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "When describing an algorithm to a fellow human being, an incomplete description is often good enough. Some details may be left out of a recipe for a cake; the recipe assumes that you know how to open the refrigerator to get the eggs out and that you know how to crack the eggs. People might intuitively know how to fill in the missing details, but computer programs do not. That's why we need to describe computer algorithms completely."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search</a>.
# Article is at (xdaa637b0) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/91981c0666c061815dd0e9b473ad0570a1803a45.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search</a>.
# Article is at (xdaa637b0) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/a376ce2d2746fc126293571121a818f395a97354.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"1.  Let $ min = 1 $and $ max = n $.\n"
"2.  Guess the average of $ max $ and `$ min $`, rounded down so that it is an integer.\n"
"3.  If you guessed the number, stop. You found it!\n"
"4.  If the guess was too low, set `$ min $` to be one larger than the guess.\n"
"5.  If the guess was too high, set `$ max $` to be one smaller than the guess.\n"
"6.  Go back to step two."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "Binary search number line 26 to 80"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/binary_search_26_52.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/binary_search_26_80.png"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>
# Title of tutorial article (xe207b3f1) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Implementing binary search of an array"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Implementing pseudocode"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Pseudocode"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"1.  Let `min = 0` and `max = n-1`.\n"
"2.  Compute `guess` as the average of `max` and `min`, rounded down (so that it is an integer).\n"
"3.  If `array[guess]` equals `target`, then stop. You found it! Return `guess`.\n"
"4.  If the guess was too low, that is, `array[guess] < target`, then set `min = guess + 1`.\n"
"5.  Otherwise, the guess was too high. Set `max = guess - 1`.\n"
"6.  Go back to step 2."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"1.  Let `min = 0` and `max = n-1`.\n"
"2.  If `max < min`, then stop: `target` is not present in `array`. Return `-1`.\n"
"3.  Compute `guess` as the average of `max` and `min`, rounded down (so that it is an integer).\n"
"4.  If `array[guess]` equals `target`, then stop. You found it! Return `guess`.\n"
"5.  If the guess was too low, that is, `array[guess] < target`, then set `min = guess + 1`.\n"
"6.  Otherwise, the guess was too high. Set `max = guess - 1`.\n"
"7.  Go back to step 2."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Did you see how many steps that took? A binary search might be more efficient. Because the array `primes` contains 25 numbers, the indices into the array range from 0 to 24\\. Using our pseudocode from before, we start by letting `min` = 0 and `max` = 24\\. The first guess in the binary search would therefore be at index 12 (which is (0 + 24) / 2). Is `primes[12]` equal to 67? No, `primes[12]` is 41."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Here's the pseudocode for binary search, modified for searching in an array. The inputs are the array, which we call `array`; the number `n` of elements in `array`; and `target`, the number being searched for. The output is the index in `array` of `target`:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "How would we turn that pseudocode into a JavaScript program? We should create a function, because we're writing code that accepts an input and returns an output, and we want that code to be reusable for different inputs. The parameters to the function—let's call it `binarySearch`— will be the array and target value, and the return value of the function will be the index of the location where the target value was found."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Is the index we are looking for higher or lower than 12? Since the values in the array are in increasing order, and 41 < 67, the value 67 should be to the right of index 12\\. In other words, the index we are trying to guess should be greater than 12\\. We update the value of `min` to 12 + 1, or 13, and we leave `max` unchanged at 24."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let's see how to think about binary search on a sorted array. Yes, JavaScript already provides methods for determining whether a given element is in an array and, if it is, its location (as do many programming languages), but we want to implement it ourselves, to understand how you can implement such methods. Here's a JavaScript array of the first 25 prime numbers, in order:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Looking at the example below, we can read the array of prime numbers from left to right, one at a time, until we find the number 67 (in the pink box) and see that it is at array index 18\\. Looking through the numbers in order like this is a _linear search_."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Now let's go into the body of the function, and decide how to implement that. Step 6 says to go back to step 2\\. That sounds like a loop. Should it be a for-loop or a while-loop? If you really wanted to use a for-loop, you could, but the indices guessed by binary search don't go in the sequential order that a for-loop makes convenient. First we might guess the index 12, and then 18, based on some computations. So a while-loop is the better choice."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Now that we've thought through the pseudocode together, you're going to try implementing binary search yourself. It's fine to look back at the pseudocode - in fact, it's a good thing, because then you'll have a better grasp of what it means to convert pseudocode into a program."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Once we know that the prime number 67 is at index 18, we can identify that it is a prime. We can also quickly identify that there are 18 elements which come before 67 in the array, meaning that there are 18 prime numbers smaller than 67."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Suppose we want to know whether the number 67 is prime. If 67 is in the array, then it's prime."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The binary search algorithm stops at this point, since it has found the answer. It took only two guesses, instead of the 19 guesses that linear search would have taken. You can step through that again in the visualization below:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The position of an element in an array is known as its index. Array indices start at 0 and count upwards. If an element is at index 0 then it is the first element in the array. If an element is at index 3, then it has 3 elements which come before it in the array."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The target number isn't in the array if there are no possible guesses left. In our example, suppose that we're searching for the target number 10 in the `primes` array. If it were there, 10 would be between the values 7 and 11, which are at indices 3 and 4. If you trace out the index values for `min` and `max` as the `binarySearch` function executes, you would find that they eventually get to the point where `min` equals 3 and `max` equals 4\\. The guess is then index 3 (since (3 + 4) / 2 equals 3.5, and we round down), and `primes[3]` is less than 10, so that `min` becomes 4\\. With both `min` and `max` equaling 4, the guess must be index 4, and `primes[4]` is greater than 10\\. Now `max` becomes 3\\. What does it mean for `min` to equal 4 and `max` to equal 3? It means that the only possible guesses are at least 4 and at most 3\\. There are no such numbers! At this point, we can conclude that the target number, 10, is not in the `primes` array, and the `binarySearch` function would return `-1`. In general, once `max` becomes strictly less than `min`, we know that the target number is not in the sorted array. Here is modified pseudocode for binary search that handles the case in which the target number is not present:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "There's also an important step missing in that pseudocode that didn't matter for the guessing game, but does matter for the binary search of an array. What should happen if the number you are looking for is _not_ in the array? Let's start by figuring out what index the `binarySearch` function should return in this case. It should be a number that cannot be a legal index into the array. We'll use `-1`, since that cannot be a legal index into any array. (Actually, any negative number would do.)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We just described the binary search algorithm in English, stepping through one example. That's one way to do it, but a human language explanation can vary in quality. It can be too short or too long, and most importantly, it's not always as precise as it should be. We could jump to showing you binary search in a programming language like JavaScript or Python, but programs contain lots of details - due to requirements imposed by the programming language, or because programs have to handle errors caused by bad data, user error, or system faults - and those can make it hard to understand the underlying algorithm from studying just the code. That's why we prefer to describe algorithms in something called pseudocode, which mixes English with features that you see in programming languages."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We might also want to know how many primes are smaller than 67\\. If we find the position of the number 67 in the array, we can use that to figure out how many smaller primes exist."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We'll alternate between English, pseudocode, and JavaScript in these tutorials, depending on the situation. As a programmer, you should learn to understand pseudocode and be able to turn it into your language of choice - so even though we're using JavaScript here, it should be straightforward for you to implement pseudocode using other languages."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "What's the next index to guess? The average of 13 and 24 is 18.5, which we round down to 18, since an index into an array must be an integer. We find that `primes[18]` is 67."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"```\n"
"var primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n"
"```"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/primes1.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/primes2.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/implementing-binary-search-of-an-array</a>.
# Article is at (xe207b3f1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/primes3.png"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search</a>
# Title of tutorial article (x0788117a) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Running time of binary search"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search</a>.
# Article is at (x0788117a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "By now, you're probably seeing the pattern. Every time we double the size of the array, we need at most one more guess. Suppose we need at most $ m $ guesses for an array of length $ n $. Then, for an array of length $ 2n $, the first guess cuts the reasonable portion of the array down to size $ n $, and at most $ m $ guesses finish up, giving us a total of at most $ m+1 $ guesses."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search</a>.
# Article is at (x0788117a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Here's a table showing the base-2 logarithms of various values of $ n $:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search</a>.
# Article is at (x0788117a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "If we start with an array of length 8, then incorrect guesses reduce the size of the reasonable portion to 4, then 2, and then 1\\. Once the reasonable portion contains just one element, no further guesses occur; the guess for the 1-element portion is either correct or incorrect, and we're done. So with an array of length 8, binary search needs at most four guesses."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search</a>.
# Article is at (x0788117a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "In the next tutorial, we'll see how computer scientists characterize the running times of linear search and binary search, using a notation that distills the most important part of the running time and discards the less important parts."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search</a>.
# Article is at (x0788117a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let's look at the general case of an array of length $ n $. We can express the number of guesses, in the worst case, as \"the number of times we can repeatedly halve, starting at $ n $, until we get the value 1, plus one.\" But that's inconvenient to write out. Fortunately, there's a mathematical function that means the same thing as the number of times we repeatedly halve, starting at $ n $, until we get the value 1: the **base-2 logarithm of $ n $**. We write it as $ \\lg n $. (You can learn more about logarithms [here](/math/algebra2/exponential-and-logarithmic-functions/introduction-to-logarithms/v/logarithms).)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search</a>.
# Article is at (x0788117a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The key idea is that when binary search makes an incorrect guess, the portion of the array that contains reasonable guesses is reduced by at least half. If the reasonable portion had 32 elements, then an incorrect guess cuts it down to have at most 16\\. Binary search halves the size of the reasonable portion upon every incorrect guess."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search</a>.
# Article is at (x0788117a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The logarithm function grows very slowly. Logarithms are the inverse of exponentials, which grow very rapidly, so that if $ \\lg n = x $, then $ n = 2^x $. For example, because $ \\lg 128 = 7 $, we know that $ 2^7 = 128 $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search</a>.
# Article is at (x0788117a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We can view this same table as a chart:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search</a>.
# Article is at (x0788117a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We know that linear search on an array of $ n $ elements might have to make as many as $ n $ guesses. You probably already have an intuitive idea that binary search makes fewer guesses than linear search. You even might have perceived that the difference between the worst-case number of guesses for linear search and binary search becomes more striking as the array length increases. Let's see how to analyze the maximum number of guesses that binary search makes."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search</a>.
# Article is at (x0788117a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "What do you think would happen with an array of 16 elements? If you said that the first guess would eliminate at least 8 elements, so that at most 8 remain, you're getting the picture. So with 16 elements, we need at most five guesses."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search</a>.
# Article is at (x0788117a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "When $ n $ is not a power of 2, we can just go up to the next higher power of 2\\. For an array whose length is 1000, the next higher power of 2 is 1024, which equals $ 2^{10} $. Therefore, for a 1000-element array, binary search would require at most 11 (10 + 1) guesses. For the Tycho-2 star catalog with 2,539,913 stars, the next higher power of 2 is $ 2^{22} $ (which is 4,194,304), and we would need at most 23 guesses. _Much_ better than linear search! Compare them below:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search</a>.
# Article is at (x0788117a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Zooming in on smaller values of n:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search</a>.
# Article is at (x0788117a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/1db4d1c90d8f4de4b855d1d55e66a29bef0602e8.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search</a>.
# Article is at (x0788117a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/57f3f0f4982804a8f2d9d2a32297d29ccc43e272.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search</a>.
# Article is at (x0788117a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/ee464aa9cdf3d6d99c4231174541150253dff5d3.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search</a>.
# Article is at (x0788117a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"| $ n $ | $ \\lg n $ |\n"
"| --- | --- |\n"
"| 1 | 0 |\n"
"| 2 | 1 |\n"
"| 4 | 2 |\n"
"| 8 | 3 |\n"
"| 16 | 4 |\n"
"| 32 | 5 |\n"
"| 64 | 6 |\n"
"| 128 | 7 |\n"
"| 256 | 8 |\n"
"| 512 | 9 |\n"
"| 1024 | 10 |\n"
"| 1,048,576 | 20 |\n"
"| 2,097,152 | 21 |"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/lg_n_vs_n_large.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/lg_n_vs_n_small.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/runtime_linear_vs_binary.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "lg n vs. n"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search">http://translate.khanacademy.org/computing/computer-science/algorithms/binary-search/a/running-time-of-binary-search</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"| $ n $ | $ \\lg n $ |\n"
"| 1 | 0 |\n"
"| 2 | 1 |\n"
"| 4 | 2 |\n"
"| 8 | 3 |\n"
"| 16 | 4 |\n"
"| 32 | 5 |\n"
"| 64 | 6 |\n"
"| 128 | 7 |\n"
"| 256 | 8 |\n"
"| 512 | 9 |\n"
"| 1024 | 10 |\n"
"| 1,048,576 | 20 |\n"
"| 2,097,152 | 21 |"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/analysis-of-breadth-first-search">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/analysis-of-breadth-first-search</a>
# Title of tutorial article (xf482935a) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Analysis of breadth-first search"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/analysis-of-breadth-first-search">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/analysis-of-breadth-first-search</a>.
# Article is at (xf482935a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "(Note, by the way, that a graph is **connected** if there is a path from every vertex to all other vertices. The minimum number of edges that a graph can have and still be connected is $ |V|-1 $. A graph in which $ |E| = |V|-1 $ is called a **free tree**.)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/analysis-of-breadth-first-search">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/analysis-of-breadth-first-search</a>.
# Article is at (xf482935a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "How is it that breadth-first search runs in $ O(V+E) $ time? It takes $ O(V) $ time to initialize the distance and predecessor for each vertex ($ \\Theta(V) $ time, actually). Each vertex is visited at most one time, because only the first time that it is reached is its distance `null`, and so each vertex is enqueued at most one time. Since we examine the edges incident on a vertex only when we visit from it, each edge is examined at most twice, once for each of the vertices it's incident on. Thus, breadth-first search spends $ O(V+E) $ time visiting vertices."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/analysis-of-breadth-first-search">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/analysis-of-breadth-first-search</a>.
# Article is at (xf482935a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "How long does breadth-first search take for a graph with vertex set $ V $ and edge set $ E $? The answer is $ O(V+E) $ time."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/analysis-of-breadth-first-search">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/analysis-of-breadth-first-search</a>.
# Article is at (xf482935a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let's see what $ O(V+E) $ time means. Assume for the moment that $ |E| \\geq |V| $, which is the case for most graphs, especially those for which we run breadth-first search. Then $ |V| + |E| \\leq |E| + |E| = 2 \\cdot |E| $. Because we ignore constant factors in asymptotic notation, we see that when $ |E| \\geq |V| $, $ O(V+E) $ really means $ O(E) $. If, however, we have $ |E| < |V| $, then $ |V| + |E| \\leq |V| + |V| = 2 \\cdot |V| $, and so $ O(V+E) $ really means $ O(V) $. We can put both cases together by saying that $ O(V+E) $ really means $ O(\\max(V,E)) $. In general, if we have parameters $ x $ and $ y $, then $ O(x+y) $ really means $ O(\\max(x,y)) $."
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses</a>
# Title of tutorial article (xf62c68b9) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Breadth-first search and its uses"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses</a>.
# Article is at (xf62c68b9) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "As you might have guessed, the Oracle of Bacon website maintains an undirected graph in which each vertex corresponds to an actor or actress, and if two people appeared in the same film, then there is an edge incident on their vertices. A breadth-first search from the vertex for Kevin Bacon finds the shortest chain to all other actors and actresses."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# Article is at (xf62c68b9) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Graph corresponding to the maze"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses</a>.
# Article is at (xf62c68b9) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Graph for Kate Bell's bacon number"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses</a>.
# Article is at (xf62c68b9) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Here's another example of breadth-first search: the \"six degrees of Kevin Bacon\" game. Here, players try to connect movie actors and actresses to Kevin Bacon according to a chain of who appeared with whom in a movie. The shorter the chain, the better, and it's astounding how many actors and actresses can get to Kevin Bacon in a chain of six or fewer. As an example, take Kate Bell, an Australian actress. She was in _MacBeth_ with Nash Edgerton in 2006; Edgerton was in _The Matrix Reloaded_ with Laurence Fishburne in 2003; and Fishburne was in _Mystic River_ with Kevin Bacon in 2003\\. Therefore, Kate Bell's \"Kevin Bacon number\" is 3\\. In fact, there are several ways to find that Kate Bell's Kevin Bacon number is 3\\. You can look up any actor's or actress's Kevin Bacon number at [the Oracle of Bacon website](https://oracleofbacon.org)."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses</a>.
# Article is at (xf62c68b9) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Here's the picture that we saw in the introductory tutorial:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses</a>.
# Article is at (xf62c68b9) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "In the [introductory tutorial](/intro-to-algorithms/a/route-finding/), you played with having a character move through a maze to reach a goal. You started by saying that the goal is zero steps away from itself. Then you found all the squares that were one step away from the goal. Then all squares two steps away from the goal. Then three steps, and so on, until you reached the square where the character started. If you kept track of which square at distance $ k $ you came from to get to a square at distance $ k+1 $, you could backtrack to find a route from the character to the goal."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses</a>.
# Article is at (xf62c68b9) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Now you can recognize it as an undirected graph. Each vertex corresponds to a square that is not part of a wall, and each edge is incident on adjacent squares."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses</a>.
# Article is at (xf62c68b9) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The route found by the above procedure has an important property: no other route from the character to the goal goes through fewer squares. That's because we used an algorithm known as **breadth-first search** to find it. Breadth-first search, also known as **BFS**, finds shortest paths from a given **source vertex** to all other vertices, in terms of the number of edges in the paths."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses</a>.
# Article is at (xf62c68b9) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/bacon_number.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/breadth-first-search-and-its-uses</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# Article is at (xf62c68b9) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/maze-graph.jpg"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm</a>
# Title of tutorial article (x5eac9d0d) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "The breadth-first search algorithm"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm</a>.
# Article is at (x5eac9d0d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   A **distance**, giving the minimum number of edges in any path from the source vertex to vertex $ v $.\n"
"*   The **predecessor** vertex of $ v $ along some shortest path from the source vertex. The source vertex's predecessor is some special value, such as `null`, indicating that it has no predecessor."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm</a>.
# Article is at (x5eac9d0d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   Initially, the queue contains just vertex 3 with distance 0.\n"
"*   Dequeue vertex 3, and enqueue vertices 2 and 6, both with distance 1\\. The queue now contains vertex 2 with distance 1 and vertex 6 with distance 1.\n"
"*   Dequeue vertex 2, and enqueue vertices 4 and 5, both with distance 2\\. The queue now contains vertex 6 with distance 1, vertex 4 with distance 2, and vertex 5 with distance 2.\n"
"*   Dequeue vertex 6, and don't enqueue any vertices. The queue now contains vertex 4 with distance 2 and vertex 5 with distance 2.\n"
"*   Dequeue vertex 4, and enqueue vertex 1 with with distance 3. The queue now contains vertex 5 with distance 2 and vertex 1 with distance 3.\n"
"*   Dequeue vertex 5, and don't enqueue any vertices. The queue now contains just vertex 1 with distance 3.\n"
"*   Dequeue vertex 1, and enqueue vertex 0 with distance 4\\. The queue now contains just vertex 0 with distance 4.\n"
"*   Dequeue vertex 0, and don't enqueue any vertices. The queue is now empty. Because the queue is empty, breadth-first search terminates."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm</a>.
# Article is at (x5eac9d0d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   Start by visiting vertex 3, the source, setting its distance to 0.\n"
"*   Then visit vertices 2 and 6, setting their distance to 1 and their predecessor to vertex 3.\n"
"*   Start visiting from vertices at distance 1 from the source, beginning with vertex 2\\. From vertex 2, visit vertices 4 and 5, setting their distance to 2 and their predecessor to vertex 2\\. Don't visit vertex 3, because it has already been visited.\n"
"*   From vertex 6, don't visit vertex 5, because it was just visited from vertex 2, and don't visit vertex 3, either.\n"
"*   Now start visiting from vertices at distance 2 from the source. Start by visiting from vertex 4\\. Vertex 2 has already been visited. Visit vertex 1, setting its distance to 3 and its predecessor to vertex 4.\n"
"*   From vertex 5, don't visit any of its neighbors, because they have all been visited.\n"
"*   Now start visiting from vertices at distance 3 from the source. The only such vertex is vertex 1\\. Its neighbors, vertices 4 and 5, have already been visited. But vertex 0 has not. Visit vertex 0, setting its distance to 4 and its predecessor to vertex 1.\n"
"*   Now start visiting from vertices at distance 4 from the source. That's just vertex 0, and its neighbor, vertex 1, has already been visited. We're done!"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm</a>.
# Article is at (x5eac9d0d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   `enqueue(obj)` inserts an object into the queue.\n"
"*   `dequeue()` removes from the queue the object that has been in it the longest, returning this object.\n"
"*   `isEmpty()` returns `true` if the queue currently contains no objects, and `false` if the queue contains at least one object."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm</a>.
# Article is at (x5eac9d0d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "A couple of questions come up. One is how to determine whether a vertex has been visited already. That's easy: a vertex's distance is `null` until it has been visited, at which time it gets a numeric value for its distance. Therefore, when we examine the neighbors of a vertex, we visit only the neighbors whose distance is currently `null`."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm</a>.
# Article is at (x5eac9d0d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "BFS result"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm</a>.
# Article is at (x5eac9d0d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Breadth-first search assigns two values to each vertex $ v $:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm</a>.
# Article is at (x5eac9d0d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "For example, here's an undirected graph with eight vertices, numbered 0 to 7, with vertex numbers appearing above or below the vertices. Inside each vertex are two numbers: its distance from the source, which is vertex 3, followed by its predecessor on a shortest path from vertex 3\\. A dash indicates `null`:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm</a>.
# Article is at (x5eac9d0d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Given the example above, here are the steps plus a visualization to play through each step:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm</a>.
# Article is at (x5eac9d0d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "If there is no path from the source vertex to vertex $ v $, then $ v $'s distance is infinite and its predecessor has the same special value as the source's predecessor."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm</a>.
# Article is at (x5eac9d0d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "In BFS, we initially set the distance and predecessor of each vertex to the special value (`null`). We start the search at the source and assign it a distance of 0\\. Then we visit all the neighbors of the source and give each neighbor a distance of 1 and set its predecessor to be the source. Then we visit all the neighbors of the vertices whose distance is 1 _and_ that have not been visited before, and we give each of these vertices a distance of 2 and set its predecessor to be vertex from which we visited it. We keep going until all vertices reachable from the source vertex have been visited, always visiting all vertices at distance $ k $ from the source before visiting any vertex at distance $ k+1 $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm</a>.
# Article is at (x5eac9d0d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Notice that at each moment, the queue either contains vertices all with the same distance, or it contains vertices with distance $ k $ followed by vertices with distance $ k+1 $. That's how we ensure that we visit all vertices at distance $ k $ before visiting any vertices at distance $ k+1 $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm</a>.
# Article is at (x5eac9d0d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Notice that because there is no path from vertex 3 to vertex 7, the search never visits vertex 7\\. Its distance and predecessor remain unchanged from their initial values of `null`."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm</a>.
# Article is at (x5eac9d0d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The other question is how to keep track of which vertices have already been visited but have not yet been visited from. We use a **queue**, which is a data structure that allows us to insert and remove items, where the item removed is always the one that has been in the queue the longest. We call this behavior **first in, first out**. A queue has three operations:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm</a>.
# Article is at (x5eac9d0d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Whenever we first visit any vertex, we enqueue it. At the start, we enqueue the source vertex because that's always the first vertex we visit. To decide which vertex to visit next, we choose the vertex that has been in the queue the longest and remove it from the queue—in other words, we use the vertex that's returned from `dequeue()`. Given our example graph, here's what the queue looks like for each step, plus the previous visualization shown with the queue state:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm">http://translate.khanacademy.org/computing/computer-science/algorithms/breadth-first-search/a/the-breadth-first-search-algorithm</a>.
# Article is at (x5eac9d0d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/bfs_result.png"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs</a>
# Title of tutorial article (xcb8fd18d) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Describing graphs"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs</a>.
# Article is at (xcb8fd18d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Graph sizes"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs</a>.
# Article is at (xcb8fd18d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "A line between the names of two people means that they know each other. If there's no line between two names, then the people do not know each other. The relationship \"know each other\" goes both ways; for example, because Audrey knows Gayle, that means Gayle knows Audrey."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs</a>.
# Article is at (xcb8fd18d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "As you might imagine, graphs—both directed and undirected—have many applications for modeling relationships in the real world."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs</a>.
# Article is at (xcb8fd18d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Audrey and Frank do not know each other. Suppose that Frank wanted to be introduced to Audrey. How could he get an introduction? Well, he knows Emily, who knows Bill, who knows Audrey. We say that there is a **path** of three edges between Frank and Audrey. In fact, that is the most direct way for Frank to meet Audrey; there is no path between them with fewer than three edges. We call a path between two vertices with the fewest edges a **shortest path**. We've highlighted that particular shortest path below:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs</a>.
# Article is at (xcb8fd18d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Goalie gear"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs</a>.
# Article is at (xcb8fd18d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Here's one way to represent a social network:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs</a>.
# Article is at (xcb8fd18d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Now edges, shown with arrows, are **directed**, and we have a **directed graph**. Here, the directions show which pieces of equipment must be put on before other pieces. For example, the edge from chest pad to sweater indicates that the chest pad must be put on before the sweater. The numbers next to the vertices show one of the many possible orders in which to put on the equipment, so that undershorts go on first, then socks, then compression shorts, and so on, with the blocker going on last. You might have noticed that this particular directed graph has no cycles; we call such a graph a **directed acyclic graph**, or **dag**. Of course, we can have **weighted directed graphs**, such as road maps with one-way streets and road distances."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs</a>.
# Article is at (xcb8fd18d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Road map"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (xcb8fd18d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Social network graph"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs</a>.
# Article is at (xcb8fd18d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Social network with cycle highlighted"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs</a>.
# Article is at (xcb8fd18d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Social network with shortest path highlighted"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs</a>.
# Article is at (xcb8fd18d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Sometimes we put numeric values on the edges. For example, in the social network, we might use values to indicate how well two people know each other. To bring in another example, let's represent a road map as a graph. Assuming that there are no one-way streets, a road map is also an undirected graph, with cities as vertices, roads as edges, and the values on edges indicating the distance of each road. For example, here's a road map, not to scale, of some of the interstate highways in the northeastern U.S., with distances next to edges:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs</a>.
# Article is at (xcb8fd18d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The general term we use for a number that we put on an edge is its **weight**, and a graph whose edges have weights is a **weighted graph**. In the case of a road map, if you want to find the shortest route between two locations, you're looking for a path between two vertices with the minimum sum of edge weights over all paths between the two vertices. As with unweighted graphs, we call such a path a **shortest path**. For example, the shortest path in this graph from New York to Concord goes from New York to New Haven to Hartford to Sturbridge to Weston to Reading to Concord, totaling 289 miles."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs</a>.
# Article is at (xcb8fd18d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The relationship between vertices does not always go both ways. In a road map, for example, there could be one-way streets. Or here's a graph showing the order in which a goalie in ice hockey could get dressed:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs</a>.
# Article is at (xcb8fd18d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "This social network is a **graph**. The names are the **vertices** of the graph. (If you're talking about just one of the vertices, it's a **vertex**.) Each line is an **edge**, connecting two vertices. We denote an edge connecting vertices $ u $ and $ v $ by the pair $ (u,v) $. Because the \"know each other\" relationship goes both ways, this graph is **undirected**. An undirected edge $ (u,v) $ is the same as $ (v,u) $. Later, we'll see **directed graphs**, in which relationships between vertices don't necessarily go both ways. In an undirected graph, an edge between two vertices, such as the edge between Audrey and Gayle, is **incident** on the two vertices, and we say that the vertices connected by an edge are **adjacent** or **neighbors**. The number of edges incident on a vertex is the **degree** of the vertex."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs</a>.
# Article is at (xcb8fd18d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We use different terminology with directed edges. We say that a directed edge **leaves** one vertex and **enters** another. For example, one directed edge leaves the vertex for chest pad and enters the vertex for sweater. If a directed edge leaves vertex $ u $ and enters vertex $ v $, we denote it by $ (u,v) $, and the order of the vertices in the pair matters. The number of edges leaving a vertex is its **out-degree**, and the number of edges entering is the **in-degree**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs</a>.
# Article is at (xcb8fd18d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "When a path goes from a particular vertex back to itself, that's a **cycle**. The social network contains many cycles; one of them goes from Audrey to Bill to Emily to Jeff to Harry to Ilana and back to Audrey. There's a shorter cycle containing Audrey, shown below: Audrey to Bill to Gayle and back to Audrey. What other cycles can you find?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs</a>.
# Article is at (xcb8fd18d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "When we work with graphs, it's helpful to be able to talk about the set of vertices and the set of edges. We usually denote the vertex set by $ V $ and the edge set by $ E $. When we represent a graph or run an algorithm on a graph, we often want to use the sizes of the vertex and edge sets in asymptotic notation. For example, suppose that we want to talk about a running time that is linear in the number of vertices. Strictly speaking, we should say that it's $ \\Theta(|V|) $, using the notation $ |\\cdot| $ to denote the size of a set. But using this set-size notation in asymptotic notation is cumbersome, and so we adopt the convention that in asymptotic notation, and _only_ in asymptotic notation, we drop the set-size notation with the understanding that we're talking about set sizes. So, instead of writing $ \\Theta(|V|) $, we write just $ \\Theta(V) $. Similarly, instead of $ \\Theta(\\lg |E|) $, we write $ \\Theta(\\lg E) $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs</a>.
# Article is at (xcb8fd18d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/social_network_cycle.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs</a>.
# Article is at (xcb8fd18d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/social_network_shortestpath.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/describing-graphs</a>.
# Article is at (xcb8fd18d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/undirected_road_map.png"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>
# Title of tutorial article (x2950734a) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Representing graphs"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Adjacency lists"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Adjacency matrices"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Edge lists"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Edge lists are simple, but if we want to find whether the graph contains a particular edge, we have to search through the edge list. If the edges appear in the edge list in no particular order, that's a linear search through $ |E| $ edges. Question to think about: How can you organize an edge list to make searching for a particular edge take $ O(\\lg E) $ time? The answer is a little tricky."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "For a graph with $ |V| $ vertices, an **adjacency matrix** is a $ |V| \\times |V| $ matrix of 0s and 1s, where the entry in row $ i $ and column $ j $ is 1 if and only if the edge $ (i,j) $ is in the graph. If you want to indicate an edge weight, put it in the row $ i $, column $ j $ entry, and reserve a special value (perhaps `null`) to indicate an absent edge. Here's the adjacency matrix for the social network graph:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "For an undirected graph, the adjacency matrix is **symmetric**: the row $ i $, column $ j $ entry is 1 if and only if the row $ j $, column $ i $ entry is 1\\. For a directed graph, the adjacency matrix need not be symmetric."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "How much space do adjacency lists take? We have $ |V| $ lists, and although each list could have as many as $ |V|-1 $ vertices, in total the adjacency lists for an undirected graph contain $ 2|E| $ elements. Why $ 2|E| $? Each edge $ (i,j) $ appears exactly twice in the adjacency lists, once in $ i $'s list and once in $ j $'s list, and there are $ |E| $ edges. For a directed graph, the adjacency lists contain a total of $ |E| $ elements, one element per directed edge."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "If the double-subscript notation confuses you, you can think of it this way:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "In JavaScript, we represent these adjacency lists by:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "In JavaScript, we represent this matrix by:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "It is common to identify vertices not by name (such as \"Audrey,\" \"Boston,\" or \"sweater\") but instead by a number. That is, we typically number the $ |V| $ vertices from 0 to $ |V|-1 $. Here's the social network graph with its 10 vertices identified by numbers rather than names:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "One simple way to represent a graph is just a list, or array, of $ |E| $ edges, which we call an **edge list**. To represent an edge, we just have an array of two vertex numbers, or an array of objects containing the vertex numbers of the vertices that the edges are incident on. If edges have weights, add either a third element to the array or more information to the object, giving the edge's weight. Since each edge contains just two or three numbers, the total space for an edge list is $ \\Theta(E) $. For example, here's how we represent an edge list in JavaScript for the social network graph:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Representing a graph with **adjacency lists** combines adjacency matrices with edge lists. For each vertex $ i $, store an array of the vertices adjacent to it. We typically have an array of $ |V| $ adjacency lists, one adjacency list per vertex. Here's an adjacency-list representation of the social network graph:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "There are several ways to represent graphs, each with its advantages and disadvantages. Some situations, or algorithms that we want to run with graphs as input, call for one representation, and others call for a different representation. Here, we'll see three ways to represent graphs."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Vertex numbers in an adjacency list are not required to appear in any particular order, though it is often convenient to list them in increasing order, as in this example."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We can get to each vertex's adjacency list in constant time, because we just have to index into an array. To find out whether an edge $ (i,j) $ is present in the graph, we go to $ i $'s adjacency list in constant time and then look for $ j $ in $ i $'s adjacency list. How long does that take in the worst case? The answer is $ \\Theta(d) $, where $ d $ is the degree of vertex $ i $, because that's how long $ i $'s adjacency list is. The degree of vertex $ i $ could be as high as $ |V|-1 $ (if $ i $ is adjacent to all the other $ |V|-1 $ vertices) or as low as 0 (if $ i $ is isolated, with no incident edges). In an undirected graph, vertex $ j $ is in vertex $ i $'s adjacency list if and only if $ i $ is in $ j $'s adjacency list. If the graph is weighted, then each item in each adjacency list is either a two-item array or an object, giving the vertex number and the edge weight."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We'll look at three criteria. One is how much memory, or space, we need in each representation. We'll use asymptotic notation for that. Yes, we can use asymptotic notation for purposes other than expressing running times! It's really a way to characterize _functions_, and a function can describe a running time, an amount of space required, or some other resource. The other two criteria we'll use relate to time. One is how long it takes to determine whether a given edge is in the graph. The other is how long it takes to find the neighbors of a given vertex."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "With an adjacency matrix, we can find out whether an edge is present in constant time, by just looking up the corresponding entry in the matrix. For example, if the adjacency matrix is named `graph`, then we can query whether edge $ (i,j) $ is in the graph by looking at `graph[i][j]`. So what's the disadvantage of an adjacency matrix? Two things, actually. First, it takes $ \\Theta(V^2) $ space, even if the graph is **sparse**: relatively few edges. In other words, for a sparse graph, the adjacency matrix is mostly 0s, and we use lots of space to represent only a few edges. Second, if you want to find out which vertices are adjacent to a given vertex $ i $, you have to look at all $ |V| $ entries in row $ i $, even if only a small number of vertices are adjacent to vertex $ i $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "You can use a for-loop to iterate through the vertices in an adjacency list. For example, suppose that you have an adjacency-list representation of a graph in the variable `graph`, so that `graph[i]` is an array containing the neighbors of vertex $ i $. Then, to call a function `doStuff` on each vertex adjacent to vertex $ i $, you could use the following JavaScript code:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"```\n"
"[ [0,1], [0,6], [0,8], [1,4], [1,6], [1,9], [2,4], [2,6], [3,4], [3,5],\n"
"[3,8], [4,5], [4,9], [7,8], [7,9] ]\n"
"```"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"```\n"
"[ [1, 6, 8],\n"
"  [0, 4, 6, 9],\n"
"  [4, 6],\n"
"  [4, 5, 8],\n"
"  [1, 2, 3, 5, 9],\n"
"  [3, 4],\n"
"  [0, 1, 2],\n"
"  [8, 9],\n"
"  [0, 3, 7],\n"
"  [1, 4, 7] ]\n"
"```"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"```\n"
"for (var j = 0; j < graph[i].length; j++) {\n"
"    doStuff(graph[i][j]);\n"
"}\n"
"```"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"```\n"
"var vertex = graph[i];\n"
"for (var j = 0; j < vertex.length; j++) {\n"
"    doStuff(vertex[j]);\n"
"}\n"
"```"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/21cd2731928c7c13057eee000e3697de82ccc058.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/549bca1a52774846b25caff86d244d03ee63fd38.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# Article is at (x2950734a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/cc82379521bd84738e86d6cf9552738ca9138420.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "Adjacency lists"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "Adjacency matrix"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"```\n"
"[ [1, 6, 8],\n"
"  [0, 4, 6, 9],\n"
"  [4, 6],\n"
"  [4, 5, 8],\n"
"  [1, 2, 3, 5, 9],\n"
"  [3, 4],\n"
"  [0, 1, 2],\n"
"  [8, 9],\n"
"  [0, 3, 7],\n"
"  [1, 4, 7] ]\n"
"\n"
"```"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"```\n"
"for (var j = 0; j < graph[i].length; j++) {\n"
"    doStuff(graph[i][j]);\n"
"}\n"
"\n"
"```"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"```\n"
"var vertex = graph[i];\n"
"for (var j = 0; j < vertex.length; j++) {\n"
"    doStuff(vertex[j]);\n"
"}\n"
"\n"
"```"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/adjacency_list.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/adjacency_matrix.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs">http://translate.khanacademy.org/computing/computer-science/algorithms/graph-representation/a/representing-graphs</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/social_network_num.png"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort</a>
# Title of tutorial article (x26f9fc30) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Analysis of insertion sort"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort</a>.
# Article is at (x26f9fc30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "$ c \\cdot (n-1+1)((n-1)/2) = cn^2/2 - cn/2 $ .  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort</a>.
# Article is at (x26f9fc30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "$ c \\cdot 1 + c \\cdot 2 + c \\cdot 3 + \\cdots c \\cdot (n-1) = c \\cdot (1 + 2 + 3 + \\cdots + (n-1)) $ .  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort</a>.
# Article is at (x26f9fc30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   Worst case: $ \\Theta(n^2) $.\n"
"*   Best case: $ \\Theta(n) $.\n"
"*   Average case for a random array: $ \\Theta(n^2) $.\n"
"*   \"Almost sorted\" case: $ \\Theta(n) $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort</a>.
# Article is at (x26f9fc30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Can either of these situations occur? Can each call to `insert` cause every element in the subarray to slide one position to the right? Can each call to `insert` cause no elements to slide? The answer is yes to both questions. A call to `insert` causes every element to slide over if the key being inserted is less than every element to its left. So, if every element is less than every element to its left, the running time of insertion sort is $ \\Theta(n^2) $. What would it mean for every element to be less than the element to its left? The array would have to start out in _reverse_ sorted order, such as [11, 7, 5, 3, 2]. So a reverse-sorted array is the worst case for insertion sort."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort</a>.
# Article is at (x26f9fc30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Can insertion sort take _less_ than $ \\Theta(n^2) $ time? The answer is yes. Suppose we have the array [2, 3, 5, 7, 11], where the sorted subarray is the first four elements, and we're inserting the value 11\\. Upon the first test, we find that 11 is greater than 7, and so no elements in the subarray need to slide over to the right. Then this call of `insert` takes just constant time. Suppose that _every_ call of `insert` takes constant time. Because there are $ n-1 $ calls to `insert`, if each call takes time that is some constant $ c $, then the total time for insertion sort is $ c \\cdot (n-1) $, which is $ \\Theta(n) $, not $ \\Theta(n^2) $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort</a>.
# Article is at (x26f9fc30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "How about the opposite case? A call to `insert` causes no elements to slide over if the key being inserted is greater than or equal to every element to its left. So, if every element is greater than or equal to every element to its left, the running time of insertion sort is $ \\Theta(n) $. This situation occurs if the array starts out already sorted, and so an already-sorted array is the best case for insertion sort."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort</a>.
# Article is at (x26f9fc30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "If you had to make a blanket statement that applies to all cases of insertion sort, you would have to say that it runs in $ O(n^2) $ time. You cannot say that it runs in $ \\Theta(n^2) $ time in all cases, since the best case runs in $ \\Theta(n) $ time. And you cannot say that it runs in $ \\Theta(n) $ time in all cases, since the worst-case running time is $ \\Theta(n^2) $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort</a>.
# Article is at (x26f9fc30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let's take a situation where we call `insert` and the value being inserted into a subarray is less than every element in the subarray. For example, if we're inserting 0 into the subarray [2, 3, 5, 7, 11], then every element in the subarray has to slide over one position to the right. So, in general, if we're inserting into a subarray with $ k $ elements, all $ k $ might have to slide over by one position. Rather than counting exactly how many lines of code we need to test an element against a key and slide the element, let's agree that it's a constant number of lines; let's call that constant $ c $. Therefore, it could take up to $ c \\cdot k $ lines to insert into a subarray of $ k $ elements."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort</a>.
# Article is at (x26f9fc30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Like selection sort, insertion sort loops over the indices of the array. It just calls `insert` on the elements at indices $ 1, 2, 3, \\ldots, n-1 $. Just as each call to `indexOfMinimum` took an amount of time that depended on the size of the sorted subarray, so does each call to `insert`. Actually, the word \"does\" in the previous sentence should be \"can,\" and we'll see why."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort</a>.
# Article is at (x26f9fc30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Suppose that upon every call to `insert`, the value being inserted is less than every element in the subarray to its left. When we call `insert` the first time, $ k=1 $. The second time, $ k=2 $. The third time, $ k=3 $. And so on, up through the last time, when $ k = n-1 $. Therefore, the total time spent inserting into sorted subarrays is  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort</a>.
# Article is at (x26f9fc30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "That sum is an arithmetic series, except that it goes up to $ n-1 $ rather than $ n $. Using our formula for arithmetic series, we get that the total time spent inserting into sorted subarrays is  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort</a>.
# Article is at (x26f9fc30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "To sum up the running times for insertion sort:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort</a>.
# Article is at (x26f9fc30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Using big-Θ notation, we discard the low-order term $ cn/2 $ and the constant factors $ c $ and 1/2, getting the result that the running time of insertion sort, in this case, is $ \\Theta(n^2) $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort</a>.
# Article is at (x26f9fc30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "What else can we say about the running time of insertion sort? Suppose that the array starts out in a random order. Then, on average, we'd expect that each element is less than half the elements to its left. In this case, on average, a call to `insert` on a subarray of $ k $ elements would slide $ k/2 $ of them. The running time would be half of the worst-case running time. But in asymptotic notation, where constant coefficients don't matter, the running time in the average case would still be $ \\Theta(n^2) $, just like the worst case."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/analysis-of-insertion-sort</a>.
# Article is at (x26f9fc30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "What if you knew that the array was \"almost sorted\": every element starts out at most some constant number of positions, say 17, from where it's supposed to be when sorted? Then each call to `insert` slides at most 17 elements, and the time for one call of `insert` on a subarray of $ k $ elements would be at most $ 17 \\cdot c $. Over all $ n-1 $ calls to `insert`, the running time would be $ 17 \\cdot c \\cdot (n-1) $, which is $ \\Theta(n) $, just like the best case. So insertion sort is fast when given an almost-sorted array."
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort-pseudocode">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort-pseudocode</a>
# Title of tutorial article (xb95f0f74) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Insertion sort pseudocode"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort-pseudocode">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort-pseudocode</a>.
# Article is at (xb95f0f74) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"1.  Call `insert` to insert the element that starts at index 1 into the sorted subarray in index 0.\n"
"2.  Call `insert` to insert the element that starts at index 2 into the sorted subarray in indices 0 through 1.\n"
"3.  Call `insert` to insert the element that starts at index 3 into the sorted subarray in indices 0 through 2.\n"
"4.  …\n"
"5.  Finally, call `insert` to insert the element that starts at index $ n-1 $ into the sorted subarray in indices 0 through $ n-2 $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort-pseudocode">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort-pseudocode</a>.
# Article is at (xb95f0f74) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "As a reminder, here's the visualization that steps through the algorithm on a deck of cards:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort-pseudocode">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort-pseudocode</a>.
# Article is at (xb95f0f74) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Now that you know how to insert a value into a sorted subarray, you can implement insertion sort:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Inserting a value into a sorted subarray"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "A couple of situations that came up in our example bear a little more scrutiny: when the key being inserted is less than all elements to its left (as when we inserted keys 2 and 3), and when it's greater than or equal to all elements to its left (as when we inserted key 13). In the former case, every element in the subarray to the left of the key slides one position to the right, and we have to stop once we've run off the left end of the array. In the latter case, the first time we compare the key with an element to its left, we find that the key is already in its correct position relative to all elements to its left; no elements slide over and the key drops back into the position in which it started."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "And here's what the subarray should look like when we're done:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Because the subarray containing just index 0 is our initial sorted subarray, the first key is in index 1\\. (We'll show the sorted subarray in red, the key in yellow, and the part of the array that we have yet to deal with in blue.) We insert the key into the sorted subarray to its left:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Here's another way to think about sorting. Imagine that you are playing a card game. You're holding the cards in your hand, and these cards are sorted. The dealer hands you exactly one new card. You have to put it into the correct place so that the cards you're holding are still sorted. In selection sort, each element that you add to the sorted subarray is no smaller than the elements already in the sorted subarray. But in our card example, the new card could be smaller than some of the cards you're already holding, and so you go down the line, comparing the new card against each card in your hand, until you find the place to put it. You insert the new card in the right place, and once again, your hand holds fully sorted cards. Then the dealer gives you another card, and you repeat the same procedure. Then another card, and another card, and so on, until the dealer stops giving you cards."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "In terms of arrays, imagine that the subarray from index 0 through index $ 5 $ is already sorted, and we want to insert the element currently in index 6 into this sorted subarray, so that the subarray from index 0 through index 6 is sorted. Here's how we start:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Insertion sort repeatedly inserts an element in the sorted subarray to its left. Initially, we can say that the subarray containing only index 0 is sorted, since it contains only one element, and how can a single element _not_ be sorted with respect to itself? It must be sorted. Let's work through an example. Here's our initial array:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Next, we compare `key` with the element at position 3, and we slide this element over:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Notice that the slide operation just copies the element one position to the right. Next, we compare `key` with the element at position 4\\. We find that `key` (5) is less than the element at position 4 (10), and we slide this element over:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Now the sorted subarray runs from index 0 through index 1, and the new key is in index 2\\. We insert it into the sorted subarray to its left:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Now we come to the element at position 1, which has the value 3\\. This element is less than `key`, and so we do _not_ slide it over. Instead, we drop `key` into the position immediately to the right of this element (that is, into position 2), whose element was most recently slid to the right. The result is that the subarray from index 0 through index 6 has become sorted:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Now, we compare `key` with the element at position 5\\. We find that `key` (5) is less than the element at position 5 (13), and so we slide this element over to position 6:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Once we've inserted that rightmost element in the array, we have sorted the entire array:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The main step in insertion sort is making space in an array to put the current value, which is stored in the variable `key`. As we saw above, we go through the subarray to the left of `key`'s initial position, right to left, sliding each element that is greater than `key` one position to the right. Once we find an element that is less than `key`, or equal to `key`, we stop sliding and copy `key` into the vacated position just to the right of this element. (Of course, the position is not truly vacated, but its element was slid over to the right.) This diagram shows the idea:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The same happens with the element at position 2:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "There are many different ways to sort. As selection sort runs, the subarray at the beginning of the array is sorted, but the subarray at the end is not. Selection sort scans the unsorted subarray for the next element to include in the sorted subarray."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "This is the idea behind **insertion sort**. Loop over positions in the array, starting with index 1\\. Each new position is like the new card handed to you by the dealer, and you need to insert it into the correct place in the sorted subarray to the left of that position. Here's a visualization that steps through that:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "To insert the element in position 6 into the subarray to its left, we repeatedly compare it with elements to its left, going right to left. Let's call the element in position 6 the **key**. Each time we find that the key is less than an element to its left, we slide that element one position to the right, since we know that the key will have to go to that element's left. We'll need to do two things to make this idea work: we need to have a **slide** operation that slides an element one position to the right, and we need to save the value of the key in a separate place (so that it doesn't get overridden by the element to its immediate left). In our example, let's pull the element at index 6 into a variable called `key`:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We keep going, considering each array element in turn as the key, and inserting it into the sorted subarray to its left:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/098e4adac0e0fb5178bcdf6a6b666dadaa6569fc.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/1fbd60bddb70bfd5d1c998d2b4a02656b0e1c7e4.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/233d1c56117c37dbb34f7405442a8e75b3c97d08.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/2a3102b390cf8e84005e532c7b528c908da4331b.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/3dec159773ea9fcaf6cb94c27389432c20c2823e.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/45e4b4fa45dbaf12b7afd21c8947184c84f31a07.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/582ec4246161ba1c0fd563bd997b653ba7776f50.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/718b89bbd6226991fffdad749834dd03101c56f1.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/7cb3df59ff37a5f63d37dd6d22770bdf00fa3f58.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/907d2ecf13d5e477354c5e9045068110a439f826.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/92b6ef2b71b164923c500329b4d206570abbceea.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/d99982d8c5e0d5a18f0dfc86a6d4974b09e25b93.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/dd04d2adc8289e77b8f36fcad71b31fa22d116b9.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/e4fdc18e16e7a4442ca2d901a50f47e90f8c5c70.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/e69713ecc4c152b9a23756096ce3c73635240f06.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# Article is at (x73d59d90) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/ef7ad801acc49223bda3c51fc1a04fb698a6a0ec.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "Here's another way to think about sorting. Imagine that you are playing a card game. You're holding the cards in your hand, and these cards are sorted. The dealer hands you exactly one new card. You have to put it into the correct place so that the cards you're holding are still sorted. In selection sort, each element that you add to the sorted subarray is no smaller than the element already in the sorted subarray. But in our card example, the new card could be smaller than some of the cards you're already holding, and so you go down the line, comparing the new card against each card in your hand, until you find the place to put it. You insert the new card in the right place, and once again, your hand holds fully sorted cards. Then the dealer gives you another card, and you repeat the same procedure. Then another card, and another card, and so on, until the dealer stops giving you cards."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/insertion.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/insertion_end.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/insertion_key.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/insertion_slide1.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/insertion_slide2.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/insertion_slide3.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/insertion_slide4.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/insertion_slide5.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/insertion_sort1.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/insertion_sort2.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/insertion_sort3.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/insertion_sort4.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/insertion_sort5.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/insertion_sort6.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/insertion_sort7.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/insertion-sort/a/insertion-sort</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/insertion_start.png"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/a-guessing-game">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/a-guessing-game</a>
# Title of tutorial article (x77830370) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "A guessing game"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/a-guessing-game">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/a-guessing-game</a>.
# Article is at (x77830370) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "But you could do something more efficient than just guessing 1, 2, 3, 4, …, right? Since the computer tells you whether a guess is too low, too high, or correct, you can start off by guessing 15\\. If the number that the computer selected is less than 15, then because you know that 15 is too high, you can eliminate all the numbers from 15 to 30 from further consideration. If the number selected by the computer is greater than 15, then you can eliminate 1 through 15\\. Either way, you can eliminate about half the numbers. On your next guess, eliminate half of the remaining numbers. Keep going, always eliminating half of the remaining numbers. We call this halving approach **binary search**, and no matter which number from 1 to 30 the computer has selected, you should be able to find the number in at most 5 guesses with this technique."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/a-guessing-game">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/a-guessing-game</a>.
# Article is at (x77830370) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Here, try it for a number from 1 to 300\\. You should need no more than 9 guesses."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/a-guessing-game">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/a-guessing-game</a>.
# Article is at (x77830370) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "How many guesses did it take you to find the number this time? Why should you never need more than 9 guesses? (Can you think of a mathematical explanation)?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/a-guessing-game">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/a-guessing-game</a>.
# Article is at (x77830370) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let's play a little game to give you an idea of how different algorithms for the same problem can have wildly different efficiencies. The computer is going to randomly select an integer from 1 to 16\\. You have to guess the number by making guesses until you find the number that the computer chose:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/a-guessing-game">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/a-guessing-game</a>.
# Article is at (x77830370) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Maybe you guessed 1, then 2, then 3, then 4, and so on, until you guessed the right number. We call this approach **linear search**, because you guess all the numbers as if they were lined up in a row. It would work. But what is the highest number of guesses you could need? If the computer selects 30, you would need 30 guesses. Then again, you could be really lucky, which would be when the computer selects 1 and you get the number on your first guess. How about on average? If the computer is equally likely to select any number from 1 to 30, then on average you'll need 15 guesses."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/a-guessing-game">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/a-guessing-game</a>.
# Article is at (x77830370) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Once you've found the number, tell us—what technique did you use when deciding what number to guess next?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/a-guessing-game">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/a-guessing-game</a>.
# Article is at (x77830370) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We'll return to binary search, and we'll see how you can use it to efficiently search for an item in a JavaScript array. But first, let's look at an algorithm for a trickier problem."
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/discuss-algorithms-in-your-life">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/discuss-algorithms-in-your-life</a>
# Title of tutorial article (x9f86af69) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Discuss: Algorithms in your life"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/discuss-algorithms-in-your-life">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/discuss-algorithms-in-your-life</a>.
# Article is at (x9f86af69) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   What algorithms do you use in every day life? Do you think you could write a program to make them more efficient?\n"
"*   What algorithms do you think are used by your favorite games and apps?\n"
"*   Have you ever made an algorithm for a program? What did it do? Was it correct and efficient?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/discuss-algorithms-in-your-life">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/discuss-algorithms-in-your-life</a>.
# Article is at (x9f86af69) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**Please use the \"Tips/Thanks\" tab for your answers, not the \"Questions\" tab. We look forward to your thoughts!**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/discuss-algorithms-in-your-life">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/discuss-algorithms-in-your-life</a>.
# Article is at (x9f86af69) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Leave a comment below answering one or more of these questions, and check out what other students wrote:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/discuss-algorithms-in-your-life">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/discuss-algorithms-in-your-life</a>.
# Article is at (x9f86af69) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We've given you a little intro to algorithms, and a few examples. Now before we go further, we want to hear what algorithms you can think of."
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>
# Title of tutorial article (x418d391e) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Route-finding"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Exploring a maze"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   How is the current Prince William related to King William III, who endowed the College of William and Mary in 1693?\n"
"*   What path should a ghost follow to get to Pac-Man as quickly as possible?\n"
"*   What's the best way to drive from Dallas, Texas to Orlando, Florida?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"1.  Start on the goal square. How far is the goal from the goal? Zero steps, mark the goal with the number 0.\n"
"2.  Find all squares in the maze that are exactly one step away from the goal. Mark them with the number 1\\. In this maze, if the goal is the exit square, then there is only one square that is exactly one step away.\n"
"3.  Now find all squares in the maze that are exactly two steps away from the goal. These squares are one step away from those marked 1 and have not yet been marked. Mark these squares with the number 2.\n"
"4.  Mark all squares in the maze that are exactly three steps away from the goal. These squares are one step away from those marked 2 and have not yet been marked. Mark these squares with the number 3.\n"
"5.  Keep marking squares in the maze in order of increasing distance from the goal. After marking squares with the number $ k $, mark with the number $ k+1 $ all squares that are one step away from those marked $ k $ and have not yet been marked."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Before deciding on an algorithm, the movement rules first need to be established: walls are made of gray squares and legal locations to travel are empty. In each step, the character can move from one square to an adjacent square. This character, like a chess rook, cannot move diagonally."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Eventually, the algorithm marks the square where the character starts. The program can then find a path to the goal by choosing a sequence of squares from the start such that the numbers on the squares always decrease along the path. If you view the number as the height of the square, it would be like going downhill."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "For Pac-Man, we need a map of the maze. This map shows connections between adjacent open squares in the maze—or lack of connections, if there is a wall in between—and the problem is to find a path along black squares that leads the ghost to Pac-Man."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "For example, a family tree of the royal family of Britain would show connections between people who were directly related. Prince William is the son of Charles Philip Arthur Windsor. Charles is the son of Queen Elizabeth II. The problem is to find a short chain on the family tree connecting Prince William and William III, using these direct connections. As you can see from the tree below, it might take quite a few connections."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Here's the idea behind the algorithm that this program uses: move 1 square closer to the goal—the place the user clicked on—in each step. But what does \"closer to the goal\" mean? Traveling in a straight line toward the goal will often cause the character to smack into a wall. The algorithm needs to determine which of the surrounding squares are indeed \"closer to the goal\", and we can do that by assigning a \"cost\" to each square that represents the minimum number of steps the character would have to take to get from that vertex to the goal. Here's an algorithm for assigning a cost to each square:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "In order to find a driving route from Dallas to Orlando, we might use a map of the United States, showing connections, roads, between nearby cities. No single road directly connects Dallas to Orlando, but several sequences of roads do."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let's look more deeply at something like Pac-Man, a computer game in which the main character is controlled by clicking on destinations in a maze. The game is below. Try clicking on a few locations to move the character, represented by the yellow circle, to the goal, represented by the red rectangle."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Notice how the character moved to the goal? To make that happen, the program needs to determine the precise set of movements that the character should follow to get to where the user clicked and then animate those movements. There may be multiple paths for the character to follow, and the program needs to choose the best of those paths."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Pac-Man maze with ghost and Pac-Man highlighted"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Royal family tree with Elizabeth II and William III highlighted"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Sometimes, very different-sounding problems turn out to be similar when you think about how to solve them. What do Pac-Man, the royal family of Britain, and driving to Orlando have in common? They all involve route-finding or path-search problems:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "There's a square immediately to the south of the start (row four, column three) that is only 12 steps from the goal. So the first move is \"south\". South of that square is an 11\\. South again. South again to a 10\\. Then east to a 9\\. East twice more to a 7, then north five times to a 2\\. Finish up by going west once, to a 1, and finally north once, to the goal."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "US Road map with Dallas and Orlando highlighted"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We have to be given some information to answer any of these questions."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We won't discuss exactly how to implement this maze search algorithm right now, but you might find it fun to think about how you might represent the maze and the character using JavaScript and how you might implement the algorithm."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "What if the user were trying to get from the start square to the goal? Using the square-marking algorithm, the start square is 13 steps away from the goal. Here's a picture showing the connections between possible locations for the character, the start, the goal, and the shortest distance of each location from the goal:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "You can play through the cost-marking algorithm below. Click \"Restart algorithm\" to start the steps over."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/pac_man.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/royal_family_tree.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding">http://translate.khanacademy.org/computing/computer-science/algorithms/intro-to-algorithms/a/route-finding</a>.
# Article is at (x418d391e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/us_road_map.png"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort</a>
# Title of tutorial article (x829af65b) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Analysis of merge sort"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort</a>.
# Article is at (x829af65b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"1.  The divide step takes constant time, regardless of the subarray size. After all, the divide step just computes the midpoint $ q $ of the indices $ p $ and $ r $. Recall that in big-Θ notation, we indicate constant time by $ \\Theta(1) $.\n"
"2.  The conquer step, where we recursively sort two subarrays of approximately $ n/2 $ elements each, takes some amount of time, but we'll account for that time when we consider the subproblems.\n"
"3.  The combine step merges a total of $ n $ elements, taking $ \\Theta(n) $ time."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort</a>.
# Article is at (x829af65b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "As the subproblems get smaller, the number of subproblems doubles at each \"level\" of the recursion, but the merging time halves. The doubling and halving cancel each other out, and so the total merging time is $ cn $ at each level of recursion. Eventually, we get down to subproblems of size 1: the base case. We have to spend $ \\Theta(1) $ time to sort subarrays of size 1, because we have to test whether $ p < r $, and this test takes time. How many subarrays of size 1 are there? Since we started with $ n $ elements, there must be $ n $ of them. Since each base case takes $ \\Theta(1) $ time, let's say that altogether, the base cases take $ cn $ time:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort</a>.
# Article is at (x829af65b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Computer scientists draw trees upside-down from how actual trees grow. A **tree** is a graph with no cycles (paths that start and end at the same place). Convention is to call the vertices in a tree its **nodes**. The **root** node is on top; here, the root is labeled with the $ n $ subarray size for the original $ n $-element array. Below the root are two **child** nodes, each labeled $ n/2 $ to represent the subarray sizes for the two subproblems of size $ n/2 $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort</a>.
# Article is at (x829af65b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Each of the subproblems of size $ n/2 $ recursively sorts two subarrays of size $ (n/2)/2 $, or $ n/4 $. Because there are two subproblems of size $ n/2 $, there are four subproblems of size $ n/4 $. Each of these four subproblems merges a total of $ n/4 $ elements, and so the merging time for each of the four subproblems is $ cn/4 $. Summed up over the four subproblems, we see that the total merging time for all subproblems of size $ n/4 $ is $ 4 \\cdot cn/4 = cn $:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort</a>.
# Article is at (x829af65b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "First merge sort tree"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort</a>.
# Article is at (x829af65b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Given that the `merge` function runs in $ \\Theta(n) $ time when merging $ n $ elements, how do we get to showing that `mergeSort` runs in $ \\Theta(n \\lg n) $ time? We start by thinking about the three parts of divide-and-conquer and how to account for their running times. We assume that we're sorting a total of $ n $ elements in the entire array."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort</a>.
# Article is at (x829af65b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "If we think about the divide and combine steps together, the $ \\Theta(1) $ running time for the divide step is a low-order term when compared with the $ \\Theta(n) $ running time of the combine step. So let's think of the divide and combine steps together as taking $ \\Theta(n) $ time. To make things more concrete, let's say that the divide and combine steps together take $ cn $ time for some constant $ c $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort</a>.
# Article is at (x829af65b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let's draw out the merging times in a \"tree\":"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort</a>.
# Article is at (x829af65b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Now we have to figure out the running time of two recursive calls on $ n/2 $ elements. Each of these two recursive calls takes twice of the running time of `mergeSort` on an $ (n/4) $-element subarray (because we have to halve $ n/2 $) plus $ cn/2 $ to merge. We have two subproblems of size $ n/2 $, and each takes $ cn/2 $ time to merge, and so the total time we spend merging for subproblems of size $ n/2 $ is $ 2\\cdot cn/2 = cn $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort</a>.
# Article is at (x829af65b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Now we know how long merging takes for each subproblem size. The total time for `mergeSort` is the sum of the merging times for all the levels. If there are $ l $ levels in the tree, then the total merging time is $ l \\cdot cn $. So what is $ l $? We start with subproblems of size $ n $ and repeatedly halve until we get down to subproblems of size 1\\. We saw this characteristic when we analyzed binary search, and the answer is $ l = \\lg n + 1 $. For example, if $ n=8 $, then $ \\lg n + 1 = 4 $, and sure enough, the tree has four levels: $ n = 8, 4, 2, 1 $. The total time for `mergeSort`, then, is $ cn (\\lg n + 1) $. When we use big-Θ notation to describe this running time, we can discard the low-order term ($ +1 $) and the constant coefficient ($ c $), giving us a running time of $ \\Theta(n \\lg n) $, as promised."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort</a>.
# Article is at (x829af65b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "One other thing about merge sort is worth noting. During merging, it makes a copy of the entire array being sorted, with one half in `lowHalf` and the other half in `highHalf`. Because it copies more than a constant number of elements at some time, we say that merge sort does not work **in place**. By contrast, both selection sort and insertion sort do work in place, since they never make a copy of more than a constant number of array elements at any one time. Computer scientists like to consider whether an algorithm works in place, because there are some systems where space is at a premium, and thus in-place algorithms are preferred."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort</a>.
# Article is at (x829af65b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "To keep things reasonably simple, let's assume that if $ n>1 $, then $ n $ is always even, so that when we need to think about $ n/2 $, it's an integer. (Accounting for the case in which $ n $ is odd doesn't change the result in terms of big-Θ notation.) So now we can think of the running time of `mergeSort` on an $ n $-element subarray as being the sum of twice the running time of `mergeSort` on an $ (n/2) $-element subarray (for the conquer step) plus $ cn $ (for the divide and combine steps—really for just the merging)."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort</a>.
# Article is at (x829af65b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "What do you think would happen for the subproblems of size $ n/8 $? There will be eight of them, and the merging time for each will be $ cn/8 $, for a total merging time of $ 8 \\cdot cn/8 = cn $:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort</a>.
# Article is at (x829af65b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/merge_sort_tree_1.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort</a>.
# Article is at (x829af65b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/merge_sort_tree_2.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort</a>.
# Article is at (x829af65b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/merge_sort_tree_3.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/analysis-of-merge-sort</a>.
# Article is at (x829af65b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/merge_sort_tree_4.png"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms</a>
# Title of tutorial article (xf2ebb181) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Divide and conquer algorithms"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms</a>.
# Article is at (xf2ebb181) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Divide-and-conquer"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms</a>.
# Article is at (xf2ebb181) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"1.  **Divide** the problem into a number of subproblems that are smaller instances of the same problem.\n"
"2.  **Conquer** the subproblems by solving them recursively. If they are small enough, solve the subproblems as base cases.\n"
"3.  **Combine** the solutions to the subproblems into the solution for the original problem."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms</a>.
# Article is at (xf2ebb181) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Both merge sort and quicksort employ a common algorithmic paradigm based on recursion. This paradigm, **divide-and-conquer**, breaks a problem into subproblems that are similar to the original problem, recursively solves the subproblems, and finally combines the solutions to the subproblems to solve the original problem. Because divide-and-conquer solves subproblems recursively, each subproblem must be smaller than the original problem, and there must be a base case for subproblems. You should think of a divide-and-conquer algorithm as having three parts:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms</a>.
# Article is at (xf2ebb181) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The two sorting algorithms we've seen so far, [selection sort](/computing/computer-science/algorithms/sorting-algorithms/a/sorting) and [insertion sort](/computing/computer-science/algorithms/insertion-sort/a/insertion-sort), have worst-case running times of $ \\Theta(n^2) $. When the size of the input array is large, these algorithms can take a long time to run. In this tutorial and the next one, we'll see two other sorting algorithms, merge sort and quicksort, whose running times are better. In particular, merge sort runs in $ \\Theta(n \\lg n) $ time in all cases, and quicksort runs in $ \\Theta(n \\lg n) $ time in the best case and on average, though its worst-case running time is $ \\Theta(n^2) $. Here's a table of these four sorting algorithms and their running times:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms</a>.
# Article is at (xf2ebb181) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "You can easily remember the steps of a divide-and-conquer algorithm as _divide, conquer, combine_. Here's how to view one step, assuming that each divide step creates two subproblems (though some divide-and-conquer algorithms create more than two):"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms</a>.
# Article is at (xf2ebb181) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "[[☃ image 1]]Because divide-and-conquer creates at least two subproblems, a divide-and-conquer algorithm makes multiple recursive calls."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms</a>.
# Article is at (xf2ebb181) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "[[☃ image 1]]If we expand out two more recursive steps, it looks like this:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms</a>.
# Article is at (xf2ebb181) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/8cd7b462a39017c99f86558ff3256aca517837c3.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms</a>.
# Article is at (xf2ebb181) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/98c02634ee7f970a6bfb0812cc1495bacb462282.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms</a>.
# Article is at (xf2ebb181) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/db9d172fc33b90e905c1213b8cce660c228bb99c.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/divide-and-conquer-algorithms</a>.
# Article is at (xf2ebb181) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"| Algorithm | Worst-case running time | Best-case running time | Average-case running time |\n"
"| --- | --- | --- | --- |\n"
"| Selection sort | $ \\Theta(n^2) $ | $ \\Theta(n^2) $ | $ \\Theta(n^2) $ |\n"
"| Insertion sort | $ \\Theta(n^2) $ | $ \\Theta(n) $ | $ \\Theta(n^2) $ |\n"
"| Merge sort | $ \\Theta(n \\lg n) $ | $ \\Theta(n \\lg n) $ | $ \\Theta(n \\lg n) $ |\n"
"| Quicksort | $ \\Theta(n^2) $ | $ \\Theta(n \\lg n) $ | $ \\Theta(n \\lg n) $ |"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>
# Title of tutorial article (xb9349260) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Linear-time merging"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   `i` indexes the next element of `lowHalf` that we have not copied back into `array`. Initially, `i` is 0.\n"
"*   `j` indexes the next element of `highHalf` that we have not copied back into `array`. Initially, `j` is 0.\n"
"*   `k` indexes the next location in `array` that we copy into. Initially, `k` equals `p`."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"1.  Copy each element in `array[p..r]` into either `lowHalf` or `highHalf`.\n"
"2.  As long as some elements are untaken in both `lowHalf` and `highHalf`, compare the first two untaken elements and copy the smaller one back into `array`.\n"
"3.  Once one of `lowHalf` and `highHalf` has had all its elements copied back into `array`, copy each remaining untaken element from the other temporary array back into `array`."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "After copying"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "After we copy from `lowHalf` or `highHalf` into `array`, we must increment (add 1 to) `k` so that we copy the next smallest element into the next position of `array`. We also have to increment `i` if we copied from `lowHalf`, or increment `j` if we copied from `highHalf`. So here are the arrays before and after the first element is copied back into `array`:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Eventually, either all of `lowHalf` or all of `highHalf` is copied back into `array`. In this example, all of `highHalf` is copied back before the last few elements of `lowHalf`. We finish up by just copying the remaining untaken elements in either `lowHalf` or `highHalf`:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "How many lines of code do we need to execute for each of these steps? It's a constant number _per element_. Each element is copied from `array` into either `lowHalf` or `highHalf` exactly one time in step 1\\. Each comparison in step 2 takes constant time, since it compares just two elements, and each element \"wins\" a comparison at most one time. Each element is copied back into `array` exactly one time in steps 2 and 3 combined. Since we execute each line of code a constant number of times per element and we assume that the subarray `array[p..q]` contains $ n $ elements, the running time for merging is indeed $ \\Theta(n) $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "In order to merge the sorted subarrays `array[p..q]` and `array[q+1..r]` and have the result in `array[p..r]`, we first need to make temporary arrays and copy `array[p..q]` and `array[q+1..r]` into these temporary arrays. We can't write over the positions in `array[p..r]` until we have the elements originally in `array[p..q]` and `array[q+1..r]` safely copied."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "In our example array [14, 7, 3, 12, 9, 11, 6, 2], here's what things look like after we've recursively sorted `array[0..3]` and `array[4..7]` (so that $ p=0 $, $ q=3 $, and $ r=7 $) and copied these subarrays into `lowHalf` and `highHalf`:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Keep going, always comparing `lowHalf[i]` and `highHalf[j]`, copying the smaller of the two into `array[k]`, and incrementing either `i` or `j`:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Merge completion"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Merge step 1"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Merge step 2"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Merge step 3"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Merge steps"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Next, we compare `lowHalf[1]` and `highHalf[1]`, determining that we should copy `highHalf[1]` into `array[k]`. We then increment `k` and `j`:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Next, we merge the two sorted subarrays, now in `lowHalf` and `highHalf`, back into `array[p..r]`. We should put the smallest value in either of the two subarrays into `array[p]`. Where might this smallest value reside? Because the subarrays are sorted, the smallest value _must_ be in one of just two places: either `lowHalf[0]` or `highHalf[0]`. (It's possible that the same value is in both places, and then we can call either one the smallest value.) With just one comparison, we can determine whether to copy `lowHalf[0]` or `highHalf[0]` into `array[p]`. In our example, `highHalf[0]` was smaller. Let's also establish three variables to index into the arrays:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The first order of business in the `merge` function, therefore, is to allocate two temporary arrays, `lowHalf` and `highHalf`, to copy all the elements in `array[p..q]` into `lowHalf`, and to copy all the elements in `array[q+1..r]` into `highHalf`. How big should `lowHalf` be? The subarray `array[p..q]` contains $ q-p+1 $ elements. How about `highHalf`? The subarray `array[q+1..r]` contains $ r-q $ elements. (In JavaScript, we don't have to give the size of an array when we create it, but since we do have to do that in many other programming languages, we often consider it when describing an algorithm.)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The numbers in `array` are grayed out to indicate that although these array positions contain values, the \"real\" values are now in `lowHalf` and `highHalf`. We may overwrite the grayed numbers at will."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The remaining piece of merge sort is the `merge` function, which merges two adjacent sorted subarrays, `array[p..q]` and `array[q+1..r]` into a single sorted subarray in `array[p..r]`. We'll see how to construct this function so that it's as efficient as possible. Let's say that the two subarrays have a total of $ n $ elements. We have to examine each of the elements in order to merge them together, and so the best we can hope for would be a merging time of $ \\Theta(n) $. Indeed, we'll see how to merge a total of $ n $ elements in $ \\Theta(n) $ time."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We claimed that merging $ n $ elements takes $ \\Theta(n) $ time, and therefore the running time of merging is linear in the subarray size. Let's see why this is true. We saw three parts to merging:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We've grayed out `highHalf[0]` to indicate that it no longer contains a value that we're going to consider. The unmerged part of the `highHalf` array starts at index `j`, which is now 1\\. The value in `array[p]` is no longer grayed out, because we copied a \"real\" value into it."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Where must the next value to copy back into `array` reside? It's either first untaken element in `lowHalf` (`lowHalf[0]`) or the first untaken element in `highHalf` (`highHalf[1]`). With one comparison, we determine that `lowHalf[0]` is smaller, and so we copy it into `array[k]` and increment `k` and `i`:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/after_copying.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/merge_step_1.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/merge_step_2.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/merge_step_3.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/merge_step_4.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/linear-time-merging</a>.
# Article is at (xb9349260) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/merge_step_5.png"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort</a>
# Title of tutorial article (xed3ada49) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Overview of merge sort"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort</a>.
# Article is at (xed3ada49) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   In the **divide** step, we compute $ q = 3 $.\n"
"*   The **conquer** step has us sort the two subarrays `array[0..3]`, which contains [14, 7, 3, 12], and `array[4..7]`, which contains [9, 11, 6, 2]. When we come back from the conquer step, each of the two subarrays is sorted: `array[0..3]` contains [3, 7, 12, 14] and `array[4..7]` contains [2, 6, 9, 11], so that the full array is [3, 7, 12, 14, 2, 6, 9, 11].\n"
"*   Finally, the **combine** step merges the two sorted subarrays in the first half and the second half, producing the final sorted array [2, 3, 6, 7, 9, 11, 12, 14]."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort</a>.
# Article is at (xed3ada49) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"1.  **Divide** by finding the number $ q $ of the position midway between $ p $ and $ r $. Do this step the same way we found the midpoint in binary search: add $ p $ and $ r $, divide by 2, and round down.\n"
"2.  **Conquer** by recursively sorting the subarrays in each of the two subproblems created by the divide step. That is, recursively sort the subarray `array[p..q]` and recursively sort the subarray `array[q+1..r]`.\n"
"3.  **Combine** by merging the two sorted subarrays back into the single sorted subarray `array[p..r]`."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort</a>.
# Article is at (xed3ada49) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Because we're using divide-and-conquer to sort, we need to decide what our subproblems are going to look like. The full problem is to sort an entire array. Let's say that a subproblem is to sort a subarray. In particular, we'll think of a subproblem as sorting the subarray starting at index $ p $ and going through index $ r $. It will be convenient to have a notation for a subarray, so let's say that `array[p..r]` denotes this subarray of `array`. Note that this \"two-dot\" notation is _not_ legal JavaScript; we're using it just to describe the algorithm, rather than a particular implementation of the algorithm in code. In terms of our notation, for an array of $ n $ elements, we can say that the original problem is to sort `array[0..n-1]`."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort</a>.
# Article is at (xed3ada49) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Here's how merge sort uses divide-and-conquer:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort</a>.
# Article is at (xed3ada49) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "How did the subarray `array[0..1]` become sorted? With $ p=0 $ and $ r=1 $, compute $ q=0 $, recursively sort `array[0..0]` ([14]) and `array[1..1]` ([7]), resulting in `array[0..1]` still containing [14, 7], and merge the first half with the second half, producing [7, 14]."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort</a>.
# Article is at (xed3ada49) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "How did the subarray `array[0..3]` become sorted? The same way. It has more than two elements, and so it's not a base case. With $ p=0 $ and $ r=3 $, compute $ q=1 $, recursively sort `array[0..1]` ([14, 7]) and `array[2..3]` ([3, 12]), resulting in `array[0..3]` containing [7, 14, 3, 12], and merge the first half with the second half, producing [3, 7, 12, 14]."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort</a>.
# Article is at (xed3ada49) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let's see an example. Let's start with `array` holding [14, 7, 3, 12, 9, 11, 6, 2], so that the first subarray is actually the full array, `array[0..7]` ($ p=0 $ and $ r=7 $). This subarray has at least two elements, and so it's not a base case."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort</a>.
# Article is at (xed3ada49) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Most of the steps in merge sort are simple. You can check for the base case easily. Finding the midpoint $ q $ in the divide step is also really easy. You have to make two recursive calls in the conquer step. It's the combine step, where you have to merge two sorted subarrays, where the real work happens. For the moment, let's assume that we know how to merge two sorted subarrays efficiently and continue to focus on merge sort as a whole."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort</a>.
# Article is at (xed3ada49) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The subarrays `array[0..0]` and `array[1..1]` are base cases, since each contains fewer than two elements. Here is how the entire merge sort algorithm unfolds:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort</a>.
# Article is at (xed3ada49) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We need a base case. The base case is a subarray containing fewer than two elements, that is, when $ p \\geq r $, since a subarray with no elements or just one element is already sorted. So we'll divide-conquer-combine only when $ p < r $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/merge-sort/a/overview-of-merge-sort</a>.
# Article is at (xed3ada49) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/merge_sort_recursion.png"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>
# Title of tutorial article (xb06e1e31) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Analysis of quicksort"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Average-case running time"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Best-case running time"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Randomized quicksort"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Worst-case running time"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "$ \\begin{align} cn + c(n-1) + c(n-2) + \\cdots + 2c &= c(n + (n-1) + (n-2) + \\cdots + 2) \\\\ &= c((n+1)(n/2) - 1) \\ . \\end{align} $  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "$ \\displaystyle \\log_{4/3} n = \\frac{\\lg n}{\\lg (4/3)} \\ , $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "As in merge sort, the time for a given recursive call on an $ n $-element subarray is $ \\Theta(n) $. In merge sort, that was the time for merging, but in quicksort it's the time for partitioning."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Bear in mind that this analysis is _not_ mathematically rigorous, but it gives you an intuitive idea of why the average-case running time might be $ O(n \\lg n) $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "How is it that quicksort's worst-case and average-case running times differ? Let's start by looking at the worst-case running time. Suppose that we're really unlucky and the partition sizes are really unbalanced. In particular, suppose that the pivot chosen by the `partition` function is always either the smallest or the largest element in the $ n $-element subarray. Then one of the partitions will contain no elements and the other partition will contain $ n-1 $ elements—all but the pivot. So the recursive calls will be on subarrays of sizes 0 and $ n-1 $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "How often should we expect to see a split that's 3-to-1 or better? It depends on how we choose the pivot. Let's imagine that the pivot is equally likely to end up anywhere in an $ n $-element subarray after partitioning. Then to get a split that is 3-to-1 or better, the pivot would have to be somewhere in the \"middle half\":"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "In each of the first $ \\log_4 n $ levels, there are $ n $ nodes (again, including pivots that in reality are no longer being partitioned), and so the total partitioning time for each of these levels is $ cn $. But what about the rest of the levels? Each has fewer than `n` nodes, and so the partitioning time for _every_ level is _at most_ $ cn $. Altogether, there are $ \\log_{4/3} n $ levels, and so the total partitioning time is $ O(n \\log_{4/3} n) $. Now, there's a mathematical fact that"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "In fact, with a little more effort, you can improve your chance of getting a split that's at worst 3-to-1\\. Randomly choose not one, but three elements from the subarray, and take median of the three as the pivot (swapping it with the rightmost element). By the **median**, we mean the element of the three whose value is in the middle. We won't show why, but if you choose the median of three randomly chosen elements as the pivot, you have a 68.75% chance (11/16) of getting a 3-to-1 split or better. You can go even further. If you choose five elements at random and take the median as the pivot, your chance of at worst a 3-to-1 split improves to about 79.3% (203/256). If you take the median of seven randomly chosen elements, it goes up to about 85.9% (1759/2048). Median of nine? About 90.2% (59123/65536). Median of 11? About 93.1% (488293/524288). You get the picture. Of course, it doesn't necessarily pay to choose a large number of elements at random and take their median, for the time spent doing so could counteract the benefit of getting good splits almost all the time."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Quicksort's best case occurs when the partitions are as evenly balanced as possible: their sizes either are equal or are within 1 of each other. The former case occurs if the subarray has an odd number of elements and the pivot is right in the middle after partitioning, and each partition has $ (n-1)/2 $ elements. The latter case occurs if the subarray has an even number $ n $ of elements and one partition has $ n/2 $ elements with the other having $ n/2-1 $. In either of these cases, each partition has at most $ n/2 $ elements, and the tree of subproblem sizes looks a lot like the tree of subproblem sizes for merge sort, with the partitioning times looking like the merging times:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Showing that the average-case running time is also $ \\Theta(n \\lg n) $ takes some pretty involved mathematics, and so we won't go there. But we can gain some intuition by looking at a couple of other cases to understand why it might be $ O(n \\lg n) $. (Once we have $ O(n \\lg n) $, the $ \\Theta(n \\lg n) $ bound follows because the average-case running time cannot be better than the best-case running time.) First, let's imagine that we don't always get evenly balanced partitions, but that we always get at worst a 3-to-1 split. That is, imagine that each time we partition, one side gets $ 3n/4 $ elements and the other side gets $ n/4 $. (To keep the math clean, let's not worry about the pivot.) Then the tree of subproblem sizes and partitioning times would look like this:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "So, if the pivot is equally likely to end up anywhere in the subarray after partitioning, there's a 50% chance of getting at worst a 3-to-1 split. In other words, we expect a split of 3-to-1 or better about half the time."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Suppose that your worst enemy has given you an array to sort with quicksort, knowing that you always choose the rightmost element in each subarray as the pivot, and has arranged the array so that you _always_ get the worst-case split. How can you foil your enemy?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The last line is because $ 1 + 2 + 3 + \\cdots + n $ is the arithmetic series, as we saw when we [analyzed selection sort](/sorting-algorithms/a/analysis-of-selection-sort/). (We subtract 1 because for quicksort, the summation starts at 2, not 1.) We have some low-order terms and constant coefficients, but when we use big-Θ notation, we ignore them. In big-Θ notation, quicksort's worst-case running time is $ \\Theta(n^2) $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The left child of each node represents a subproblem size 1/4 as large, and the right child represents a subproblem size 3/4 as large. Since the smaller subproblems are on the left, by following a path of left children, we get from the root down to a subproblem size of 1 faster than along any other path. As the figure shows, after $ \\log_4 n $ levels, we get down to a subproblem size of 1\\. Why $ \\log_4 n $ levels? It might be easiest to think in terms of starting with a subproblem size of 1 and multiplying it by 4 until we reach $ n $. In other words, we're asking for what value of $ x $ is $ 4^x = n $? The answer is $ \\log_4 n $. How about going down a path of right children? The figure shows that it takes $ \\log_{4/3} n $ levels to get down to a subproblem of size 1\\. Why $ \\log_{4/3} n $ levels? Since each right child is 3/4 of the size of the node above it (its **parent** node), each parent is 4/3 times the size of its right child. Let's again think of starting with a subproblem of size 1 and multiplying the size by 4/3 until we reach $ n $. For what value of $ x $ is $ (4/3)^x = n $? The answer is $ \\log_{4/3} n $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The other case we'll look at to understand why quicksort's average-case running time is $ O(n \\lg n) $ is what would happen if the half of the time that we don't get a 3-to-1 split, we got the worst-case split. Let's suppose that the 3-to-1 and worst-case splits alternate, and think of a node in the tree with $ k $ elements in its subarray. Then we'd see a part of the tree that looks like this:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Therefore, even if we got the worst-case split half the time and a split that's 3-to-1 or better half the time, the running time would be about twice the running time of getting a 3-to-1 split every time. Again, that's just a constant factor, and it gets absorbed into the big-O notation, and so in this case, where we alternate between worst-case and 3-to-1 splits, the running time is $ O(n \\lg n) $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Using big-Θ notation, we get the same result as for merge sort: $ \\Theta(n \\lg n) $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "When quicksort always has the most unbalanced partitions possible, then the original call takes $ cn $ time for some constant $ c $, the recursive call on $ n-1 $ elements takes $ c(n-1) $ time, the recursive call on $ n-2 $ elements takes $ c(n-2) $ time, and so on. Here's a tree of the subproblem sizes with their partitioning times:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "When we total up the partitioning times for each level, we get  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "You could not necessarily choose the rightmost element in each subarray as the pivot. Instead, you could randomly choose an element in the subarray, and use that element as the pivot. But wait—the `partition` function assumes that the pivot is in the rightmost position of the subarray. No problem—just swap the element that you chose as the pivot with the rightmost element, and then partition as before. Unless your enemy knows how you choose random locations in the subarray, you win!"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "[[☃ image 1]]instead of like this:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "and so $ \\log_{4/3} n $ and $ \\lg n $ differ by only a factor of $ \\lg (4/3) $, which is a constant. Since constant factors don't matter when we use big-O notation, we can say that if all the splits are 3-to-1, then quicksort's running time is $ O(n \\lg n) $, albeit with a larger hidden constant factor than the best-case running time."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "for all positive numbers $ a $, $ b $, and $ n $. Letting $ a = 4/3 $ and $ b = 2 $, we get that"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/0afd6362c5866d2fc338a8aa9fb65fc2455f6792.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/1f6a230039af38419453096c58bfd3ab5ac77b0f.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/21cd0d70813845d67fbb11496458214f90ad7cb8.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/656ca0d8ab950299dcc2800e6b2a52cc7ea6ffd5.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/7da2ac32779bef669a6f05decb62f219a9132158.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/analysis-of-quicksort</a>.
# Article is at (xb06e1e31) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/a77e296baf334b577328a5f15ab294a652ad6b96.png"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning</a>
# Title of tutorial article (xbdc49207) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Linear-time partitioning"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning</a>.
# Article is at (xbdc49207) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   Finally, `array[r]` is \"group P,\" the __p__ ivot."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning</a>.
# Article is at (xbdc49207) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   The elements in `array[j..r-1]` are \"group U,\" consisting of elements whose relationship to the pivot is __u__ nknown, because they have not yet been compared."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning</a>.
# Article is at (xbdc49207) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   The elements in `array[p..q-1]` are \"group L,\" consisting of elements known to be __l__ ess than or equal to the pivot."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning</a>.
# Article is at (xbdc49207) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   The elements in `array[q..j-1]` are \"group G,\" consisting of elements known to be __g__ reater than the pivot."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning</a>.
# Article is at (xbdc49207) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "A[j] greater than pivot"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning</a>.
# Article is at (xbdc49207) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Having chosen a pivot, we partition the subarray by going through it, left to right, comparing each element with the pivot. We maintain two indices `q` and `j` into the subarray that divide it up into four groups. We use the variable name `q` because that index will eventually point at our pivot. We use `j` because it's a common counter variable name, and the variable will be discarded once we're done."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning</a>.
# Article is at (xbdc49207) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "If instead `A[j]` is less than or equal to the pivot, then we swap `A[j]` with `A[q]` (the leftmost element in group G), increment `j`, and increment `q`, thereby sliding the line dividing groups L and G and the line dividing groups G and U over one position to the right:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning</a>.
# Article is at (xbdc49207) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Initially, both `q` and `j` equal `p`. At each step, we compare `A[j]`, the leftmost element in group U, with the pivot. If `A[j]` is greater than the pivot, then we just increment `j`, so that the line dividing groups G and U slides over one position to the right:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning</a>.
# Article is at (xbdc49207) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Once we get to the pivot, group U is empty. We swap the pivot with the leftmost element in group G: swap `A[r]` with `A[q]`. This swap puts the pivot between groups L and G, and it does the right thing even if group L or group G is empty. (If group L is empty, then `q` never increased from its initial value of `p`, and so the pivot moves to the leftmost position in the subarray. If group G is empty, then `q` was incremented every time `j` was, and so once `j` reaches the index `r` of the pivot, `q` equals `r`, and the swap leaves the pivot in the rightmost position of the subarray.) The `partition` function that implements this idea also returns the index `q` where it ended up putting the pivot, so that the `quicksort` function, which calls it, knows where the partitions are. Here are the steps in partitioning the subarray [12, 7, 14, 9, 10, 11] in `array[4..9]`:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning</a>.
# Article is at (xbdc49207) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Partitioning a subarray with $ n $ elements takes $ \\Theta(n) $ time. Each element `A[j]` is compared once with the pivot. `A[j]` may or may not be swapped with `A[q]`, `q` may or may not be incremented, and `j` is always incremented. The total number of lines executed per element of the subarray is a constant. Since the subarray has $ n $ elements, the time to partition is $ \\Theta(n) $: linear-time partitioning."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning</a>.
# Article is at (xbdc49207) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Partitioning steps"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning</a>.
# Article is at (xbdc49207) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The real work of quicksort happens during the divide step, which partitions subarray `array[p..r]` around a pivot drawn from the subarray. Although we can choose any element in the subarray as the pivot, it's easy to implement partitioning if we choose the rightmost element of the subarray, `A[r]`, as the pivot."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning</a>.
# Article is at (xbdc49207) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/partition_example.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning</a>.
# Article is at (xbdc49207) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/partition_greater.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/linear-time-partitioning</a>.
# Article is at (xbdc49207) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/partition_less_equal.png"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort</a>
# Title of tutorial article (x98076426) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Overview of quicksort"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort</a>.
# Article is at (x98076426) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "    As a matter of practice, we'll always choose the rightmost element in the subarray, `array[r]`, as the pivot. So, for example, if the subarray consists of [9, 7, 5, 11, 12, 2, 14, 3, 10, 6], then we choose 6 as the pivot. After partitioning, the subarray might look like [5, 2, 3, 6, 12, 7, 14, 9, 10, 11]. Let `q` be the index of where the pivot ends up."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort</a>.
# Article is at (x98076426) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "    Think about our example. After recursively sorting the subarrays to the left and right of the pivot, the subarray to the left of the pivot is [2, 3, 5], and the subarray to the right of the pivot is [7, 9, 10, 11, 12, 14]. So the subarray has [2, 3, 5], followed by 6, followed by [7, 9, 10, 11, 12, 14]. The subarray is sorted."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort</a>.
# Article is at (x98076426) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "1.  **Divide** by choosing any element in the subarray `array[p..r]`. Call this element the **pivot**. Rearrange the elements in `array[p..r]` so that all other elements in `array[p..r]` that are less than or equal to the pivot are to its left and all elements in `array[p..r]` are to the pivot's right. We call this procedure **partitioning**. At this point, it doesn't matter what order the elements to the left of the pivot are in relative to each other, and the same holds for the elements to the right of the pivot. We just care that each element is somewhere on the correct side of the pivot."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort</a>.
# Article is at (x98076426) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "2.  **Conquer** by recursively sorting the subarrays `array[p..q-1]` (all elements to the left of the pivot, which must be less than or equal to the pivot) and `array[q+1..r]` (all elements to the right of the pivot, which must be greater than the pivot)."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort</a>.
# Article is at (x98076426) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "3.  **Combine** by doing nothing. Once the conquer step recursively sorts, we are done. Why? All elements to the left of the pivot, in `array[p..q-1]`, are less than or equal to the pivot and are sorted, and all elements to the right of the pivot, in `array[q+1..r]`, are greater than the pivot and are sorted. The elements in `array[p..r]` can't help but be sorted!"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort</a>.
# Article is at (x98076426) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Here is how quicksort uses divide-and-conquer. As with merge sort, think of sorting a subarray `array[p..r]`, where initially the subarray is `array[0..n-1]`."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort</a>.
# Article is at (x98076426) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Here is how the entire quicksort algorithm unfolds. Array locations in blue have been pivots in previous recursive calls, and so the values in these locations will not be examined or moved again:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort</a>.
# Article is at (x98076426) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let's go back to the conquer step and walk through the recursive sorting of the subarrays. After the first partition, we have have subarrays of [5, 2, 3] and [12, 7, 14, 9, 10, 11], with 6 as the pivot."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort</a>.
# Article is at (x98076426) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Like [merge sort](/merge-sort/), quicksort uses [divide-and-conquer](/merge-sort/a/divide-and-conquer-algorithms), and so it's a recursive algorithm. The way that quicksort uses divide-and-conquer is a little different from how merge sort does. In merge sort, the divide step does hardly anything, and all the real work happens in the combine step. Quicksort is the opposite: all the real work happens in the divide step. In fact, the combine step in quicksort does absolutely nothing."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort</a>.
# Article is at (x98076426) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Quicksort"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort</a>.
# Article is at (x98076426) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Quicksort has a couple of other differences from merge sort. Quicksort works in place. And its worst-case running time is as bad as selection sort's and insertion sort's: $ \\Theta(n^2) $. But its average-case running time is as good as merge sort's: $ \\Theta(n \\lg n) $. So why think about quicksort when merge sort is at least as good? That's because the constant factor hidden in the big-Θ notation for quicksort is quite good. In practice, quicksort outperforms merge sort, and it significantly outperforms selection sort and insertion sort."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort</a>.
# Article is at (x98076426) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The base cases are subarrays of fewer than two elements, just as in merge sort. In merge sort, you never see a subarray with no elements, but you can in quicksort, if the other elements in the subarray are all less than the pivot or all greater than the pivot."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort</a>.
# Article is at (x98076426) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "To sort the subarray [12, 7, 14, 9, 10, 11], we choose 11 as the pivot, resulting in [7, 9, 10] to the left of the pivot and [14, 12] to the right. After these subarrays are sorted, we have [7, 9, 10], followed by 11, followed by [12, 14]."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort</a>.
# Article is at (x98076426) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "To sort the subarray [5, 2, 3], we choose 3 as the pivot. After partitioning, we have [2, 3, 5]. The subarray [2], to the left of the pivot, is a base case when we recurse, as is the subarray [5], to the right of the pivot."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort">http://translate.khanacademy.org/computing/computer-science/algorithms/quick-sort/a/overview-of-quicksort</a>.
# Article is at (x98076426) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/qsort_recursion.png"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/computing-powers-of-a-number">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/computing-powers-of-a-number</a>
# Title of tutorial article (x20911059) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Computing powers of a number"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/computing-powers-of-a-number">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/computing-powers-of-a-number</a>.
# Article is at (x20911059) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   The base case is when $ n = 0 $, and $ x^0 = 1 $.\n"
"*   If $ n $ is positive and even, recursively compute $ y = x^{n/2} $, and then $ x^n = y \\cdot y $. Notice that you can get away with making just one recursive call in this case, computing $ x^{n/2} $ just once, and then you multiply the result of this recursive call by itself.\n"
"*   If $ n $ is positive and odd, recursively compute $ x^{n-1} $, so that the exponent either is 0 or is positive and even. Then, $ x^n = x^{n-1} \\cdot x $.\n"
"*   If $ n $ is negative, recursively compute $ x^{-n} $, so that the exponent becomes positive. Then, $ x^n = 1 / x^{-n} $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/computing-powers-of-a-number">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/computing-powers-of-a-number</a>.
# Article is at (x20911059) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Although JavaScript has a builtin `pow` function that computes powers of a number, you can write a similar function recursively, and it can be very efficient. The only hitch is that the exponent has to be an integer."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/computing-powers-of-a-number">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/computing-powers-of-a-number</a>.
# Article is at (x20911059) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Putting these observations together, we get the following recursive algorithm for computing $ x^n $:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/computing-powers-of-a-number">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/computing-powers-of-a-number</a>.
# Article is at (x20911059) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "So now let's see what happens when $ n $ is positive. Let's start by recalling that when you multiply powers of $ x $, you add the exponents: $ x^a \\cdot x^b = x^{a+b} $ for any base $ x $ and any exponents $ a $ and $ b $. Therefore, if $ n $ is positive and even, then $ x^n = x^{n/2} \\cdot x^{n/2} $. If you were to compute $ y = x^{n/2} $ recursively, then you could compute $ x^n $ as $ y \\cdot y $. What if $ n $ is positive and odd? Then $ x^n = x^{n-1} \\cdot x $, and $ n-1 $ either is 0 or is positive and even. We just saw how to compute powers of $ x $ when the exponent either is 0 or is positive and even. Therefore, you could compute $ x^{n-1} $ recursively, and then use this result to compute $ x^n = x^{n-1} \\cdot x $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/computing-powers-of-a-number">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/computing-powers-of-a-number</a>.
# Article is at (x20911059) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Suppose you want to compute $ x^n $, where $ x $ is any real number and $ n $ is any integer. It's easy if $ n $ is 0, since $ x^0 = 1 $ no matter what $ x $ is. That's a good base case."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/computing-powers-of-a-number">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/computing-powers-of-a-number</a>.
# Article is at (x20911059) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "What about when $ n $ is negative? Then $ x^n = 1 / x^{-n} $, and the exponent $ -n $ is positive. So you can compute $ x^{-n} $ recursively and take its reciprocal."
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/properties-of-recursive-algorithms">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/properties-of-recursive-algorithms</a>
# Title of tutorial article (xf5eda013) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Properties of recursive algorithms"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/properties-of-recursive-algorithms">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/properties-of-recursive-algorithms</a>.
# Article is at (xf5eda013) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"1.  Each recursive call should be on a smaller instance of the same problem, that is, a smaller subproblem.\n"
"2.  The recursive calls must eventually reach a base case, which is solved without further recursion."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/properties-of-recursive-algorithms">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/properties-of-recursive-algorithms</a>.
# Article is at (xf5eda013) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "> To solve a problem, solve a subproblem that is a smaller instance of the same problem, and then use the solution to that smaller instance to solve the original problem."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/properties-of-recursive-algorithms">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/properties-of-recursive-algorithms</a>.
# Article is at (xf5eda013) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Even if you can guarantee that the value of $ n $ is not negative, you can still get into trouble if you don't make the subproblems progressively smaller. Here's an example. Let's take the formula $ n! = n \\cdot (n-1)! $ and divide both sides by $ n $, giving $ n! / n = (n-1)! $. Let's make a new variable, $ m $, and set it equal to $ n+1 $. Since our formula applies to any positive number, let's substitute $ m $ for $ n $, giving $ m! / m = (m-1)! $. Since $ m = n+1 $, we now have $ (n+1)! / (n+1) = (n+1-1)! $. Switching sides and noting that $ n+1-1 = n $ gives us $ n! = (n+1)! / (n+1) $. This formula leads us to believe that you can compute $ n! $ by first computing $ (n+1)! $ and then dividing the result by $ n+1 $. But to compute $ (n+1)! $, you would have to compute $ (n+2)! $, then $ (n+3)! $, and so on. You would never get to the base case of 0\\. Why not? Because each recursive subproblem asks you to compute the value of a _larger_ number, not a _smaller_ number. If $ n $ is positive, you would never hit the base case of 0."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/properties-of-recursive-algorithms">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/properties-of-recursive-algorithms</a>.
# Article is at (xf5eda013) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "For example, what if we tried to compute the factorial of a negative number using our recursive method? To compute $ (-1)! $, you would first try to compute $ (-2)! $, so that you could multiply the result by $ -1 $. But to compute $ (-2)! $, you would first try to compute $ (-3)! $, so that you could multiply the result by $ -2 $. And then you would try to compute $ (-3)! $, and so on. Sure, the numbers are getting smaller, but they're also getting farther and farther away from the base case of computing $ 0! $. You would _never_ get an answer."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/properties-of-recursive-algorithms">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/properties-of-recursive-algorithms</a>.
# Article is at (xf5eda013) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Here is the basic idea behind recursive algorithms:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/properties-of-recursive-algorithms">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/properties-of-recursive-algorithms</a>.
# Article is at (xf5eda013) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "In order for a recursive algorithm to work, the smaller subproblems must eventually arrive at the base case. When computing $ n! $, the subproblems get smaller and smaller until we compute $ 0! $. You _must_ make sure that eventually, you hit the base case."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/properties-of-recursive-algorithms">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/properties-of-recursive-algorithms</a>.
# Article is at (xf5eda013) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let's go back to the Russian dolls. Although they don't figure into any algorithms, you can see that each doll encloses all the smaller dolls (analogous to the recursive case), until the smallest doll that does not enclose any others (like the base case)."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/properties-of-recursive-algorithms">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/properties-of-recursive-algorithms</a>.
# Article is at (xf5eda013) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We can distill the idea of recursion into two simple rules:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/properties-of-recursive-algorithms">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/properties-of-recursive-algorithms</a>.
# Article is at (xf5eda013) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "When computing $ n! $, we solved the problem of computing $ n! $ (the original problem) by solving the subproblem of computing the factorial of a smaller number, that is, computing $ (n-1)! $ (the smaller instance of the same problem), and then using the solution to the subproblem to compute the value of $ n! $."
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion</a>
# Title of tutorial article (x21570e30) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Recursion"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion</a>.
# Article is at (x21570e30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "And once more:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion</a>.
# Article is at (x21570e30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "And you can keep going. Eventually you find the teeniest Russian doll. It is just one piece, and so it does not open:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion</a>.
# Article is at (x21570e30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Have you ever seen a set of Russian dolls? At first, you see just one figurine, usually painted wood, that looks something like this:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion</a>.
# Article is at (x21570e30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Photo of all the Russian dolls"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion</a>.
# Article is at (x21570e30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Photo of first Russian doll"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion</a>.
# Article is at (x21570e30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Photo of fourth Russian doll inside third Russian doll"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion</a>.
# Article is at (x21570e30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Photo of second Russian doll inside first Russian doll"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion</a>.
# Article is at (x21570e30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Photo of third Russian doll inside second Russian doll, next to first Russian doll"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion</a>.
# Article is at (x21570e30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Recursion has many, many applications. In this module, we'll see how to use recursion to compute the factorial function, to determine whether a word is a palindrome, to compute powers of a number, to draw a type of fractal, and to solve the ancient Towers of Hanoi problem. Later modules will use recursion to solve other problems, including sorting."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion</a>.
# Article is at (x21570e30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We started with one big Russian doll, and we saw smaller and smaller Russian dolls, until we saw one that was so small that it could not contain another."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion</a>.
# Article is at (x21570e30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "What do Russian dolls have to do with algorithms? Just as one Russian doll has within it a smaller Russian doll, which has an even smaller Russian doll within it, all the way down to a tiny Russian doll that is too small to contain another, we'll see how to design an algorithm to solve a problem by solving a smaller instance of the same problem, unless the problem is so small that we can just solve it directly. We call this technique **recursion**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion</a>.
# Article is at (x21570e30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "You can remove that doll and separate its top and bottom halves. And you see yet another, even smaller, doll:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion</a>.
# Article is at (x21570e30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "You can remove the top half of the first doll, and what do you see inside? Another, slightly smaller, Russian doll!"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion</a>.
# Article is at (x21570e30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/doll1.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion</a>.
# Article is at (x21570e30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/doll11.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion</a>.
# Article is at (x21570e30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/doll2.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion</a>.
# Article is at (x21570e30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/doll3.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursion</a>.
# Article is at (x21570e30) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/doll4.jpg"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursive-factorial">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursive-factorial</a>
# Title of tutorial article (x22219192) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Recursive factorial"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursive-factorial">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursive-factorial</a>.
# Article is at (x22219192) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   If $ n = 0 $, then declare that $ n! = 1 $.\n"
"*   Otherwise, $ n $ must be positive. Solve the subproblem of computing $ (n-1)! $, multiply this result by $ n $, and declare $ n! $ equal to the result of this product."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursive-factorial">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursive-factorial</a>.
# Article is at (x22219192) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   You can compute 5! as $ 5 \\cdot 4! $.\n"
"*   Now you need to solve the subproblem of computing 4!, which you can compute as $ 4 \\cdot 3 $!.\n"
"*   Now you need to solve the subproblem of computing 3!, which is $ 3 \\cdot 2! $.\n"
"*   Now 2!, which is $ 2 \\cdot 1! $.\n"
"*   Now you need to compute 1!. You could say that 1! equals 1, because it's the product of all the integers from 1 through 1. Or you can apply the formula that $ 1! = 1 \\cdot 0! $. Let's do it by applying the formula.\n"
"*   We defined 0! to equal 1.\n"
"*   Now you can compute $ 1! = 1 \\cdot 0! = 1 $.\n"
"*   Having computed $ 1! = 1 $, you can compute $ 2! = 2 \\cdot 1! = 2 $.\n"
"*   Having computed $ 2! = 2 $, you can compute $ 3! = 3 \\cdot 2! = 6 $.\n"
"*   Having computed $ 3! = 6 $, you can compute $ 4! = 4 \\cdot 3! = 24 $.\n"
"*   Finally, having computed $ 4! = 24 $, you can finish up by computing $ 5! = 5 \\cdot 4! = 120 $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursive-factorial">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursive-factorial</a>.
# Article is at (x22219192) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "For positive values of $ n $, let's write $ n! $ as we did before, as a product of numbers starting from $ n $ and going down to 1: $ n! $ = $ n \\cdot (n-1) \\cdots 2 \\cdot 1 $. But notice that $ (n-1) \\cdots 2 \\cdot 1 $ is another way of writing $ (n-1)! $, and so we can say that $ n! = n \\cdot (n-1)! $. Did you see what we just did? We wrote $ n! $ as a product in which one of the factors is $ (n-1)! $. We said that you can compute $ n! $ by computing $ (n-1)! $ and then multiplying the result of computing $ (n-1)! $ by $ n $. _You can compute the factorial function on $ n $ by first computing the factorial function on $ n-1 $._ We say that computing $ (n-1)! $ is a **subproblem** that we solve to compute $ n $!."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursive-factorial">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursive-factorial</a>.
# Article is at (x22219192) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let's look at an example: computing 5!."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursive-factorial">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursive-factorial</a>.
# Article is at (x22219192) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "So now we have another way of thinking about how to compute the value of $ n! $, for all nonnegative integers $ n $:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursive-factorial">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/recursive-factorial</a>.
# Article is at (x22219192) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "When we're computing $ n! $ in this way, we call the first case, where we immediately know the answer, the **base case**, and we call the second case, where we have to compute the same function but on a different value, the **recursive case**."
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-factorial-function">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-factorial-function</a>
# Title of tutorial article (x3396735b) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "The factorial function"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-factorial-function">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-factorial-function</a>.
# Article is at (x3396735b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Another use for the factorial function is to count how many ways you can choose things from a collection of things. For example, suppose you are going on a trip and you want to choose which T-shirts to take. Let's say that you own $ n $ T-shirts but you have room to pack only $ k $ of them. How many different ways can you choose $ k $ T-shirts from a collection of $ n $ T-shirts? The answer (which we won't try to justify here) turns out to be $ n! / (k! \\cdot (n-k)!) $. So the factorial function can be pretty useful. You can learn more about [permutations and combinations here](/v/permutations), but you don't need to understand them to implement a factorial algorithm."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-factorial-function">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-factorial-function</a>.
# Article is at (x3396735b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "For our first example of recursion, let's look at how to compute the factorial function. We indicate the factorial of $ n $ by $ n! $. It's just the product of the integers 1 through $ n $. For example, 5! equals $ 1 \\cdot 2 \\cdot 3 \\cdot 4 \\cdot 5 $, or 120\\. (Note: Wherever we're talking about the factorial function, all exclamation points refer to the factorial function and are not for emphasis.)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-factorial-function">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-factorial-function</a>.
# Article is at (x3396735b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "So now we have a way to think about $ n! $. It equals 1 when $ n = 0 $, and it equals $ 1 \\cdot 2 \\cdots (n-1) \\cdot n $ when $ n $ is positive."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-factorial-function">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-factorial-function</a>.
# Article is at (x3396735b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The factorial function is defined for all positive integers, along with 0\\. What value should 0! have? It's the product of all integers greater than or equal to 1 and less than or equal to 0\\. But there are no such integers. Therefore, we define 0! to equal the identity for multiplication, which is 1\\. (Defining 0! = 1 meshes nicely with the formula for choosing $ k $ things out of $ n $ things. Suppose that we want to know how many ways there are to choose $ n $ things out of $ n $ things. That's easy, because there is only one way: choose all $ n $ things. So now we know that, using our formula, $ n! / (n! \\cdot (n-n)!) $ should equal 1\\. But $ (n-n)! $ is 0!, so now we know that $ n! / (n! \\cdot 0!) $ should equal 1\\. If we cancel out the $ n! $ in both the numerator and denominator, we see that $ 1/(0!) $ should equal 1, and it does because 0! equals 1.)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-factorial-function">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-factorial-function</a>.
# Article is at (x3396735b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "You might wonder why we would possibly care about the factorial function. It's very useful for when we're trying to count how many different orders there are for things or how many different ways we can combine things. For example, how many different ways can we arrange $ n $ things? We have $ n $ choices for the first thing. For each of these $ n $ choices, we are left with $ n-1 $ choices for the second thing, so that we have $ n \\cdot (n-1) $ choices for the first two things, in order. Now, for each of these first two choices, we have $ n-2 $ choices for the third thing, giving us $ n \\cdot (n-1) \\cdot (n-2) $ choices for the first three things, in order. And so on, until we get down to just two things remaining, and then just one thing remaining. Altogether, we have $ n \\cdot (n-1) \\cdot (n-2) \\cdots 2 \\cdot 1 $ ways that we can order $ n $ things. And that product is just $ n! $ ($ n $ factorial), but with the product written going from $ n $ down to 1 rather than from 1 up to $ n $."
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>
# Title of tutorial article (x6a6b514f) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "The Sierpinski gasket"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>
# (KA_SOURCE_TREE: lol)
# (format: text)
#: intl/datastore:1
msgid "The Sierpinksi gasket"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# Article is at (x6a6b514f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   Determine how small the square is. If it's small enough to be a base case, then just fill in the square. You get to pick how small \"small enough\" is.\n"
"*   Otherwise, divide the square into upper left, upper right, lower right, and lower left squares. Recursively \"solve\" three subproblems:\n"
"    1.  Draw a Sierpinski gasket in the upper left square.\n"
"    2.  Draw a Sierpinski gasket in the upper right square.\n"
"    3.  Draw a Sierpinski gasket in the lower right square.You need to make not just one, but three recursive calls. That is why we consider drawing a Sierpinski gasket to exhibit multiple recursion."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# Article is at (x6a6b514f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "As you can see, it's a collection of little squares drawn in a particular pattern within a square region. Here's how to draw it. Start with the full square region, and divide it into four sections like so:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# Article is at (x6a6b514f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Full Sierpinski gasket"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# Article is at (x6a6b514f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Keep going. Divide every square with an × into four sections, and place an × in the top left, top right, and bottom right squares, but never the bottom left."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# Article is at (x6a6b514f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Once the squares get small enough, stop dividing. If you fill in each square with an × and forget about all the other squares, you get the Sierpinski gasket. Here it is once again:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# Article is at (x6a6b514f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Sierpinski gasket 16 by 16"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# Article is at (x6a6b514f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Sierpinski gasket 2 by 2"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# Article is at (x6a6b514f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Sierpinski gasket 32 by 32"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# Article is at (x6a6b514f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Sierpinski gasket 4 by 4"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# Article is at (x6a6b514f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Sierpinski gasket 64 by 64"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# Article is at (x6a6b514f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Sierpinski gasket 8 by 8"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# Article is at (x6a6b514f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "So far, the examples of recursion that we've seen require you to make one recursive call each time. But sometimes you need to make multiple recursive calls. Here's a good example, a mathematical construct that is a fractal known as a **Sierpinski gasket**:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# Article is at (x6a6b514f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Take the three squares with an × through them—the top left, top right, and bottom right—and divide them into four sections in the same way:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# Article is at (x6a6b514f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "To summarize, here is how to draw a Sierpinski gasket in a square:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# Article is at (x6a6b514f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "You can choose any three of the four squares in which you recursively draw Sierpinski gaskets. The result will just come out rotated by some multiple of 90 degrees from the drawing above. (If you recursively draw Sierpinski gaskets in any other number of the squares, you don't get an interesting result.) Try commenting and uncommenting some of the recursive calls to get rotated gaskets:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# Article is at (x6a6b514f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/1ea1273d2a05dc8c5e71e071faac2c768d3b7389.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# Article is at (x6a6b514f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/3245c7f409cc2b05db1d793a37ec46b9084e6a7a.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# Article is at (x6a6b514f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/5a9680906f1a9b37ebb26630d612841df8295bbf.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# Article is at (x6a6b514f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/5ef0e024c7157e8a5772f0277d49d65e62c51da4.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# Article is at (x6a6b514f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/66af2c7607c76df1ecb6c276e10f8d24ed170343.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# Article is at (x6a6b514f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/a503fdb52fa057b9858b4c443c4bff38118b6eac.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# Article is at (x6a6b514f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/dfd834ca82cc24414aec63f2c86dc9690b19d840.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/sierpinski-1.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/sierpinski-2.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/sierpinski-3.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/sierpinski-4.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/sierpinski-5.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/sierpinski-6.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/the-sierpinksi-gasket</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/sierpinski-full-6.jpg"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/using-recursion-to-determine-whether-a-word-is-a-palindrome">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/using-recursion-to-determine-whether-a-word-is-a-palindrome</a>
# Title of tutorial article (x329fd477) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Using recursion to determine whether a word is a palindrome"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/using-recursion-to-determine-whether-a-word-is-a-palindrome">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/using-recursion-to-determine-whether-a-word-is-a-palindrome</a>.
# Article is at (x329fd477) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   If the first and last letters differ, then the string is not a palindrome.\n"
"*   Otherwise, the first and last letters are the same. Strip them from the string, and determine whether the string that remains is a palindrome. Take the answer for this smaller string and use it as the answer for the original string."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/using-recursion-to-determine-whether-a-word-is-a-palindrome">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/using-recursion-to-determine-whether-a-word-is-a-palindrome</a>.
# Article is at (x329fd477) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   If the string is made of no letters or just one letter, then it is a palindrome.\n"
"*   Otherwise, compare the first and last letters of the string."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/using-recursion-to-determine-whether-a-word-is-a-palindrome">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/using-recursion-to-determine-whether-a-word-is-a-palindrome</a>.
# Article is at (x329fd477) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "A **palindrome** is a word that is spelled the same forward and backward. For example, _rotor_ and _redder_ are palindromes, but _motor_ is not."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/using-recursion-to-determine-whether-a-word-is-a-palindrome">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/using-recursion-to-determine-whether-a-word-is-a-palindrome</a>.
# Article is at (x329fd477) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "How can you use recursion to determine whether a word is a palindrome? Let's start by understanding what's a base case. Consider the word _a_. It's a palindrome. In fact, we don't have to think of palindromes as actual words in the English language (or whatever language you'd like to consider). We can think of a palindrome as just any sequence of letters that reads the same forward and backward, such as _xyzyzyx_. We call a sequence of letters a **string**. So we can say that any string containing just one letter is by default a palindrome. Now, a string can contain no letters; we call a string of zero letters an **empty string**. An empty string is also a palindrome, since it \"reads\" the same forward and backward. So now let's say that any string containing _at most_ one letter is a palindrome. That's our base case: a string with exactly zero letters or one letter is a palindrome."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/using-recursion-to-determine-whether-a-word-is-a-palindrome">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/using-recursion-to-determine-whether-a-word-is-a-palindrome</a>.
# Article is at (x329fd477) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "How would we describe that in pseudocode?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/using-recursion-to-determine-whether-a-word-is-a-palindrome">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/using-recursion-to-determine-whether-a-word-is-a-palindrome</a>.
# Article is at (x329fd477) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "So here's how we can recursively determine whether a string is a palindrome. If the first and last letters differ, then declare that the string is not a palindrome. Otherwise, strip off the first and last letters, and determine whether the string that remains—the subproblem—is a palindrome. Declare the answer for the shorter string to be the answer for the original string. Once you get down to a string with no letters or just one letter, declare it to be a palindrome. Here's a visualization of that for two words that we discussed:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/using-recursion-to-determine-whether-a-word-is-a-palindrome">http://translate.khanacademy.org/computing/computer-science/algorithms/recursive-algorithms/a/using-recursion-to-determine-whether-a-word-is-a-palindrome</a>.
# Article is at (x329fd477) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "What if the string contains two or more letters? Here's where we'll have our recursive case. Consider the palindrome _rotor_. Its first and last letters are the same, and this trait must hold for any palindrome. On the other hand, if the first and last letters are _not_ the same, as in _motor_, then the string cannot possibly be a palindrome. So now we have a way to declare that a string is not a palindrome: when its first and last letters are different. We can think of this situation as another base case, since we have the answer immediately. Going back to when the first and last letters are the same, what does that tell us? The string _might_ be a palindrome. Then again, it might not be. In the string _rater_, the first and last letters are the same, but the string is not a palindrome. Suppose we strip off the first and last letters, leaving the string _ate_. Then the first and last letters of this remaining string are not the same, and so we know that _rater_ is not a palindrome."
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort</a>
# Title of tutorial article (xb7600ff3) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Analysis of selection sort"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort</a>.
# Article is at (xb7600ff3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Asymptotic running-time analysis for selection sort"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort</a>.
# Article is at (xb7600ff3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Side note: Computing summations from 1 to $ n $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort</a>.
# Article is at (xb7600ff3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "$ \\begin{align} (8 + 1) + (7 + 2) + (6 + 3) + (5 + 4) &= 9 + 9 + 9 + 9 \\\\ &= 4 \\cdot 9 \\\\ &= 36 \\ . \\end{align} $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort</a>.
# Article is at (xb7600ff3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"1.  Add the smallest and the largest number.\n"
"2.  Multiply by the number of pairs."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort</a>.
# Article is at (xb7600ff3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"1.  In the first call of `indexOfMinimum`, it has to look at every value in the array, and so the loop body in `indexOfMinimum` runs 8 times.\n"
"2.  In the second call of `indexOfMinimum`, it has to look at every value in the subarray from indices 1 to 7, and so the loop body in `indexOfMinimum` runs 7 times.\n"
"3.  In the third call, it looks at the subarray from indices 2 to 7; the loop body runs 6 times.\n"
"4.  In the fourth call, the subarray from indices 3 to 7; the loop body runs 5 times.\n"
"5.  …\n"
"6.  In the eighth and final call of `indexOfMimimum`, the loop body runs just 1 time."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort</a>.
# Article is at (xb7600ff3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"1.  The running time for all the calls to `indexOfMinimum`.\n"
"2.  The running time for all the calls to `swap`.\n"
"3.  The running time for the rest of the loop in the `selectionSort` function."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort</a>.
# Article is at (xb7600ff3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Adding up the running times for the three parts, we have $ \\Theta(n^2) $ for the calls to `indexOfMinimum`, $ \\Theta(n) $ for the calls to `swap`, and $ \\Theta(n) $ for the rest of the loop in `selectionSort`. The $ \\Theta(n^2) $ term is the most significant, and so we say that the running time of selection sort is $ \\Theta(n^2) $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort</a>.
# Article is at (xb7600ff3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "For example, let's say the whole array is of size 8 and think about how selection sort works."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort</a>.
# Article is at (xb7600ff3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "For part 1, the running time for all the calls to `indexOfMinimum`, we've already done the hard part. Each individual iteration of the loop in `indexOfMinimum` takes constant time. The number of iterations of this loop is $ n $ in the first call, then $ n-1 $, then $ n-2 $, and so on. We've seen that this sum, $ 1 + 2 + \\cdots + (n-1) + n $ is an arithmetic series, and it evaluates to $ (n+1)(n/2) $, or $ n^2/2 + n/2 $. Therefore, the total time for all calls to `indexOfMinimum` is some constant times $ n^2/2 + n/2 $. In terms of big-Θ notation, we don't care about that constant factor, nor do we care about the factor of 1/2 or the low-order term. The result is that the running time for all the calls to `indexOfMinimum` is $ \\Theta(n^2) $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort</a>.
# Article is at (xb7600ff3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "How do you compute the sum 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 quickly? Here's a trick. Let's add the numbers in a sneaky order. First, let's add 8 + 1, the largest and smallest values. We get 9\\. Then, let's add 7 + 2, the second-largest and second-smallest values. Interesting, we get 9 again. How about 6 + 3? Also 9\\. Finally, 5 + 4\\. Once again, 9! So what do we have?  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort</a>.
# Article is at (xb7600ff3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "How many lines of code are executed by a single call to `indexOfMinimum`? We have to account for the loop inside `indexOfMinimum`. How many times does this loop execute in a given call to `indexOfMinimum`? It depends on the size of the subarray that it's iterating over. If the subarray is the whole array (as it is on the first step), the loop body runs $ n $ times. If the subarray is of size 6, then the loop body runs 6 times."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort</a>.
# Article is at (xb7600ff3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "How many lines of code are executed by a single call to `swap`? In the usual implementation, it's three lines, so that each call to `swap` takes constant time."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort</a>.
# Article is at (xb7600ff3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "If we total up the number of times the loop body of `indexOfMinimum` runs, we get 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 = 36 times."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort</a>.
# Article is at (xb7600ff3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let's see how the $ \\Theta(n^2) $ running time affects the actual execution time. Let's say that selection sort takes approximately $ n^2/10^6 $ seconds to sort $ n $ values. Let's start with a fairly small value of $ n $, let's say $ n = 100 $. Then the running time of selection sort is about $ 100^2/10^6 = 1/100 $ seconds. That seems pretty fast. But what if $ n = 1000 $? Then selection sort takes about $ 1000^2/10^6 = 1 $ second. The array grew by a factor of 10, but the running time increased 100 times. What if $ n = 1{,}000{,}000 $? Then selection sort takes $ 1{,}000{,}000^2/10^6 = 1{,}000{,}000 $ seconds, which is a little more than 11.5 _days_. Increasing the array size by a factor of 1000 increases the running time a million times!"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort</a>.
# Article is at (xb7600ff3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Notice also that no case is particularly good or particularly bad for selection sort. The loop in `indexOfMinimum` will always make $ n^2 + n/2 $ iterations, regardless of the input. Therefore, we can say that selection sort runs in $ \\Theta(n^2) $ time in all cases."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort</a>.
# Article is at (xb7600ff3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Parts 2 and 3 are easy. We know that there are $ n $ calls to `swap`, and each call takes constant time. Using our [asymptotic notation](/computing/computer-science/algorithms/asymptotic-notation/a/asymptotic-notation), the time for all calls to `swap` is $ \\Theta(n) $. The rest of the loop in `selectionSort` is really just testing and incrementing the loop variable and calling `indexOfMinimum` and `swap`, and so that takes constant time for each of the $ n $ iterations, for another $ \\Theta(n) $ time."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort</a>.
# Article is at (xb7600ff3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Selection sort loops over indices in the array; for each index, selection sort calls `indexOfMinimum` and `swap`. If the length of the array is $ n $, there are $ n $ indices in the array."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort</a>.
# Article is at (xb7600ff3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Since each execution of the body of the loop runs two lines of code, you might think that $ 2 n $ lines of code are executed by selection sort. But it's not true! Remember that `indexOfMinimum` and `swap` are functions: when either is called, some lines of code are executed."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort</a>.
# Article is at (xb7600ff3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The total running time for selection sort has three parts:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort</a>.
# Article is at (xb7600ff3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "There were four pairs of numbers, each of which added up to 9\\. So here's the general trick to sum up any sequence of consecutive integers:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort</a>.
# Article is at (xb7600ff3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "What if the number of integers in the sequence is odd, so that you cannot pair them all up? It doesn't matter! Just count the unpaired number in the middle of the sequence as half a pair. For example, let's sum up 1 + 2 + 3 + 4 + 5\\. We have two full pairs (1 + 5 and 2 + 4, each summing to 6) and one \"half pair\" (3, which is half of 6), giving a total of 2.5 pairs. We multiply $ 2.5 \\cdot 6 = 15 $, and we get the right answer."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/analysis-of-selection-sort</a>.
# Article is at (xb7600ff3) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "What if the sequence to sum up goes from 1 to $ n $? We call this an **arithmetic series**. The sum of the smallest and largest numbers is $ n + 1 $. Because there are $ n $ numbers altogether, there are $ n/2 $ pairs (whether $ n $ is odd or even). Therefore, the sum of numbers from 1 to $ n $ is $ (n + 1)(n / 2) $, which equals $ n^2/2 + n/2 $. Try out this formula for $ n = 5 $ and $ n = 8 $."
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode</a>
# Title of tutorial article (xac576850) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Selection sort pseudocode"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode</a>.
# Article is at (xac576850) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Finding the index of the minimum element in a subarray"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode</a>.
# Article is at (xac576850) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"1.  Find the smallest card. Swap it with the first card.\n"
"2.  Find the second-smallest card. Swap it with the second card.\n"
"3.  Find the third-smallest card. Swap it with the third card.\n"
"4.  Repeat finding the next-smallest card, and swapping it into the correct position until the array is sorted."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode</a>.
# Article is at (xac576850) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "After seeing it for yourself, what do you think about this algorithm? What parts of it seem to take the longest? How do you think it would perform on big arrays? Keep those questions in mind as you go through and implement this algorithm."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode</a>.
# Article is at (xac576850) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "It might be tricky to write code that found the index of the second-smallest value in an array. I'm sure you could do it, but there's a better way. Notice that since the smallest value has already been swapped into index 0, what we really want is to find the smallest value in the part of the array that starts at index 1\\. We call a section of an array a **subarray**, so that in this case, we want the index of the smallest value in the subarray that starts at index 1\\. For our example, if the full array is [4, 19, 18, 13, 10], then the smallest value in the subarray starting at index 1 is 10, and it has index 4 in the original array. So index 4 is the location of the second-smallest element of the full array."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode</a>.
# Article is at (xac576850) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "One of the steps in selection sort is to find the next-smallest card to put into its correct location. For example, if the array initially has values [13, 19, 18, 4, 10], we first need to find the index of the smallest value in the array. Since 4 is the smallest value, the index of the smallest value is 3."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode</a>.
# Article is at (xac576850) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Selection sort would swap the value at index 3 with the value at index 0, giving [4, 19, 18, 13, 10]. Now we need to find the index of the second-smallest value to swap into index 1\\."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode</a>.
# Article is at (xac576850) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "There are many different ways to sort the cards. Here's a simple one, called **selection sort**, possibly similar to how you sorted the cards above:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode</a>.
# Article is at (xac576850) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "This algorithm is called selection sort because it repeatedly _selects_ the next-smallest element and swaps it into place."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode</a>.
# Article is at (xac576850) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Try out that strategy in the next challenge, and then you'll have most of what you need to implement the whole selection sort algorithm."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/selection-sort-pseudocode</a>.
# Article is at (xac576850) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "You can see the algorithm for yourself below. Start by using \"Step\" to see each step of the algorithm, and then try \"Automatic\" once you understand it to see the steps all the way through."
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/sorting">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/sorting</a>
# Title of tutorial article (x0ef73e9a) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Sorting"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/sorting">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/sorting</a>.
# Article is at (x0ef73e9a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Even though JavaScript has a built-in sorting method, sorting is a great example of how there may be many ways to think about the same problem, some perhaps better than others. Understanding sorting is a traditional first step towards mastery of algorithms and computer science."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/sorting">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/sorting</a>.
# Article is at (x0ef73e9a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Sorting a list of items into ascending or descending order can help either a human or a computer find items on that list quickly, perhaps using an algorithm like binary search. JavaScript has a built-in sorting method. It works on arrays of numbers, or even on arrays of strings:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/sorting">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/sorting</a>.
# Article is at (x0ef73e9a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "What strategy did you use for sorting the cards? Did your strategy change as you sorted?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/sorting">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/sorting</a>.
# Article is at (x0ef73e9a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "You'll implement a particular sorting algorithm in a moment. But as a warmup, here is a sorting problem to play with. You can swap any pair of cards by clicking on one card, and then the other. Swap cards until the cards are sorted with smallest card on the left."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/sorting">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/sorting</a>.
# Article is at (x0ef73e9a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"```\n"
"var animals = [\"gnu\", \"zebra\", \"antelope\", \"aardvark\", \"yak\", \"iguana\"];\n"
"animals.sort();\n"
"println(animals);\n"
"```"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/sorting">http://translate.khanacademy.org/computing/computer-science/algorithms/sorting-algorithms/a/sorting</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"```\n"
"var animals = [\"gnu\", \"zebra\", \"antelope\", \"aardvark\", \"yak\", \"iguana\"];\n"
"animals.sort();\n"
"println(animals);\n"
"\n"
"```"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued</a>
# Title of tutorial article (x1bfeb631) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "Towers of Hanoi, continued"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued</a>.
# Article is at (x1bfeb631) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   Recursively solve the subproblem of moving disks 1 and 2 from peg B to the spare peg, peg A. (Move disk 1 from peg B to peg C; move disk 2 from peg B to peg A; move disk 1 from peg C to peg A.)\n"
"*   Now that disk 3 is exposed on peg B, move to it peg C.\n"
"*   Recursively solve the subproblem of moving disks 1 and 2 from peg A to peg C. (Move disk 1 from peg A to peg B; move disk 2 from peg A to peg C; move disk 1 from peg B to peg C.)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued</a>.
# Article is at (x1bfeb631) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   Recursively solve the subproblem of moving disks 1 through $ n-1 $ from whichever peg they start on to the spare peg.\n"
"*   Move disk $ n $ from the peg it starts on to the peg it's supposed to end up on.\n"
"*   Recursively solve the subproblem of moving disks 1 through $ n-1 $ from the spare peg to the peg they're supposed to end up on."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued</a>.
# Article is at (x1bfeb631) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   Recursively solve the subproblem of moving disks 1 through 3 from peg A to peg C, moving disks seven times.\n"
"*   Move disk 4 from peg A to peg B.\n"
"*   Recursively solve the subproblem of moving disks 1 through 3 from peg C to peg B, moving disks seven times."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued</a>.
# Article is at (x1bfeb631) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "And—you knew this question is coming—is there anything special about which pegs you moved disks 1 through 3 from and to? You could have moved them from any peg to any peg. For example, from peg B to peg C:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued</a>.
# Article is at (x1bfeb631) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "At this point, you might have picked up two patterns. First, you can solve the Towers of Hanoi problem recursively. If $ n = 1 $, just move disk 1\\. Otherwise, when $ n \\geq 2 $, solve the problem in three steps:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued</a>.
# Article is at (x1bfeb631) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Back to the monks. They're using $ n = 64 $ disks, and so they will need to move a disk $ 2^{64} - 1 $ times. These monks are nimble and strong. They can move one disk every second, night and day. How long is $ 2^{64} - 1 $ seconds? Using the rough estimate of 365.25 days per year (we're not accounting for skipping the leap year once every 400 years), that comes to 584,542,046,090.6263 years. That's 584+ billion years. The sun has only about another five to seven billion years left before it goes all supernova on us. So, yes, the world will end, but no matter how tenacious the monks may be, it will happen long before they can get all 64 disks onto peg B."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued</a>.
# Article is at (x1bfeb631) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "How about when $ n = 4 $? Because you can recursively solve the subproblem of moving disks 1 through 3 from any peg to any peg, you can solve the problem for $ n = 4 $:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued</a>.
# Article is at (x1bfeb631) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "More to the point, by moving disks 1 and 2 from peg A to peg C, you have recursively solved a subproblem: move disks 1 through $ n-1 $ (remember that $ n = 3 $) from peg A to peg C. Once you've solved this subproblem, you can move disk 3 from peg A to peg B:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued</a>.
# Article is at (x1bfeb631) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "No matter how you slice it, you can move disks 1 through 3 from any peg to any peg, moving disks seven times. Notice that you move disks three times for each of the two times that you recursively solve the subproblem of moving disks 1 and 2, plus one more move for disk 3."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued</a>.
# Article is at (x1bfeb631) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Now, to finish up, you need to recursively solve the subproblem of moving disks 1 through $ n-1 $ from peg C to peg B. Again, you agreed that you can do so in three steps. (Move disk 1 from peg C to peg A; move disk 2 from peg C to peg B; move disk 1 from peg A to peg B.) And you're done:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued</a>.
# Article is at (x1bfeb631) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Second, solving a problem for $ n $ disks requires $ 2^n - 1 $ moves. We've seen that it's true for $ n = 1 $ ($ 2^1 - 1 = 1 $, and we needed one move), $ n = 2 $ ($ 2^2 - 1 = 3 $, and three moves), $ n = 3 $ ($ 2^3 - 1 = 7 $, and seven moves), and $ n = 4 $ ($ 2^4 - 1 = 15 $, and 15 moves). If you can solve a problem for $ n-1 $ disks in $ 2^{n-1} - 1 $ moves, then you can solve a problem for $ n $ disks in $ 2^n - 1 $ moves: you need $ 2^{n-1} - 1 $ moves to recursively solve the first subproblem of moving disks 1 through $ n-1 $, one move to move disk $ n $, and another $ 2^{n-1} - 1 $ moves to recursively solve the second subproblem of moving disks 1 through $ n-1 $. If you add up the moves, you get $ 2^n - 1 $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued</a>.
# Article is at (x1bfeb631) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "This solution moves disks 15 times (7 + 1 + 7) and, yes, you can move disks 1 through 4 from any peg to any peg."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued</a>.
# Article is at (x1bfeb631) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Towers of Hanoi move 1, 3 disks"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued</a>.
# Article is at (x1bfeb631) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Towers of Hanoi move 2, 3 disks"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued</a>.
# Article is at (x1bfeb631) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Towers of Hanoi move 3, 3 disks"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued</a>.
# Article is at (x1bfeb631) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Wait a minute—it looks like two disks moved in one step, violating the first rule. But they did not move in one step. You agreed that you can move disks 1 and 2 from any peg to any peg, using three steps. The situation above represents what you have after three steps. (Move disk 1 from peg A to peg B; move disk 2 from peg A to peg B; move disk 1 from peg B to peg C.)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued</a>.
# Article is at (x1bfeb631) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "When you solved the Towers of Hanoi for three disks, you needed to expose the bottom disk, disk 3, so that you could move it from peg A to peg B. In order to expose disk 3, you needed to move disks 1 and 2 from peg A to the spare peg, which is peg C:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued</a>.
# Article is at (x1bfeb631) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Wondering how else we can use this algorithm, besides predicting the end of the world? Wikipedia lists [several interesting applications](http://en.wikipedia.org/wiki/Tower_of_Hanoi#Applications)."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued</a>.
# Article is at (x1bfeb631) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/hanoi-3-move1.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued</a>.
# Article is at (x1bfeb631) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/hanoi-3-move2.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi-continued</a>.
# Article is at (x1bfeb631) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/hanoi-3-move3.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi</a>.
# Article is at (x0f99c1d1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"1.  You may move only one disk at a time.\n"
"2.  No disk may ever rest atop a smaller disk. For example, if disk 3 is on a peg, then all disks below disk 3 must have numbers greater than 3."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi</a>.
# Article is at (x0f99c1d1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Finally, move disk 1 from peg C to peg B:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi</a>.
# Article is at (x0f99c1d1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "First, let's see how to solve the problem recursively. We'll start with a really easy case: one disk, that is, $ n = 1 $. The case of $ n = 1 $ will be our base case. You can always move disk 1 from peg A to peg B, because you know that any disks below it must be larger. And there's nothing special about pegs A and B. You can move disk 1 from peg B to peg C if you like, or from peg C to peg A, or from any peg to any peg. Solving the Towers of Hanoi problem with one disk is trivial, and it requires moving only the one disk one time."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi</a>.
# Article is at (x0f99c1d1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "First, move disk 1 from peg A to peg C:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi</a>.
# Article is at (x0f99c1d1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "How about two disks? How do you solve the problem when $ n = 2 $? You can do it in three steps. Here's what it looks like at the start:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi</a>.
# Article is at (x0f99c1d1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "If you've gone through the tutorial on [recursion](/recursive-algorithms/a/recursion/), then you're ready to see another problem where recursing multiple times really helps. It's called the **Towers of Hanoi**. You are given a set of three pegs and $ n $ disks, with each disk a different size. Let's name the pegs A, B, and C, and let's number the disks from 1, the smallest disk, to $ n $, the largest disk. At the outset, all $ n $ disks are on peg A, in order of decreasing size from bottom to top, so that disk $ n $ is on the bottom and disk 1 is on the top. Here's what the Towers of Hanoi looks like for $ n = 5 $ disks:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi</a>.
# Article is at (x0f99c1d1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Notice that we're using peg C as a spare peg, a place to put disk 1 so that we can get at disk 2\\. Now that disk 2—the bottommost disk—is exposed, move it to peg B:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi</a>.
# Article is at (x0f99c1d1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Sounds easy, right? It's not quite so simple, because you have to obey two rules:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi</a>.
# Article is at (x0f99c1d1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The goal is to move all $ n $ disks from peg A to peg B:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi</a>.
# Article is at (x0f99c1d1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "This solution takes three steps, and once again there's nothing special about moving the two disks from peg A to peg B. You can move them from peg B to peg C by using peg A as the spare peg: move disk 1 from peg B to peg A, then move disk 2 from peg B to peg C, and finish by moving disk 1 from peg A to peg C. Do you agree that you can move disks 1 and 2 from any peg to any peg in three steps? (Say \"yes.\")"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi</a>.
# Article is at (x0f99c1d1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Towers of Hanoi final configuration 5 disks"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi</a>.
# Article is at (x0f99c1d1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Towers of Hanoi initial configuration 2 disks"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi</a>.
# Article is at (x0f99c1d1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Towers of Hanoi initial configuration 5 disks"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi</a>.
# Article is at (x0f99c1d1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Towers of Hanoi move 1, 2 disks"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi</a>.
# Article is at (x0f99c1d1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Towers of Hanoi move 2, 2 disks"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi</a>.
# Article is at (x0f99c1d1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Towers of Hanoi move 3, 2 disks"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi</a>.
# Article is at (x0f99c1d1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "You might think that this problem is not terribly important. _Au contraire!_ Legend has it that somewhere in Asia (Tibet, Vietnam, India—pick which legend on the Internet you like), monks are solving this problem with a set of 64 disks, and—so the story goes—the monks believe that once they finish moving all 64 disks from peg A to peg B according to the two rules, the world will end. If the monks are correct, should we be panicking in the streets?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi</a>.
# Article is at (x0f99c1d1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/hanoi-2-init.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi</a>.
# Article is at (x0f99c1d1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/hanoi-2-move1.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi</a>.
# Article is at (x0f99c1d1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/hanoi-2-move2.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi</a>.
# Article is at (x0f99c1d1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/hanoi-2-move3.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi</a>.
# Article is at (x0f99c1d1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/hanoi-5-final.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi">http://translate.khanacademy.org/computing/computer-science/algorithms/towers-of-hanoi/a/towers-of-hanoi</a>.
# Article is at (x0f99c1d1) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://s3.amazonaws.com/ka-cs-algorithms/hanoi-5-init.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes</a>.
# Article is at (xeaa71f01) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**[[☃ image 1]]**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes</a>.
# Article is at (xeaa71f01) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "A _codebook_ is simply a list of these mappings. Codebooks have been around ever [since we began writing](/math/applied-math/informationtheory/info-theory/v/language-of-coins-2-8--proto-writing). Just remember,_a code requires a codebook_."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes</a>.
# Article is at (xeaa71f01) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Did they stumble around for an answer? For most people, it’s as if you asked them what the difference is between mix and blend. Tough question. Luckily, we have a video on [Morse Code](https://www.youtube.com/watch?feature=player_embedded&v=xcjgm6ctzAw) which introduces the idea of a **codebook**—check it out! In the video we see how telegraph operators could save time by mapping entire sentences to shorter words."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes</a>.
# Article is at (xeaa71f01) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Here, the word accountant is code for \"Come at once. Do not delay.\" A code is a mapping from some meaningful unit—such as a word, sentence, or phrase— into something else—usually a shorter group of symbols. For example, we could make up a code where the word apple is written as 67\\. Generally codes are ways of saving time, and when sending messages around the world, time is money."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes</a>.
# Article is at (xeaa71f01) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "In this case, we don’t need a codebook. Instead, we follow a series of instructions—shift each letter by a certain number—also known as an **algorithm**. The algorithm requires one piece of shared information known as a **key. I** n the above example the key is 3\\. This shared key is required for two parties to **encrypt,** HELLO = KHOOR, and **decrypt,** KHOOR=HELLO, messages."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes</a>.
# Article is at (xeaa71f01) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Most importantly, ciphers do not involve meaning. Instead they are mechanical operations, known as algorithms, that are performed on individual or small chunks of letters. For example, in the [Caesar Cipher](/math/applied-math/cryptography/crypt/v/caesar-cipher) we saw how each letter in the alphabet was mapped to a different letter: A=D,  B=E, and C=F, according to a specific shift, in this case three. This kind of cipher is known as a **shift cipher**. Review how this works using the interactive tool below:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes</a>.
# Article is at (xeaa71f01) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Now, let’s review the mechanics involved in the Caesar Cipher in the next exercise."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes</a>.
# Article is at (xeaa71f01) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Okay, so what about _ciphers_?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes</a>.
# Article is at (xeaa71f01) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "So back to our question: What is the difference between codes and ciphers? Codes generally operate on _**semantics,**_ meaning, while ciphers operate on _**syntax**,_ symbols. A code is stored as a mapping in a codebook, while ciphers transform individual symbols according to an algorithm."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes</a>.
# Article is at (xeaa71f01) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "To begin, let’s make sure we understand the difference between a **cipher** and a **code**. Actually, I dare you to get up and go ask someone the same question right now. While you do that I’ll wait here and admire this Lorenz _[cipher machine](/computing/computer-science/cryptography/crypt/v/case-study-ww2-encryption-machines)_..."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes</a>.
# Article is at (xeaa71f01) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/32804bee90e408d33395d2835cbadb92c4a38f2d.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes</a>.
# Article is at (xeaa71f01) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/6cf0b3e255d5dbd70e74517a3e31eb55614896a0.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes</a>.
# Article is at (xeaa71f01) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/6e2330944a4df348463913c1d78ed0bdc5f3b95e.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/ciphers-vs-codes</a>.
# Article is at (xeaa71f01) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/a9af6d8793d4bfcebe3ae259a549ac9e54f549d8.jpg"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/feedback">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/feedback</a>
# Title of tutorial article (x5dd3af77) on the pl stage
# Title of video <a href="http://translate.khanacademy.org/science/electrical-engineering/ee-amplifiers/ee-opamp/v/ee-feedback">http://translate.khanacademy.org/science/electrical-engineering/ee-amplifiers/ee-opamp/v/ee-feedback</a>
# Title of video (xb159b105) on the tr stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (KA_SOURCE_TREE: tr)
# (format: text)
#: intl/datastore:1
msgid "Feedback"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/feedback">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/feedback</a>.
# Article is at (x5dd3af77) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## What did you think of this lesson?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/feedback">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/feedback</a>.
# Article is at (x5dd3af77) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We hope you enjoyed this lesson. Please let us know what worked well and what could be improved in the discussion below. We will incorporate your feedback in future iterations."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# Article is at (xce66587a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## How to Encrypt:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# Article is at (xce66587a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## How to decrypt:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# Article is at (xce66587a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Modular Math and the Shift Cipher"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# Article is at (xce66587a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Why is the Shift Cipher insecure?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# Article is at (xce66587a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "(A=0, B=1, C=2, ...,Y=24, Z=25)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# Article is at (xce66587a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**1.** Convert the letter into the number that matches its order in the alphabet starting from 0, and call this number **X**.  \n"
"( A=0, B=1, C=2, ...,Y=24, Z=25)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# Article is at (xce66587a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**2.** Calculate: **Y** = **(X + K)** mod **26**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# Article is at (xce66587a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**3.** Convert the number **Y** into a letter that matches its order in the alphabet starting from 0.  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# Article is at (xce66587a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**For Example:** We agree with our friend to use the Shift Cipher with **key K=19** for our message.   \n"
"We encrypt the message **\"KHAN\",** as follows:​"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# Article is at (xce66587a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"1\\. Convert the letter into the number that matches its order in the alphabet starting from 0, and call this number Y.  \n"
"(A=0, B=1, C=2, ..., Y=24, Z=25)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# Article is at (xce66587a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "2\\. Calculate: **X= (Y - K)** mod **26**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# Article is at (xce66587a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"3\\. Convert the number **X** into a letter that matches its order in the alphabet starting from 0.  \n"
"(A=0, B=1, C=2, ..., Y=24, Z=25)  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# Article is at (xce66587a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "A cipher should prevent an attacker, who has a copy of the cipher text but does not know the key, from discovering the contents of the message. Since **we only have 26 choices for the key**, someone can easily __try all of the 26 keys__, one by one, until they recover the message. This type of attack is called a **brute force attack**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# Article is at (xce66587a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "For every letter in the cipher text **C** :"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# Article is at (xce66587a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "For every letter in the message **M** :"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# Article is at (xce66587a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Our friend now decodes the message using our agreed upon **key K=19.** As follows:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# Article is at (xce66587a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "So, after applying the Shift Cipher with key K=19 our message text \"**KHAN**\" gave us **cipher text** \"**DATG**\"."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# Article is at (xce66587a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "So, after decrypting the Shift Cipher with key K=19 our friend deciphers the cipher text \"**DATG**\" into the message text \"**KHAN**\"."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# Article is at (xce66587a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The Caesar Cipher is a type of **shift cipher**. Shift Ciphers work by using the modulo operator to encrypt and decrypt messages. The Shift Cipher has a **key K**, which is an **integer from 0 to 25**. We will only share this key with people that we want to see our message."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# Article is at (xce66587a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We give the message \"DATG\" to our friend."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# Article is at (xce66587a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/c662e89053dc7c3c9adce284aaeacec13896a629.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# Article is at (xce66587a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/fa440c215bd56259158b31d60207d8eb8d053502.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "# How to Encrypt:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "# How to decrypt:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "# Modular Math and the Shift Cipher"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/shift-cipher</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "# Why is the Shift Cipher insecure?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (x42cede74) on the pl stage.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## AND"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (x42cede74) on the pl stage.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## OR"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# Article is at (x42cede74) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Why must we use XOR?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (x42cede74) on the pl stage.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## XOR"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# Article is at (x42cede74) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "(drum roll please...)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# Article is at (x42cede74) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**Where did Charles go?**  \n"
"Notice that the plaintext only shines through **50% of the time**, which results in __noise__ as each pixel is **equally likely to be 0 or 1**.  \n"
"This image contains __no information__ about the original image. If we didn’t provide the shift sequence it would be **impossible** for you to reverse it back to the original image. You could try every possible sequence, but that would result in every possible image! How could you know it was Babbage? It's equally likely to be a picture of you **or anything else you can think of.**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# Article is at (x42cede74) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Does it really matter if we used AND, OR or XOR with the one-time pad? **The answer is yes**, and it’s extremely important to understand why. Recall from the previous article that **AND** has a __75%__ chance of outputting 0 and a __25%__ chance of outputting a 1\\. While **OR** has a __25%__ chance of outputting 0 and __75%__ chance of outputting 1\\. While the **XOR** operation has a **50% chance of outputting 0 or 1**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# Article is at (x42cede74) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Finally, let’s see what happens when we **XOR** each bit in the image file with a stream of **random bits.**  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# Article is at (x42cede74) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "First let’s see what happens when we **AND** each bit in the image file with a stream of **random bits.**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# Article is at (x42cede74) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Isn’t that interesting? Makes me smile everytime I see it!  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# Article is at (x42cede74) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "It contains thousands of tiny colored squares called pixels. Each pixel in this image can be represented as a 24 bit sequence as shown in the previous article. Let's call this our **plaintext image (or message).**  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# Article is at (x42cede74) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let’s look at a visual example to see the different scrambling effects of AND vs. OR vs. XOR  by **encrypting an image**. Here is a digital image of Charles Babbage:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# Article is at (x42cede74) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Next, let’s practice the XOR, OR and AND operators and __discover some more interesting properties__ while doing so....  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# Article is at (x42cede74) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Next let’s see what happens when we **OR** each bit in the image file with a stream of **random bits.**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# Article is at (x42cede74) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Notice most of the original message shines through. This happens anytime a random shift of 0 is applied, or when the plaintext is 1**:**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# Article is at (x42cede74) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Notice most of the original message shines through. This happens anytime a random shift of 1 is applied, or when the plaintext is 0:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# Article is at (x42cede74) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "[image credit](http://rwiggins.imgur.com/)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# Article is at (x42cede74) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/8b3c3061b2b5adfe124246b5afd3d5dc5e9a1f26.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# Article is at (x42cede74) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/a7d6986d33517de7081f6c21a4d532c46f886999.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# Article is at (x42cede74) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/e9f9a498083845b406a92905942d0e9968b96675.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# Article is at (x42cede74) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/fbb379650117c0466756796546097e97201e0fde.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "# AND"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "# OR"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "# Why must we use XOR?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-and-the-one-time-pad</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "# XOR"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Application of Random Shifts"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Encrypting Colors"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## The Ultimate Shift Cipher"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**0** AND **0** = **0**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**0** AND **1** = **0**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**0** OR **0** = **0**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**0** OR **1** = **1**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**0** XOR **0** = **0**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**0** XOR **1** = **1**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**1** AND **0** = **0**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**1** AND **1** = **1**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**1** OR **0** = **1**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**1** OR **1** = **1**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**1** XOR **0** = **1**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**1** XOR **1** = **0**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**Binary RGB representation of the Khan Academy green:**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**HTHTTHTHHHHTTHTTTTHTTHHH = 010110100001101111011000**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**Let's try it:** 100111001011010100111010 **XOR** 010110100001101111011000 = 110001101010111011100010"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**Let’s try it:** 100111001011010100111010 **AND** 010110100001101111011000 = **000110000001000100011000**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**Let’s try it:** 100111001011010100111010 **OR** 010110100001101111011000 = **110111101011111111111010**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Finally, let’s do a visual demonstration so that we can see the one-time pad in action. Then we can earn more energy points!"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "How do we turn a color into a number? Well, right now you are looking at HTML colors which are defined using the **RGB color model.** This is an additive model based on mixing some amount of **red, green and blue light**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "If you’ve seen the lesson on the [one-time pad](/math/applied-math/cryptography/crypt/v/one-time-pad), you know that it is the **ultimate shift cipher**. It involves the application of a __random list of shifts__ equal to the __length of the message__. It’s important to understand exactly how and why the one-time pad is unbreakable, or, [perfectly secret](/math/applied-math/cryptography/crypt/v/perfect-secrecy)."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let’s begin with a visual example by **encrypting a color** in the Khan Academy logo."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let’s think about how we could **apply this shift sequence** to our color in order to encrypt it using the **one-time pad**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"Notice it stores it as  RED=156, GREEN=181 & BLUE=58\\. If we express these numbers in binary we get:  \n"
"10011100 + 10110101 + 00111010. Which we can squeeze together as: 100111001011010100111010"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Now let’s say you generate a shift sequence using coin flips converted into binary as:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"The **AND** operator is also known as **logical conjunction**, and works just like multiplication.   \n"
"It outputs a 1 __only if all of the inputs are 1__. Here is the truth table:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The **OR** operator is also known as **logical disjunction**. It outputs a 1 whenever __one or more of its inputs are 1__. Here is the truth table:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The XOR operator outputs a 1 whenever the inputs __do not match__, which occurs when one of the two inputs is **exclusively true**. This is the same as [addition mod 2](/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction). Here is the truth table:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "This results in a light purple. Notice when we perform the **OR** operation on any binary sequence, the resulting sequence **cannot be smaller**. This eliminates many possibilities as it pushes the color **towards white**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "This results in a slightly darker purple as compared to the OR operation. Notice when we perform the XOR operation on a binary sequence, **the resulting sequence could be any possible sequence**. Given some encrypted color, all we know is the original color is “equally likely to be any color”. We have __no information that could improve a blind guess__ (1/16 million)."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "This results in a very dark purple. Notice when we perform the **AND** operation on any binary number, the resulting sequence **cannot be larger**. In our color example this eliminates many possible shades as it pushes the color **towards black**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "To make the one-time pad work we need to choose the correct operation so that the resulting sequence is equally likely to be any color. Let’s go over three different operations:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "To understand why, we need to first introduce the **AND**, **OR** and **XOR** bitwise operations. Specifically why XOR must be used when performing the one-time pad on computers. **Bitwise** simply means that we are dealing with individual bits, or **binary numbers**. In any modern/computerized encryption scheme we represent our symbols using binary digits. If you forgot why, you can check out this video on [Computer Memory](/computing/computer-science/cryptography/comp-number-theory/v/what-is-computer-memory-prime-adventure-part-7)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We can define exactly how much RED, GREEN and BLUE __using a number from 0-255__. Black is **all off** (0,0,0) while white is **all on** (255,255,255). In between there are **16 million possible colors** (256 * 256 * 256). Next let’s sample the green in the Khan Academy leaf in any image editing tool:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "color picker"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "dark purple"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "greeg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/18efafa5ed952aba9c4b68ec4d2bddf8c728acf6.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/34b685427d9412d63a65c1e4b7af54512f177e78.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/35fef6ec9e90c8e49b635b47de3b696e1480948c.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/4fd77e711aec9fd320397d98e8faa6245816879b.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/d364160c9504e23699aee1d50dab2da0fdde58a6.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/e0fbc40b02f215dac34ac9e419726388f705c878.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# Article is at (xf6dc668a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/ebe8c00a39360cfe1607ba6f35cc500bf7e6d2bb.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation">http://translate.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "# Application of Random Shifts"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction</a>.
# Article is at (x6138911e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**519697 = ? * ?**     (this is **hard** to compute)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction</a>.
# Article is at (x6138911e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**N** = 709 * 733 = **519697**     (this is **easy** to compute)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction</a>.
# Article is at (x6138911e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "For example, If I **randomly pick two large prime numbers** such as:**P1 = 709** and**P2 = 733**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction</a>.
# Article is at (x6138911e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Have you seen the lesson on [Modern Cryptography](/math/applied-math/cryptography/modern-crypt/v/the-fundamental-theorem-of-arithmetic-1)? At the last checkpoint this was the most popular question asked by users:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction</a>.
# Article is at (x6138911e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "I end up with two things: a large number (**519697**) and the prime factorization for that large number (**709 * 733**)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction</a>.
# Article is at (x6138911e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "If I ask you to **find the prime factorization,** where would you begin? Don't worry, everyone would struggle with this problem! To find the solution you must do a bunch of trial and error tests. **Multiplication is fast (easy) to compute while prime factorization is slow (hard)**. This simple fact forms the basis for the [RSA encryption scheme](/math/applied-math/cryptography/modern-crypt/v/intro-to-rsa-encryption)."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction</a>.
# Article is at (x6138911e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "If you think about it for a while, you'll eventually agree that this step requires, at minimum, the ability to **check if a randomly generated number** (such as  99194853094755497) **is prime or composite**. Do you have a button on your calculator to tell you this?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction</a>.
# Article is at (x6138911e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Now, imagine I _hide the prime factorization_ and only provide you with the following:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction</a>.
# Article is at (x6138911e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Though before going any further, we need to zoom in on the first step and ask ourselves an important question. When we say **\"randomly pick two large primes\"**, how do we do this quickly? **Is it an easy problem?**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction</a>.
# Article is at (x6138911e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "To find out, let's begin with a challenge..."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction</a>.
# Article is at (x6138911e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"[[☃ image 1]]  \n"
"I don't see one….**Why is this?**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction</a>.
# Article is at (x6138911e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"[[☃ image 1]]  \n"
"In the lesson we saw how [prime factorization](https://www.youtube.com/watch?feature=player_embedded&v=8CluknrLeys) played a fundamental role in the construction of **mathematical locks**. A mathematical lock (or **one-way function**) requires a procedure which is **easy to perform and hard to reverse**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction</a>.
# Article is at (x6138911e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "[click here](/math/applied-math/cryptography/modern-crypt/p/time-complexity-exploration) to see an animated graph demonstrating this difference"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction</a>.
# Article is at (x6138911e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "and multiply them to get: **N = P1 * P2**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction</a>.
# Article is at (x6138911e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/05f1d72b048ebba84dc96e1e6f02ba29ccd88457.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction</a>.
# Article is at (x6138911e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/07af5a62958d542a7fa7a7b2834d876ede508671.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction</a>.
# Article is at (x6138911e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/135a928c47bba698c6eb9580015387183b161772.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/comp-number-theory-introduction</a>.
# Article is at (x6138911e) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/9df89f48e72c47c84170f183477b5c1628307785.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division</a>.
# Article is at (xdcef66b7) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Building a better wall"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division</a>.
# Article is at (xdcef66b7) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Building a wall"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division</a>.
# Article is at (xdcef66b7) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Define the problem"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division</a>.
# Article is at (xdcef66b7) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Trial division algorithm"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division</a>.
# Article is at (xdcef66b7) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   Accept some input integer n\n"
"*   For **each integer x** from {2 ... sqrt(n)} check if **x divides n**\n"
"*   If you found a divisor then **n is composite** OR ELSE **n is prime**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division</a>.
# Article is at (xdcef66b7) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   Does **2** divide 49?     NO\n"
"*   Does **3** divide 49?     NO\n"
"*   Does **4** divide 49?     NO\n"
"*   Does **5** divide 49?     NO\n"
"*   Does **6** divide 49?     NO\n"
"*   Does **7** divide 49?    **YES**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division</a>.
# Article is at (xdcef66b7) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**Convince yourself of this:** __if we don't find a divisor of n after checking up to square root of n, then n must be prime__. Try to prove this to yourself (a proof is at the bottom of this article)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division</a>.
# Article is at (xdcef66b7) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**P is largest** when n has **exactly two divisors** which are **equal to each other**. This is known as a **square number** such as 9 (9 = 3*3) or 49 (49 = 7*7). To capture this worst case scenario we simply build our wall at the square root of n!"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division</a>.
# Article is at (xdcef66b7) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**That's it,** we are ready to move on. First let's summarize our trial division algorithm in plain english:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division</a>.
# Article is at (xdcef66b7) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Are you still checking? After the first few thousand tests I still haven't found a divisor. The key question is, **when can we stop checking and prove that n is prime?** (let's call this our **wall**) As a starting point, we know **our wall must be n-1** (since n divides n). If we check up to **2971215072** either __we find a divisor__ (which proves n is **composite**) OR __we don't__ (which proves n is **prime**)."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division</a>.
# Article is at (xdcef66b7) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "However what if I asked you if **2971215073 is prime?**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division</a>.
# Article is at (xdcef66b7) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "If you have programming experience you should open a CS[scratchpad](/cs/new) and try and get this function working. If not, you can proceed to the next step where I have provided a **working version** for you to use as a starting point. (FYI It __is possible__ to do this lesson without doing any programming)."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division</a>.
# Article is at (xdcef66b7) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let's think about what would be inside this machine to make it work. Machines can only follow a **sequence of steps** based on some instructions, known as an **algorithm**. To warm up, let's find out what algorithm is __inside your brain__. Answer the following question: **is 49 prime?**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division</a>.
# Article is at (xdcef66b7) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "No? How did you do that? You likely **searched for a divisor** of 49 which is **greater than 1 and less than 49**. If you haven't memorized your multiplication tables then you'd naturally follow this sequence:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division</a>.
# Article is at (xdcef66b7) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Remember that any composite integer n is build out of two or more primes n**= P * P …**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division</a>.
# Article is at (xdcef66b7) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "This would work, but **can we move our wall to save time**? Remember, that we are actually searching for the **first** (or smallest) **divisor**. Sometimes the smallest divisor could be 2, though it could also be much larger. This brings us to the key question: **how large could the smallest divisor be?**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division</a>.
# Article is at (xdcef66b7) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We found a divisor of 49 (**7**) which is **proof that 49 is composite.**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division</a>.
# Article is at (xdcef66b7) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We need to build a machine which can answer a simple yes/no question. Given an input integer n, is n prime?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division</a>.
# Article is at (xdcef66b7) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/45d7833a08b55f0adb5aa13f557d674238cb6d37.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division</a>.
# Article is at (xdcef66b7) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/7ab1c9b2094705c996a4c65212be5586abc8cad5.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division</a>.
# Article is at (xdcef66b7) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/a48b9e621e7ab413de175c21fc2e783cddd33b29.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division">http://translate.khanacademy.org/computing/computer-science/cryptography/comp-number-theory/a/trial-division</a>.
# Article is at (xdcef66b7) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/a7ac7e8e371d1f97e3ed3741c2b52527e9497c9a.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/checkpoint">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/checkpoint</a>.
# Article is at (x7bb92a83) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**Apprentice**   \n"
"This is for hard working users who are **still stuck, yet** **determined to finish**. We applaud your grit. You can continue on to Crypto Checkpoint 2 and **feel free to explore the hints**. The hints __will give away information__ related to the encryption. Hopefully these hints will lead you towards the solution after which you can go on to Crypto Checkpoint 3.  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/checkpoint">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/checkpoint</a>.
# Article is at (x7bb92a83) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**Master**  \n"
"This is for users who want to decrypt without any further hints. **No easy task**. You can continue grinding away and when you are ready, **answer all of the questions** in Crypto Checkpoint 2 & 3 **without using the hints**. Remember, hints usage can be tracked through your profile.   "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/checkpoint">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/checkpoint</a>.
# Article is at (x7bb92a83) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Congratulations, you've made it this far!  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/checkpoint">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/checkpoint</a>.
# Article is at (x7bb92a83) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Don't worry, some users report taking at least 3 weeks to work through the process __without any further hints__.  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/checkpoint">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/checkpoint</a>.
# Article is at (x7bb92a83) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The police are awaiting your information..."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/checkpoint">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/checkpoint</a>.
# Article is at (x7bb92a83) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "You have two ways to complete this challenge **Master** or **Apprentice**.  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/checkpoint">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/checkpoint</a>.
# Article is at (x7bb92a83) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "You likely haven't decrypted the secret message found in [The Discovery](/math/applied-math/applied_math_challenges/cryptochallenge/a/the-discovery) just yet.  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2</a>.
# Article is at (x17f1ba1b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Before leaving the hotel you notice something else..."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2</a>.
# Article is at (x17f1ba1b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Hint 1: [Polyalphabetic Review](/math/applied-math/cryptography/crypt/v/polyalphabetic-cipher)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2</a>.
# Article is at (x17f1ba1b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Hint 2: [Holbein the Younger, The Ambassadors](/humanities/renaissance-reformation/northern-renaissance1/holbein/v/hans-holbein-the-younger-the-ambassadors-1533)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2</a>.
# Article is at (x17f1ba1b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Klkbnqlcytfysryucocphgbdizzfcmjwkuchzyeswfogmmetwwossdchrzyldsbwnydednzwnefydthtddbojice"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2</a>.
# Article is at (x17f1ba1b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Looks like the impression from another message, so you try an old trick:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2</a>.
# Article is at (x17f1ba1b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Night is approaching, so you leave for home with **clue #2**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2</a>.
# Article is at (x17f1ba1b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Transcript of the above message:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2</a>.
# Article is at (x17f1ba1b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/30e35363c1a885d527bf2739779b98a756324f85.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2</a>.
# Article is at (x17f1ba1b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/383627e2058ee34ea7c775fd1fa80360a5df8be2.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2</a>.
# Article is at (x17f1ba1b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/9961438a303a6aff9d90791e9d027270bb757b14.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2</a>.
# Article is at (x17f1ba1b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/c29bf096a05216f46e2567679f60bdb76c516be2.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2</a>.
# Article is at (x17f1ba1b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "mlucdygicczhoadrzcylwadsxpilpiecskomoltejtkmqqymehpmmjxyolwpeewjckznpccpsvsxauyodhalmrioc"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-2</a>.
# Article is at (x17f1ba1b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "wpelwbcniyfxmwjcemcyrazdqlsomdbfljwnbijxpddsyoehxpceswtoxwbleecsaxcnuetzywfn"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-3">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-3</a>.
# Article is at (xd644ca6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### So you take a stroll to the train station..."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-3">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-3</a>.
# Article is at (xd644ca6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**Clue #3**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-3">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-3</a>.
# Article is at (xd644ca6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Hint 1: [Visual Telegraphs](/computing/computer-science/informationtheory/info-theory/v/history-of-optical-telegraphs-language-of-coins-5-9)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-3">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-3</a>.
# Article is at (xd644ca6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "What's that over there?  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-3">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-3</a>.
# Article is at (xd644ca6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "You don't see anything under the bench...  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-3">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-3</a>.
# Article is at (xd644ca6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/27158822db619421a3bb0cb88eabe5300d163efa.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-3">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-3</a>.
# Article is at (xd644ca6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/4d15554575ba773eec54406e357768819620d3c7.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-3">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-3</a>.
# Article is at (xd644ca6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/9f53749d5be321f4e1ce086cc809a3d0df38ffbd.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-3">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-3</a>.
# Article is at (xd644ca6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/ba9662900df327f2f43c5181f37e3b264381f880.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-3">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-3</a>.
# Article is at (xd644ca6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/f02f47f45914f22fdb6cfa967fa0650e92642b45.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Finally you approach the safe house..."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Hints"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Still Stuck?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"1) Remember there was a newspaper clipping found inside the bag in [The Discovery](/computing/computer-science/cryptography/cryptochallenge/a/the-discovery)  \n"
"2) Make sure you are comfortable with different number bases, such as [binary numbers](/math/pre-algebra/applying-math-reasoning-topic/alternate-number-bases/v/number-systems-introduction).  \n"
"3) A [frequency stability](/computing/computer-science/cryptography/crypt/p/frequency-fingerprint-exploration) tool could help.  \n"
"4) the [XOR operation](/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation) was used when constructing in this code."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Ah! Garbage..."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Check out the hints in the next exercise"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Hopefully you have enough information to break the initial **secret code**..."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Luckily you brought a flashlight..."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The coast is clear."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "These notes look like they are related to the code..."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "You don't want anyone to know you were here, so you return the garbage immediately and escape."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/0601f152f0e1bcbcea7541f9f4790957ebb4bf47.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/1f9158ed80f30766656acc6a7c1f05d1800cc43e.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/30243a273628f04df8202e6f728e60534bfb3d32.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/3131e261c38bd6061c83c9c4a48bcb3d30b7a32a.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/3d05d1f5bafc011e010c4d072520f0c941b98dd9.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/3d8f4cf3d24d2349036daca8469b2056d830f3ff.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/47c1fe351d5efa9a25f20cb6bc09dbc064a58001.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/6e0bb91d6538fa83006db9f7f24c0dfbbab6a7f3.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/7dbc6822426d7f39ba8101669335993ed8e1b0fc.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/a0b0bff6959f5ea306acb198082f4c0e36e98aa7.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/b92ac7d16140df955a6624a2a0a3a8b03db48e91.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/bdd87cabe5ecb9eba8d609848ce40a557ebce8ee.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/cee0a70e142e82a67835d3da9e022f130099e9a9.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# Article is at (x758eea38) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/f946db4ab813466c344eaeac15f84dfcc942f16b.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/clue-4</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"1) Remember there was a newspaper clipping found inside the bag in [The Discovery](https://www.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery)  \n"
"2) Make sure you are comfortable with different number bases, such as [binary numbers](/math/pre-algebra/applying-math-reasoning-topic/alternate-number-bases/v/number-systems-introduction).  \n"
"3) A [frequency stability](https://www.khanacademy.org/computing/computer-science/cryptography/crypt/p/frequency-fingerprint-exploration) tool could help.  \n"
"4) the [XOR operation](https://www.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation) was used when constructing in this code."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1</a>.
# Article is at (x41c0cb9f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### This looks promising..."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1</a>.
# Article is at (x41c0cb9f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Can you break the encryption?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1</a>.
# Article is at (x41c0cb9f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"Hint: [Review Caesar Cipher](/math/applied-math/cryptography/crypt/v/caesar-cipher)  \n"
"Hint: [Practice Caesar Cipher](/computing/computer-science/cryptography/crypt/p/caesar-cipher-exploration)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1</a>.
# Article is at (x41c0cb9f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Luckily you have a friend who works there.  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1</a>.
# Article is at (x41c0cb9f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "You are in luck, you have found **clue #1**, an encrypted message:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1</a>.
# Article is at (x41c0cb9f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "You enter a dark hotel."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1</a>.
# Article is at (x41c0cb9f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "You have 2 minutes..."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1</a>.
# Article is at (x41c0cb9f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "You run to the waste basket"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1</a>.
# Article is at (x41c0cb9f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Your friend informs you that someone has been checked into room 250 for the past 3 days...they give you a copy of the key"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery</a>.
# Article is at (x41c0cb9f) on the pl stage.
# Article is at (x9114c20a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/40a9e00eb7d2c0a67f86b71fbf13ed5326d410c8.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1</a>.
# Article is at (x41c0cb9f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/60f40ff343ced79b2075b15f35568272c7f01137.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1</a>.
# Article is at (x41c0cb9f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/63ed59fc99767e6407af39578d5ac3e683d95d49.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1</a>.
# Article is at (x41c0cb9f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/67271fd0da972d902e7cb0bff3ddc865750e7129.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1</a>.
# Article is at (x41c0cb9f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/6ec42b4c8e6ef9f621a20253f93ebcd45cfa5013.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1</a>.
# Article is at (x41c0cb9f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/ae4b3f6f4a7d6cab97d694ed02ea2dd9a3f2b633.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/crypto-clue-1</a>.
# Article is at (x41c0cb9f) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/b955ca108d67590fb7921915831b238f8c086eb3.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-introduction</a>.
# Article is at (xa7ef6897) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## FEEDBACK"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-introduction</a>.
# Article is at (xa7ef6897) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## HOW TO PLAY"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-introduction</a>.
# Article is at (xa7ef6897) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Q&A RULES"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-introduction</a>.
# Article is at (xa7ef6897) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "All other information you need can be found within Khan Academy."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-introduction</a>.
# Article is at (xa7ef6897) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "It builds off the ideas presented in the [Ancient Cryptography tutorial](/computing/computer-science/cryptography)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-introduction</a>.
# Article is at (xa7ef6897) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Please **do not** post __successful decryptions__ in the Q&A (this is classified information!)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-introduction</a>.
# Article is at (xa7ef6897) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Please **do** post ideas/hints to help your fellow users (especially if you solved it)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-introduction</a>.
# Article is at (xa7ef6897) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "This challenge is for **all ages**, it doesn't assume you have any specialized knowledge."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-introduction</a>.
# Article is at (xa7ef6897) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "This is just the **first** of **several challenges** in development, please provide feedback/suggestions below based on your experience."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-introduction</a>.
# Article is at (xa7ef6897) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Through this challenge there will be exercises to assess whether you broke the **encryptions.**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-introduction">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-introduction</a>.
# Article is at (xa7ef6897) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/62ad7eb66ec65a9af7aa443ccf723c61995bef05.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-whats-next">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-whats-next</a>.
# Article is at (xb8304341) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Congratulations you've decrypted the secret code!"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-whats-next">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-whats-next</a>.
# Article is at (xb8304341) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"### What happens next? \n"
"(updates coming soon)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-whats-next">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-whats-next</a>.
# Article is at (xb8304341) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The police accepted your information and are now acting on it."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-whats-next">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-whats-next</a>.
# Article is at (xb8304341) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "This is still under construction and will be expanding according to user feedback."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-whats-next">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/cryptochallenge-whats-next</a>.
# Article is at (xb8304341) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/862cb9acfe61c18cb2bfbdae45948a84dd28095e.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery</a>.
# Article is at (x9114c20a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### One cloudy afternoon..."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery</a>.
# Article is at (x9114c20a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### To break this code you must retrace their steps..."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery</a>.
# Article is at (x9114c20a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**You** are walking down the street, when suddenly, an object is tossed out of a speeding car..."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery</a>.
# Article is at (x9114c20a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "It looks like a bag..."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery</a>.
# Article is at (x9114c20a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Looks suspicious...so you snap a few photographs of the contents:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery</a>.
# Article is at (x9114c20a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "One item really jumps out at you, it looks like some kind of **secret code**..."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery</a>.
# Article is at (x9114c20a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "You are curious...  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery</a>.
# Article is at (x9114c20a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "You return home just in time to hear the evening news...  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery</a>.
# Article is at (x9114c20a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "curious"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery</a>.
# Article is at (x9114c20a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/06db6755d101b8710c595a0349e28cb9335984dc.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery</a>.
# Article is at (x9114c20a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/4a3f391cc39beb9130a2e012ee1f85e23c8f4bb7.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery</a>.
# Article is at (x9114c20a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/6d730f9368ca63c620951bac3fcd474f7b6e5a97.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery</a>.
# Article is at (x9114c20a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/8cc23a9f1b11b1e33731c3f0a5f20d2579227f08.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery</a>.
# Article is at (x9114c20a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/a5f26e0600c8656502486c3ae79db355d6fcb847.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery</a>.
# Article is at (x9114c20a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/b3e8b3bb28b31ed50a140f86af2d292bb7d6b643.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery</a>.
# Article is at (x9114c20a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/b48a39f4c90d14869919cba44fc117146fa5143a.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery</a>.
# Article is at (x9114c20a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/c0a8d610f9eabf943a2e9d291c301d3b55d69825.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery</a>.
# Article is at (x9114c20a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/d490f2b72790b861d07870fe7c826affc24990b1.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery</a>.
# Article is at (x9114c20a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/f3f7b95756786701faf3f932bbead9e76c89a665.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery">http://translate.khanacademy.org/computing/computer-science/cryptography/cryptochallenge/a/the-discovery</a>.
# Article is at (x9114c20a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "“Two thieves in their mid 20s are suspected to be in the area, they have been known to strike in neighbouring towns. Just earlier this week the AMCO insurance office was burglarized and documents were stolen. **Reward is being offered** for information leading to their arrest....”"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Congruence Modulo"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Insights into Congruence Modulo"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"$ 26 \\text{ mod } 5 = 1 $ so it is in the equivalence class for 1,  \n"
"$ 11 \\text{ mod } 5 = 1 $ so it is in the equivalence class for 1, as well."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**From this experiment we can make a key observation:**  \n"
"The values in each of the slices are equal to the label on the slice plus or minus some **multiple of $ \\bf{C} $**.  \n"
"This means the difference between **any two values** in a slice is **some multiple of $ \\bf{C} $**.  \n"
"This observation can help us understand equivalent statements and **equivalence classes** next."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "1.  $ \\equiv $ is the symbol for congruence, which means the values **$ A $** and **$ B $** are in the same **equivalence class**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "2.  **$ (\\text{mod } C) $** tells us what **operation** we applied to **$ A $** and **$ B $**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "3.  when we have both of these, we call “$ \\equiv $” **congruence modulo $ C $.**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "> $ A \\equiv B (\\text{mod } C) $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "> $ \\ldots, -2C-1, -C-1, -1, C-1, 2C - 1, 3C-1, 4C - 1 \\ldots $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "> $ \\ldots, -3C, -2C, -C, 0, C, 2C, 3C, \\ldots $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "> $ \\ldots, 1-3C, 1-2C, 1-C, 1, 1+C, 1+2C, 1+3C, \\ldots $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "> $ \\ldots, 2-3C, 2-2C, 2-C, 2, 2+C, 2+2C, 2+3C, \\ldots $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"A common way of expressing that two values are in the same slice, is to say they are in the same **equivalence class**.  \n"
"The way we express this mathematically for mod C is: $ A \\equiv B \\ (\\text{mod } C) $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Examining the expression closer:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "If we looked at the bucket for **$ C - 1 $** we would find:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "If we looked at the bucket labelled **0** we would find:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "If we looked at the bucket labelled **1** we would find:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "If we looked at the bucket labelled **2** we would find:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "It would be useful to have a way of expressing that numbers belonged in the **same slice**. (Notice 26 is in the same slice as 1, 6, 11, 16, 21 in above example)."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let's imagine we were calculating mod 5 for all of the integers:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Note, that this is different from $ A \\text{ mod } C $: $ 26 \\neq 11 \\text { mod } 5 $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"Suppose we labelled 5 **slices** 0, 1, 2, 3, 4\\. Then, for each of the integers, we put it into a **slice** that matched the value of the integer mod 5.  \n"
"Think of these slices as buckets, which hold a set of numbers. For example, 26 would go in the slice labelled **1**, because $ 26 \\text{ mod } 5 = \\bf{1} $.  \n"
"Above is a figure that shows some integers that we would find in each of the slices."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The above expression is pronounced $ A $ is **congruent to** $ B $ modulo $ C $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "This says that $ A $ is **congruent** to $ B $ modulo $ C $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"We can gain some further insight behind what congruence modulo means by performing the same thought experiment using a positive integer **$ C $**.  \n"
"First, we would label **$ C $** slices **$ 0, 1, 2, \\ldots, C - 2, C - 1 $**.  \n"
"Then, for each of the integers, we would put it into a slice that matched the value of the integer **$ \\text{mod } C $**.  \n"
"Below is a figure that shows some representative values that we would find in each of the slices."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We will discuss the meaning of **congruence modulo** by performing a thought experiment with the **regular modulo operator**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "You may see an expression like:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "e.g. $ 26 \\equiv 11\\ (\\text{mod }5) $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/2b71fee76257ba0bdc1e4b2b64249abe7e30c2d5.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/9d2e00eaac8813b125dc99cb00f8018bde25abd2.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# Article is at (x2ea56a42) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "moed"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "# Congruence Modulo"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/congruence-modulo</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "# Insights into Congruence Modulo"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Congruence Modulo is an Equivalence Relation"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Equivalent Statements"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Why do we care that congruence modulo C is an equivalence relation ?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   $ 13 = 23 + K \\cdot 5 $. We can satisfy this with $ \\bf{K = -2} $: $ 13 = 23 + (-2) \\times 5 $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   $ 13 \\equiv 23\\ (\\text{mod }5) $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   $ 13 \\text{ mod } 5 \\equiv 23 \\text{ mod }5 $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   $ 3 \\equiv 3\\ \\text{ mod } 5 $ (**reflexive property**)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   $ 5 \\ |\\ (13 - 23) $, $ (5 \\ |\\ -10 $, which is true since $ \\bf{5 \\times -2 = -10} ) $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   $ A = B + K \\cdot C $ (where $ K $ is some integer)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   $ A \\equiv A \\ (\\text{mod } C) $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   $ A \\equiv B\\ (\\text{mod }C) $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   $ A \\text{ mod } C = B \\text{ mod }C $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   $ C \\ |\\ (A - B) $ (The | symbol means divides, or is a factor of)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   A slice of pie labelled $ B $: Equivalence class where all the values $ \\text{mod } C = B $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   A slice of pie: An **equivalence class**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   Every pair of values in a slice are related to each other"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   How we cut the pie into slices: **equivalence relation**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   How we cut the pie into slices: Using the **congruence modulo C** relation, $ \\equiv (\\text{mod } C) $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   If we combine all the slices together they would form a pie containing all of the values"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   The pie: A collection of all the **values we are interested in**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   The pie: The collection of **all integers**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   They are **reflexive**: A is related to A"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   They are **symmetric**: if A is related to B, then B is related to A"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   They are **transitive**: if A is related to B and B is related to C then A is related to C"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   We will never find a value in more than one slice (slices are mutually disjoint)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   if $ 3 \\equiv 8\\ (\\text{mod }5) $ and if $ 8 \\equiv 18\\ (\\text{mod }5) $ then $ 3 \\equiv 18\\ \\text{ mod }5 $ (**transitive property**)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   if $ 3 \\equiv 8\\ (\\text{mod }5) $ then $ 8 \\equiv 3\\ (\\text{mod }5) $ (**symmetric property**)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   if $ A \\equiv B \\ (\\text{mod }C) $ then $ B \\equiv A \\ (\\text{mod }C) $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   if $ A \\equiv \\bf{B} \\ (\\text{mod } C) $ and $ \\bf{B} \\equiv D \\ (\\text{mod } C) $ then $ \\bf{A \\equiv D} \\ (\\text{mod } C) $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**For example** the following are equivalent:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"A pie with slices that have these properties has an **equivalence relation**.  \n"
"An **equivalence relation** defines how we can **cut up** our pie (how we **partition** our set of values) into slices (**equivalence classes**)."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Before proceeding it’s important to remember the following statements are equivalent"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "In general, equivalence relations must have these properties:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"Knowing that congruence modulo C is an equivalence relation lets us know about some properties that it must have.  \n"
"**Equivalence relations** are relations that have the following properties:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let's apply these properties to a concrete example using $ \\text{mod }5: $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Since **congruence modulo is an equivalence relation for (mod C)**. This means:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Specifically, for our previous example:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "This is why we say that _Congruence modulo C is an equivalence relation_. It partitions the integers into **C different equivalence classes**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "This lets us move back and forth between **different forms** of expressing the **same idea**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"[[☃ image 1]]  \n"
"Convince yourself that the slices used in the previous example have the following properties:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/ba838dffa86988b33e367dd45a8fb57db4ff184e.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/cbe3a367fa42e90917f8566ffb4be4ecf3bf90d8.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "mod5"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# Article is at (x00da2b92) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "pie"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/equivalence-relations</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   $ C \\ |\\ (A - B) $ The | symbol means divides, or is a factor of)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## How can we calculate A^B mod C quickly for any B ?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## How can we calculate A^B mod C quickly if B is a power of 2 ?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Notes:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Step 1: Divide B into powers of 2 by writing it in binary"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Step 2: Calculate mod C of the powers of two ≤ B"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Step 3: Use modular multiplication properties to combine the calculated mod C values"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   **If the digit is 1, we need a part for 2^k, otherwise we do not**\n"
"*   **Add 1 to k, and move left to the next digit**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**...after 5 iterations we hit:**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**5^1** mod 19 = **5**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**5^117** mod 19 = ( **5^1 * 5^4 * 5^16 * 5^32 * 5^64**) mod 19  \n"
"**5^117** mod 19 = ( **5^1 mod 19 * 5^4 mod 19 * 5^16 mod 19 * 5^32 mod 19 * 5^64 mod 19**) mod 19  \n"
"**5^117** mod 19 = ( **5 * 17 * 16 * 9 * 5** ) mod 19  \n"
"**5^117** mod 19 = **61200** mod 19 = **1**  \n"
"**5^117 mod 19 = 1**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**5^16** mod 19 = (**5^8 * 5^8**) mod 19 = (**5^8 mod 19 * 5^8 mod 19**) mod 19  \n"
"**5^16** mod 19 = (**4 * 4**) mod 19 = **16** mod 19  \n"
"**5^16 mod 19 = 16**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**5^2** mod 19 = (**5^1 * 5^1**) mod 19 = (**5^1 mod 19** * **5^1 mod 19**) mod 19  \n"
"**5^2 mod 19** = (**5 * 5**) mod 19 = **25** mod 19  \n"
"**5^2 mod 19 = 6**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**5^32** mod 19 = (**5^16 * 5^16**) mod 19 = (**5^16 mod 19 * 5^16 mod 19**) mod 19  \n"
"**5^32** mod 19 = (**16 * 16**) mod 19 = **256** mod 19  \n"
"**5^32 mod 19 = 9**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**5^4** mod 19 = (**5^2 * 5^2**) mod 19 = (**5^2 mod 19 * 5^2 mod 19**) mod 19  \n"
"**5^4** mod 19 = (**6 * 6**) mod 19 = **36** mod 19  \n"
"**5^4 mod 19 = 17**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**5^64** mod 19 = (**5^32 * 5^32**) mod 19 = (**5^32 mod 19 * 5^32 mod 19**) mod 19  \n"
"**5^64** mod 19 = (**9 * 9**) mod 19 = **81** mod 19  \n"
"**5^64 mod 19 = 5**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**5^8** mod 19 = (**5^4 * 5^4**) mod 19 = (**5^4 mod 19 * 5^4 mod 19**) mod 19  \n"
"**5^8** mod 19 = (**17 * 17**) mod 19 = **289** mod 19  \n"
"**5^8 mod 19 = 4**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**7^1** mod 13 = **7**  \n"
"**7^2** mod 13 = (**7^1 *7^1**) mod 13 = (**7^1 mod 13 * 7^1 mod 13**) mod 13"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**7^2** mod 13 = (**7 *7**) mod 13 = **49** mod 13 = **10**  \n"
"**7^2 mod 13 = 10**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**7^256** mod 13 = (**7^128 * 7^128**) mod 13 = (**7^128 mod 13** * **7^128 mod 13**) mod 13  \n"
"7^**256** mod 13 = (**3 * 3**) mod 13 = **9** mod 13 = **9**  \n"
"**7^256 mod 13 = 9**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**7^4** mod 13 = (**10 * 10**) mod 13 = **100** mod 13 = **9**  \n"
"**7^4 mod 13 = 9**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**7^4** mod 13 = (**7^2 *7^2**) mod 13 = (**7^2 mod 13** * **7^2 mod 13**) mod 13"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**7^8** mod 13 = (**7^4 * 7^4**) mod 13 = (**7^4 mod 13** * **7^4 mod 13**) mod 13"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**7^8** mod 13 = (**9 * 9**) mod 13 = **81** mod 13 = **3**  \n"
"**7^8 mod 13 = 3**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "However, we also need a method for fast modular exponentiation when **B is not a power of 2**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "More optimization techniques exist, but are outside the scope of this article. It should be noted that when we perform modular exponentiation in cryptography, it is not unusual to use exponents for B > 1000 bits."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Start at the rightmost digit, let k=0 **and** for **each digit**:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "This has given us a method to calculate **A^B mod C** quickly provided that **B is a power of 2**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Using modular multiplication rules:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We can _substitute_ our previous result for **7^1 mod 13** into this equation."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We can _substitute_ our previous result for **7^2 mod 13** into this equation."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We can _substitute_ our previous result for **7^4 mod 13** into this equation."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We can use this to calculate 7^256 mod 13 **quickly**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We continue in this manner, substituting previous results into our equations."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/1cf07dd1b812de338ef86bef936e743ddac79ced.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/348688d0406ce0c0986251993dc9a8451bbe0e2c.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/85b4660da7c4e4f1e1662686a9771a51b2cf4d08.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# Article is at (xfe886d6a) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "i.e. **A^2** mod C = **(A * A)** mod C = (**(A mod C)** * **(A mod C)**) mod C"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "# How can we calculate A^B mod C quickly for any B ?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "# How can we calculate A^B mod C quickly if B is a power of 2 ?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/fast-modular-exponentiation</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "# Notes:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction</a>.
# Article is at (x6e4e9757) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Intuition Behind Modular Addition"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction</a>.
# Article is at (x6e4e9757) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Let's explore the **addition property** of modular arithmetic:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction</a>.
# Article is at (x6e4e9757) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Modular Subtraction"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction</a>.
# Article is at (x6e4e9757) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Proof for Modular Addition"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction</a>.
# Article is at (x6e4e9757) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### (**A + B**) mod C = (A mod C + B mod C) mod C"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction</a>.
# Article is at (x6e4e9757) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### (A - B) mod C = (A mod C - B mod C) mod C"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction</a>.
# Article is at (x6e4e9757) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Example:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction</a>.
# Article is at (x6e4e9757) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**A** = C * Q1 + R1 where 0 ≤ R1 < C and Q1 is some integer. **A mod C = R1**  \n"
"**B** = C * Q2 + R2 where 0 ≤ R2 < C and Q2 is some integer. **B mod C = R2**  \n"
"**(A + B) = C * (Q1 + Q2) + R1+R2**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction</a>.
# Article is at (x6e4e9757) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**LHS = RHS = 1**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction</a>.
# Article is at (x6e4e9757) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**LHS** = (A + B) mod C  \n"
"**LHS** = (C * (Q1 + Q2) + R1+ R2) mod C  \n"
"We can eliminate the multiples of C when we take the mod C  \n"
"**LHS = (R1 + R2) mod C**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction</a>.
# Article is at (x6e4e9757) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**LHS=RHS= (R1 + R2) mod C**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction</a>.
# Article is at (x6e4e9757) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**RHS** = (A mod C + B mod C) mod C  \n"
"**RHS = (R1 + R2) mod C**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction</a>.
# Article is at (x6e4e9757) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "A very similar proof holds for modular subtraction"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction</a>.
# Article is at (x6e4e9757) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "From the [quotient remainder theorem](/math/applied-math/cryptography/modarithmetic/a/the-quotient-remainder-theorem) we can write A and B as:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction</a>.
# Article is at (x6e4e9757) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"LHS = (A + B) mod C  \n"
"LHS = (**14 + 17**) mod 5  \n"
"LHS = **31** mod 5  \n"
"**LHS = 1**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction</a>.
# Article is at (x6e4e9757) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let **A=14, B=17, C=5**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction</a>.
# Article is at (x6e4e9757) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"Let's verify: **(A + B) mod C = (A mod C + B mod C) mod C**  \n"
"**LHS** = Left Hand Side of the Equation  \n"
"**RHS** = Right Hand Side of the Equation"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction</a>.
# Article is at (x6e4e9757) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Now, we only have to go around the circle clockwise the total of the number of steps that contributed to each of numbers final position (as shown in the bottom right modular circle). **This method applies, in general, to any two integers and any modular circle.**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction</a>.
# Article is at (x6e4e9757) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Observe the figure below. If we want to calculate **12+9 mod 7** we can easily go around the modular circle for a sequence of **12+9 steps** clockwise (as shown in the bottom left circle)."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction</a>.
# Article is at (x6e4e9757) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"RHS = (A mod C + B mod C) mod C  \n"
"RHS = (**14 mod 5 + 17 mod 5**) mod 5  \n"
"RHS = (**4 + 2**) mod 5  \n"
"**RHS = 1**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction</a>.
# Article is at (x6e4e9757) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We can take a shortcut by observing that every **7 steps** we end up in the same position on the modular circle. These complete loops around the modular circle **don’t contribute to our final position**. We ignore these complete loops around the circle by **calculating each number mod 7** (as shown in the two upper modular circles). This will give us the number of clockwise steps, relative to 0, that contributed to each of their final positions around the modular circle."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction</a>.
# Article is at (x6e4e9757) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"We will prove that **(A + B) mod C = (A mod C + B mod C) mod C**  \n"
"We must show that **LHS=RHS**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction</a>.
# Article is at (x6e4e9757) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/3a2cb32acda2b6b63f88c61b8def97c0c1185767.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-addition-and-subtraction</a>.
# Article is at (x6e4e9757) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "mod"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation</a>.
# Article is at (x2ba82f52) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"##  \n"
"Finally, let's explore the **exponentiation property**:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation</a>.
# Article is at (x2ba82f52) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### A^B mod C = ( (A mod C)^B ) mod C"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation</a>.
# Article is at (x2ba82f52) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### For Example:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation</a>.
# Article is at (x2ba82f52) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### How can we calculate A^B mod C quickly if B is a power of 2 ?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation</a>.
# Article is at (x2ba82f52) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### What can we do to to reduce the size of terms involved and make our calculation faster?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation</a>.
# Article is at (x2ba82f52) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**2^50** mod 13 = **1125899906842624** mod 13 = **4**  \n"
"**2^40** mod 13 = **1099511627776** mod 13 = **3**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation</a>.
# Article is at (x2ba82f52) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**2^90** mod 13 = (**2^50 * 2^40**) mod 13  \n"
"**2^90** mod 13 = (**2^50** mod 13 * **2^40** mod 13) mod 13  \n"
"**2^90** mod 13 = ( **4** * **3** ) mod 13  \n"
"**2^90** mod 13 = **12** mod 13  \n"
"**2^90** mod 13 = **12**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation</a>.
# Article is at (x2ba82f52) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**combine the parts**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation</a>.
# Article is at (x2ba82f52) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**each part**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation</a>.
# Article is at (x2ba82f52) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**exponent rules**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation</a>.
# Article is at (x2ba82f52) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**mod C**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation</a>.
# Article is at (x2ba82f52) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**multiplication properties**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation</a>.
# Article is at (x2ba82f52) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**smaller parts**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation</a>.
# Article is at (x2ba82f52) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Here is a simple **divide and conquer** strategy:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation</a>.
# Article is at (x2ba82f52) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "How could we calculate **7^256 mod 13** using a calculator that can't hold numbers larger than **7^10** ?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation</a>.
# Article is at (x2ba82f52) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"Often we want to calculate **A^B mod C** for _large values of B_.  \n"
"Unfortunately, **A^B** becomes very large for even modest sized values for **B**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation</a>.
# Article is at (x2ba82f52) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Suppose we want to calculate **2^90 mod 13**, but we have a calculator that can't hold any numbers **larger than 2^50**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation</a>.
# Article is at (x2ba82f52) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "There is a better way...."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation</a>.
# Article is at (x2ba82f52) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"These huge values cause our calculators and computers to return **overflow errors**.  \n"
"Even if they didn't, it would take a _long time_ to find the mod of these huge numbers directly."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-exponentiation</a>.
# Article is at (x2ba82f52) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We could split **7^256** into _25 parts_ of **7^10** and _1 part_ of **7^6**, but this wouldn't be very efficient."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "    **e.g. 10/5 is the same as 10* 1/5**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"    **e.g. the inverse of 5 is 1/5**\n"
"*   All real numbers other than 0 have an inverse"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## **Example: A=2 C=6**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## **Example: A=3 C=7**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## **How to find a modular inverse**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## **This method seems slow...**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## **What is a modular inverse?**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## What is an inverse?"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### **Step 1\\. Calculate **A * B mod C** for **B values __0 through C-1__****"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### **Step 1\\. Calculate A * B mod C for B values 0 through C-1**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### **Step 2\\. The modular inverse of A mod C is the B value that makes A * B mod C = 1**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### **Step 2\\. The modular inverse of A mod C is the B value that makes __A * B mod C = 1__**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   (A * A^-1) ≡ 1 (mod C) or equivalently (A * A^-1) mod C = 1"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   Multiplying a number by the inverse of A is equivalent to dividing by A"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   Only the numbers coprime to C (numbers that share no prime factors with C) have a modular inverse (mod C)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   The inverse of a number A is 1/A since A * 1/A = 1 "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "*   The modular inverse of A (mod C) is A^-1"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**step 1\\.** Calculate A * B mod C for B values 0 through C-1"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**step 2.** The modular inverse of A mod C is the B value that makes A * B mod C = 1"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "2 * 0 ≡ 0 (mod 6)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "2 * 1 ≡ 2 (mod 6)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "2 * 2 ≡ 4 (mod 6)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "2 * 3 ≡ 6 ≡ 0 (mod 6)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "2 * 4 ≡ 8 ≡ 2 (mod 6)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "2 * 5 ≡ 10 ≡ 4 (mod 6)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "3 * 0 ≡ 0 (mod 7)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "3 * 1 ≡ 3 (mod 7)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "3 * 2 ≡ 6 (mod 7)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "3 * 3 ≡ 9 ≡ 2 (mod 7)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "3 * 4 ≡ 12 ≡ 5 (mod 7)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "3 * 5 ≡ 15 (mod 7) ≡ __1__ (mod 7)   <------ ​FOUND INVERSE!"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "3 * 6 ≡ 18 (mod 7) ≡ 4 (mod 7)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "5 is the modular inverse of 3 mod 7 since 5*3 mod 7 = 1"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "A __naive method__ of finding a modular inverse for A (mod C) is:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "In modular arithmetic we do not have a division operation. However, we do have modular inverses."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let's do one more example where we don't find an inverse."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"No value of B makes A * B mod C = 1\\. Therefore, A has no modular inverse (mod 6).  \n"
"This is because 2 is not coprime to 6 (they share the prime factor 2)."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Note that the term B mod C can only have an integer value 0 through C-1, so testing larger values for B is redundant."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Recall that a number multiplied by its inverse equals 1. From basic arithmetic we know that:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Simple!"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-inverses</a>.
# Article is at (xf75855db) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "There is a much faster method for finding the inverse of A (mod C) that we will discuss in the next articles on the Extended Euclidean Algorithm. First, let's do some exercises!"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid " (A * B) mod C = (A mod C * B mod C) mod C"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Let's explore the multiplication property of modular arithmetic:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Proof for Modular Multiplication"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Example for Multiplication:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**A = C * Q1 + R1** where 0 ≤ R1 < C and Q1 is some integer. **A mod C = R1**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**B = C * Q2 + R2** where 0 ≤ R2 < C and Q2 is some integer. **B mod C = R2**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**LHS = (A * B) mod C**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**LHS = (R1 * R2) mod C**  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**LHS = RHS = (R1 * R2 ) mod C**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**LHS = RHS = 4**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**LHS**= Left Hand Side of the Equation"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**RHS = (R1 * R2 ) mod C**  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**RHS =** (A mod C * B mod C) mod C"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**RHS**= Right Hand Side of the Equation"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "From the [quotient remainder theorem](/math/applied-math/cryptography/modarithmetic/a/the-quotient-remainder-theorem) we can write **A** and **B** as:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "LHS = ((C * Q1 + R1 ) * (C * Q2 + R2) ) mod C"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "LHS = (C * (C * Q1 * Q2 + Q1 * R2 + Q2 * R1)  + R1 * R 2 )  mod C"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "LHS = (C * C * Q1 * Q2 + C * Q1 * R2 + C * Q2 * R1 + R1 * R 2 )  mod C"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "LHS = **(4 * 7)** mod 6"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "LHS = **(A * B)** mod C"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "LHS = **28** mod 6"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "LHS = **4**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let **A=4, B=7, C=6**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Let's verify: **(A * B)** mod C = (**A mod C** * **B** **mod C**) mod C"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Next let's do the **RHS**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "RHS = (**4 * 1**) mod 6"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "RHS = (**4 mod 6** * **7 mod 6**) mod 6"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "RHS = (**A** **mod C** * **B** **mod C**) mod C"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "RHS = **4 mod 6**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "RHS = **4**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Therefore RHS = LHS  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We can eliminate the multiples of C when we take the mod C"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We must show that **LHS = RHS**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# Article is at (xf15c7b9b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We will prove that **(A * B) mod C = (A mod C * B mod C) mod C**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "# Proof for Modular Multiplication"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/modular-multiplication</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "### (A * B) mod C = (A mod C * B mod C) mod C"
msgstr ""

# Title of tutorial article <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>
# Title of tutorial article (xe7fecd26) on the pl stage
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: text)
#: intl/datastore:1
msgid "The Euclidean Algorithm"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Example:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## The Algorithm"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Understanding the Euclidean Algorithm"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   A ≠0\n"
"*   B =0, GCD(6,0)=6"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   A ≠0\n"
"*   B ≠0\n"
"*   Use long division to find that 192/78 = 2 with a remainder of 36\\. We can write this as:\n"
"*   192 = 78 * 2 + 36\n"
"*   Find GCD(78,36), since GCD(192,78)=GCD(78,36)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   A ≠0\n"
"*   B ≠0\n"
"*   Use long division to find that 36/6 = 6 with a remainder of 0\\. We can write this as:\n"
"*   36 = 6 * 6 + 0\n"
"*   Find GCD(6,0), since GCD(36,6)=GCD(6,0)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   A ≠0\n"
"*   B ≠0\n"
"*   Use long division to find that 78/36 = 2 with a remainder of 6\\. We can write this as:\n"
"*   78 = 36 * 2 + 6\n"
"*   Find GCD(36,6), since GCD(78,36)=GCD(36,6)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   A=270, B=192\n"
"*   A ≠0\n"
"*   B ≠0\n"
"*   Use long division to find that 270/192 = 1 with a remainder of 78\\. We can write this as: 270 = 192 * 1 +78\n"
"*   Find GCD(192,78), since GCD(270,192)=GCD(192,78)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   B+C=A\n"
"*   M⋅GCD(B,C) + N⋅GCD(B,C) = A\n"
"*   (M + N)⋅GCD(B,C) = A"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   GCD(A,0) = A\n"
"*   GCD(0,B) = B\n"
"*   **If A = B⋅Q + R and B≠0 then GCD(A,B) = GCD(B,R)** where Q is an integer, R is an integer between 0 and B-1"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   GCD(A,B) by definition, evenly divides B.\n"
"*   We proved that GCD(A,B) evenly divides C.\n"
"*   Since the GCD(A,B) divides both B and C evenly it is a common divisor of B and C."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   GCD(B,C) by definition, evenly divides B.\n"
"*   We proved that GCD(B,C) evenly divides A.\n"
"*   Since the GCD(B,C) divides both A and B evenly it is a common divisor of A and B."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   If A = 0 then GCD(A,B)=B, since the GCD(0,B)=B, and we can stop.  \n"
"*   If B = 0 then GCD(A,B)=A, since the GCD(A,0)=A, and we can stop.  \n"
"*   Write A in quotient remainder form (A = B⋅Q + R)\n"
"*   Find GCD(B,R) using the Euclidean Algorithm since GCD(A,B) = GCD(B,R)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   The largest integer that can evenly divide A is A.\n"
"*   All integers evenly divide 0, since for any integer, C, we can write C ⋅ 0 = 0\\. So we can conclude that A must evenly divide 0.\n"
"*   The greatest number that divides both A and 0 is A."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"*   X⋅GCD(A,B) - Y⋅GCD(A,B) = C\n"
"*   (X - Y)⋅GCD(A,B) = C"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**GCD(270,192) = 6**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**GCD(A,B) must be less than or equal to, GCD(B,C), because GCD(B,C) is the “greatest” common divisor of B and C.**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**GCD(A,B)=GCD(B,A-B)**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**GCD(A,B)=GCD(B,C)**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**GCD(A,B)=GCD(B,R)**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**Proof that GCD(A,B) = GCD(B,R)**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**Proof that GCD(A,B)=GCD(A,A-B)**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**Proof that the GCD(A,B) evenly divides C**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**Proof that the GCD(B,C) evenly divides A**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**So we have shown:**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "A-B=C gives us:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "A=192, B=78"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "A=36, B=6"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "A=6, B=0"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "A=78, B=36"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "An illustration of this proof  is shown in the figure below"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "An illustration of this proof  is shown in the left portion of the figure below:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "An illustration of this proof  is shown in the right portion of the figure below."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "But A= B⋅Q + R so  A-Q⋅B=R"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Find the GCD of 270 and 192"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "GCD(270,192) = GCD(192,78) = GCD(78,36) = GCD(36,6) = GCD(6,0) = 6"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "GCD(A,B)=GCD(A-B,B)=GCD(A-2B,B)=GCD(A-3B,B)=...=GCD(A-Q⋅B,B)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "GCD(B,C) must be less than or equal to, GCD(A,B), because GCD(A,B) is the **“greatest”** common divisor of A and B."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Given that GCD(A,B)≤GCD(B,C) and GCD(B,C)≤GCD(A,B) we can conclude that:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "If we examine the Euclidean Algorithm we can see that it makes use of the following properties:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "In the next article we will show how we can extend the Euclidean Algorithm to find modular inverses."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Recall that the Greatest Common Divisor (GCD) of two integers A and B is the **largest integer that divides both A and B**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "So we can see that GCD(A,B) evenly divides C."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "So we can see that GCD(B,C) evenly divides A."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Suppose we have three integers **A,B** and **C** such that **A-B=C**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The **Euclidean Algorithm** is a technique for quickly finding the **GCD** of two integers."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The Euclidean Algorithm for finding GCD(A,B) is as follows:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The Euclidean Algorithm makes use of these properties by rapidly reducing the problem into easier and easier problems, using the third property,  until it is easily solved by using one of the first two properties."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The GCD(A,B), by definition, evenly divides A. As a result, A must be some multiple of GCD(A,B). i.e. X⋅GCD(A,B)=A where X is some integer"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The GCD(A,B), by definition, evenly divides B. As a result,  B must be some multiple of GCD(A,B). i.e. Y⋅GCD(A,B)=B where Y is some integer"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The GCD(B,C), by definition, evenly divides B. As a result, B must be some multiple of GCD(B,C). i.e. M⋅GCD(B,C)=B where M is some integer"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The GCD(B,C), by definition, evenly divides C. As a result,  C must be some multiple of GCD(B,C). i.e. N⋅GCD(B,C)=C where N is some integer"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The first two properties let us find the GCD if either number is 0\\. The third property lets us take a larger, more difficult to solve problem, and **reduce it to a smaller, easier to solve problem**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The order of terms does not matter, thus:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The order of the terms does not matter so we can say GCD(A,B)=GCD(A-B,B)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The proof for **GCD(0,B)=B** is similar. (Same proof, but we replace A with B)."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Thus **GCD(A,B)=GCD(R,B)**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "To prove that **GCD(A,B)=GCD(B,R)** we first need to show that **GCD(A,B)=GCD(B,A-B)**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We can prove that GCD(A,0)=A is as follows:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We can repeatedly apply GCD(A,B)=GCD(A-B,B) to obtain:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We can understand why these properties work by proving them."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We proved that GCD(A,B)=GCD(B,A-B)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Which is equivalent to:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/6b6e1950ccd637d77235017c258b86378a4cba54.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/bdaae4e94ab086d57f14df18ee01abf5f36f49e4.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# Article is at (xe7fecd26) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/d6568dc48504e7a948ceffc61de4802868d28f76.png"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "# Example:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "# The Algorithm"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "# Understanding the Euclidean Algorithm"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "[[☃ image 1]]**Proof that GCD(A,B) = GCD(B,R)**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "[[☃ image 1]]**Proof that GCD(A,B)=GCD(A,A-B)**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "[[☃ image 1]]**Proof that the GCD(B,C) evenly divides A**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-euclidean-algorithm</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "[[☃ image 1]]Suppose we have three integers **A,B** and **C** such that **A-B=C**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem</a>.
# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at <a href="http://translate.khanacademy.org/math/ap-calculus-ab/ab-limits-continuity/ab-limits-graphically/a/approximating-limit-values-from-a-graph">http://translate.khanacademy.org/math/ap-calculus-ab/ab-limits-continuity/ab-limits-graphically/a/approximating-limit-values-from-a-graph</a>.
# Article is at (x0b96127d) on the pl stage.
# Article is at (x1343778b) on the pl stage.
# Article is at (xf9fbb880712fbb6f) on the pt stage.
# (KA_SOURCE_TREE: accents)
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: bn)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: hy)
# (KA_SOURCE_TREE: it)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: ko)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: nl)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (KA_SOURCE_TREE: sr)
# (KA_SOURCE_TREE: sv)
# (KA_SOURCE_TREE: ta)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Examples"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem</a>.
# Article is at (x0b96127d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## The quotient remainder theorem"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem</a>.
# Article is at (x0b96127d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**-16** = **26** * -1 + **10**  \n"
"**-16** mod **26** = **10**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem</a>.
# Article is at (x0b96127d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**13** = **5** * 2 + **3**  \n"
"**13** mod **5** = **3**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem</a>.
# Article is at (x0b96127d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**7** = **2** * 3 + **1**  \n"
"**7** mod **2** = **1**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem</a>.
# Article is at (x0b96127d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"**8** = **4** * 2 + **0**  \n"
"**8** mod **4** = **0**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem</a>.
# Article is at (x0b96127d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**A = -16**, **B = 26**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem</a>.
# Article is at (x0b96127d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**A = 13**, **B = 5**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem</a>.
# Article is at (x0b96127d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**A = 7**, **B = 2**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem</a>.
# Article is at (x0b96127d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**A = 8**, **B = 4**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem</a>.
# Article is at (x0b96127d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "**A= B * Q + R where 0 ≤ R < B**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem</a>.
# Article is at (x0b96127d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"The quotient remainder theorem says:  \n"
"Given **any** integer **A**, and **a positive** integer **B**, there exist **unique integers Q and R** such that"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem</a>.
# Article is at (x0b96127d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"We can see that this comes directly from long division. When we **divide A by B** in long division, Q is the quotient and **R is the remainder**.  \n"
"If we can write a number in this form then **A mod B = R**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem</a>.
# Article is at (x0b96127d) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"When we want to **prove some properties** about **modular arithmetic** we often make use of the **quotient remainder theorem**.  \n"
"It is a simple idea that comes directly from **long division**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "# The Quotient Remainder Theorem"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "## A= B * Q + R where 0 ≤ R < B"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "### **A = -16**, **B = 26**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "### **A = 13**, **B = 5**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "### **A = 7**, **B = 2**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid "### **A = 8**, **B = 4**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"The Quotient Remainder theorem says:  \n"
"Given **any** integer **A**, and **a positive** integer **B**, there exist **unique integers Q and R** such that"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/the-quotient-remainder-theorem</a>.
# (KA_SOURCE_TREE: lol)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"When we want to **prove some properties** about **modular arithmetic** we often make use of the **Quotient Remainder Theorem**.  \n"
"It is a simple idea that comes directly from **long division**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## An Introduction to Modular Math"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Notes to the Reader"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "## Visualize modulus with clocks"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### $ 7 \\text{ mod } 2 = ? $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### $ 8 \\text{ mod } 4 = ? $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### **$ -5 \\text{ mod } 3 = ? $**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### Congruence Modulo"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "### mod in programming languages and calculators"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"$ A $ is the dividend  \n"
"$ B $ is the divisor  \n"
"$ Q $ is the quotient  \n"
"$ R $ is the remainder"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "(If the number is positive we step clockwise, if it's **negative** we step **counter-clockwise**.)"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"1.  Construct this clock for size $ B $\n"
"2.  Start at 0 and move around the clock $ A $ steps\n"
"3.  Wherever we land is our solution."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "> $ A \\text{ mod } B = (A + K \\cdot B) \\text{ mod } B $ for **any integer $ \\bf{K} $**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "> $ \\begin{eqnarray} 3 \\text{ mod } 10 = 3 \\\\ 13 \\text{ mod } 10 = 3 \\\\ 23 \\text{ mod } 10 = 3 \\\\ 33 \\text{ mod } 10 = 3 \\\\ \\end{eqnarray} $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "> $ \\begin{eqnarray} \\dfrac{13}{5} &=& 2 \\text{ remainder } \\bf{3} \\\\ 13 \\text{ mod } 5 &=& \\bf{3} \\\\ \\end{eqnarray} $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "> $ \\begin{eqnarray} \\frac{0}{3} &=& 0 \\text { remainder } \\bf{0} \\\\ \\frac{1}{3} &=& 0 \\text { remainder } \\bf{1} \\\\ \\frac{2}{3} &=& 0 \\text { remainder } \\bf{2} \\\\ \\frac{3}{3} &=& 1 \\text { remainder } \\bf{0} \\\\ \\frac{4}{3} &=& 1 \\text { remainder } \\bf{1} \\\\ \\frac{5}{3} &=& 1 \\text { remainder } \\bf{2} \\\\ \\frac{6}{3} &=& 2 \\text { remainder } \\bf{0} \\end{eqnarray} $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "> $ \\dfrac{A}{B} = Q \\text{ remainder } R $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "> **$ A \\equiv B\\ (\\text{mod } C) $**"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "By noticing this, we can visualize the modulo operator by using circles."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "For example, a clock with the 12 replaced by a 0 would be the circle for a modulus of 12.  "
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "If we have $ A \\text{ mod } B $ and we increase $ A $ by a **multiple of $ \\bf{B} $**, we will end up in the same spot, i.e."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "In the next article we will explain what it means and how it is related to the expressions above."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"Many programming languages, and calculators, have a mod operator, typically represented with the % symbol. If you calculate the result of a negative number, some languages will give you a negative result.  \n"
"e.g."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Observe what happens when we increment numbers by one and then divide them by 3."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"Sometimes, we are only interested in what the **remainder** is when we divide $ A $ by $ B $.  \n"
"For these cases there is an operator called the modulo operator (abbreviated as mod)."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "The remainders start at 0 and increases by 1 each time, until the number reaches one less than the number we are dividing by. After that, the sequence **repeats**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "This says that $ A $ is **congruent** to $ B $ modulo $ C $. It is similar to the expressions we used here, but not quite the same."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "To find the result of $ A \\text{ mod } B $ we can follow these steps:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "Using the same $ A $, $ B $, $ Q $, and $ R $ as above, we would have: $ A \\text{ mod } B = R $"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We ended up at **0** so $ 8 \\text{ mod } 4 = \\bf{0} $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We ended up at **1** so $ -5 \\text{ mod } 3 = \\bf{1} $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We ended up at **1** so $ 7 \\text{ mod } 2 = \\bf{1} $."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We would say this as $ A $ _modulo_ $ B $ _is equal to_ $ R $. Where $ B $ is referred to as the **modulus**."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "We write 0 at the top of a circle and continuing clockwise writing integers 1, 2, ... up to one less than the modulus."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "When we divide two integers we will have an equation that looks like the following:"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"With a modulus of 2 we make a clock with numbers 0, 1.  \n"
"We start at 0 and go through 7 numbers in a clockwise sequence 1, 0, 1, 0, 1, 0, 1."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"With a modulus of 3 we make a clock with numbers 0, 1, 2.  \n"
"We start at 0 and go through 5 numbers in **counter-clockwise** sequence (5 is **negative**) 2, 1, 0, 2, 1."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid ""
"With a modulus of 4 we make a clock with numbers 0, 1, 2, 3.  \n"
"We start at 0 and go through 8 numbers in a clockwise sequence 1, 2, 3, 0, 1, 2, 3, 0."
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/6985b5aad53b5290f3f0eb64bf9529428a0362cc.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/7182f3b5a4573a4846e1297388c97516550c3fba.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/809662edbc068ea7e9c91becdcad5fd36078ee07.jpg"
msgstr ""

# Article is at <a href="http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic">http://translate.khanacademy.org/computing/computer-science/cryptography/modarithmetic/a/what-is-modular-arithmetic</a>.
# Article is at (x1343778b) on the pl stage.
# (KA_SOURCE_TREE: bg)
# (KA_SOURCE_TREE: de)
# (KA_SOURCE_TREE: es)
# (KA_SOURCE_TREE: fr)
# (KA_SOURCE_TREE: ja)
# (KA_SOURCE_TREE: lol)
# (KA_SOURCE_TREE: pl)
# (KA_SOURCE_TREE: pt)
# (KA_SOURCE_TREE: shared)
# (format: perseus_text)
#: intl/datastore:1
msgid "https://ka-perseus-images.s3.amazonaws.com/cc504f5d837e4bf480bf2f0acc5496ca1cfebdcc.jpg"
msgstr ""
